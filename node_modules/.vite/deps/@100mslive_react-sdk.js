import {
  require_react_dom
} from "./chunk-QUFT4VOS.js";
import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  adapter_core_default,
  createSelector,
  fn,
  require_eventemitter2,
  require_lib,
  require_lodash,
  require_ua_parser,
  v4_default
} from "./chunk-RQLUANBE.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@100mslive/react-sdk/dist/primitives/HmsRoomProvider.js
var import_react3 = __toESM(require_react());

// node_modules/@100mslive/react-sdk/node_modules/zustand/esm/index.js
var import_react = __toESM(require_react());
function createStore(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}
var isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var useIsomorphicLayoutEffect = isSSR ? import_react.useEffect : import_react.useLayoutEffect;
function create(createState) {
  const api = typeof createState === "function" ? createStore(createState) : createState;
  const useStore = (selector = api.getState, equalityFn = Object.is) => {
    const [, forceUpdate] = (0, import_react.useReducer)((c5) => c5 + 1, 0);
    const state = api.getState();
    const stateRef = (0, import_react.useRef)(state);
    const selectorRef = (0, import_react.useRef)(selector);
    const equalityFnRef = (0, import_react.useRef)(equalityFn);
    const erroredRef = (0, import_react.useRef)(false);
    const currentSliceRef = (0, import_react.useRef)();
    if (currentSliceRef.current === void 0) {
      currentSliceRef.current = selector(state);
    }
    let newStateSlice;
    let hasNewStateSlice = false;
    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
      newStateSlice = selector(state);
      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
    }
    useIsomorphicLayoutEffect(() => {
      if (hasNewStateSlice) {
        currentSliceRef.current = newStateSlice;
      }
      stateRef.current = state;
      selectorRef.current = selector;
      equalityFnRef.current = equalityFn;
      erroredRef.current = false;
    });
    const stateBeforeSubscriptionRef = (0, import_react.useRef)(state);
    useIsomorphicLayoutEffect(() => {
      const listener = () => {
        try {
          const nextState = api.getState();
          const nextStateSlice = selectorRef.current(nextState);
          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
            stateRef.current = nextState;
            currentSliceRef.current = nextStateSlice;
            forceUpdate();
          }
        } catch (error) {
          erroredRef.current = true;
          forceUpdate();
        }
      };
      const unsubscribe = api.subscribe(listener);
      if (api.getState() !== stateBeforeSubscriptionRef.current) {
        listener();
      }
      return unsubscribe;
    }, []);
    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
    (0, import_react.useDebugValue)(sliceToReturn);
    return sliceToReturn;
  };
  Object.assign(useStore, api);
  useStore[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const items = [useStore, api];
    return {
      next() {
        const done = items.length <= 0;
        return { value: items.shift(), done };
      }
    };
  };
  return useStore;
}

// node_modules/@100mslive/react-sdk/node_modules/@100mslive/hms-video-store/dist/index.js
var import_ua_parser_js = __toESM(require_ua_parser());
var import_lodash = __toESM(require_lodash());
var import_lodash2 = __toESM(require_lodash());
var import_eventemitter2 = __toESM(require_eventemitter2());

// node_modules/@100mslive/react-sdk/node_modules/@100mslive/hms-video-store/node_modules/zustand/esm/shallow.js
function shallow(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  const keysA = Object.keys(objA);
  if (keysA.length !== Object.keys(objB).length) {
    return false;
  }
  for (let i9 = 0; i9 < keysA.length; i9++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i9]) || !Object.is(objA[keysA[i9]], objB[keysA[i9]])) {
      return false;
    }
  }
  return true;
}
var shallow_default = shallow;

// node_modules/@100mslive/react-sdk/node_modules/@100mslive/hms-video-store/node_modules/zustand/esm/vanilla.js
function create2(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}
var vanilla_default = create2;

// node_modules/@100mslive/react-sdk/node_modules/@100mslive/hms-video-store/dist/index.js
var import_eventemitter22 = __toESM(require_eventemitter2());
var import_eventemitter23 = __toESM(require_eventemitter2());
var Dt = __toESM(require_lib());
var import_eventemitter24 = __toESM(require_eventemitter2());
var Ra = Object.defineProperty;
var Ia = Object.defineProperties;
var Ha = Object.getOwnPropertyDescriptors;
var Ft = Object.getOwnPropertySymbols;
var Ca = Object.getPrototypeOf;
var Kr = Object.prototype.hasOwnProperty;
var qr = Object.prototype.propertyIsEnumerable;
var La = Reflect.get;
var $r = (a12, e16, t11) => e16 in a12 ? Ra(a12, e16, { enumerable: true, configurable: true, writable: true, value: t11 }) : a12[e16] = t11;
var m = (a12, e16) => {
  for (var t11 in e16 || (e16 = {})) Kr.call(e16, t11) && $r(a12, t11, e16[t11]);
  if (Ft) for (var t11 of Ft(e16)) qr.call(e16, t11) && $r(a12, t11, e16[t11]);
  return a12;
};
var v = (a12, e16) => Ia(a12, Ha(e16));
var Zi = (a12, e16) => {
  var t11 = {};
  for (var i9 in a12) Kr.call(a12, i9) && e16.indexOf(i9) < 0 && (t11[i9] = a12[i9]);
  if (a12 != null && Ft) for (var i9 of Ft(a12)) e16.indexOf(i9) < 0 && qr.call(a12, i9) && (t11[i9] = a12[i9]);
  return t11;
};
var wa = (a12, e16) => () => (e16 || a12((e16 = { exports: {} }).exports, e16), e16.exports);
var K = (a12, e16, t11) => La(Ca(a12), t11, e16);
var c = (a12, e16, t11) => new Promise((i9, r9) => {
  var s9 = (l5) => {
    try {
      n9(t11.next(l5));
    } catch (u3) {
      r9(u3);
    }
  }, o14 = (l5) => {
    try {
      n9(t11.throw(l5));
    } catch (u3) {
      r9(u3);
    }
  }, n9 = (l5) => l5.done ? i9(l5.value) : Promise.resolve(l5.value).then(s9, o14);
  n9((t11 = t11.apply(a12, e16)).next());
});
var ur = wa((od, za) => {
  za.exports = { version: "0.12.7", license: "MIT", repository: { type: "git", url: "https://github.com/100mslive/web-sdks.git", directory: "packages/hms-video-store" }, main: "dist/index.cjs.js", module: "dist/index.js", typings: "dist/index.d.ts", files: ["dist", "src"], engines: { node: ">=12" }, exports: { ".": { require: "./dist/index.cjs.js", import: "./dist/index.js", default: "./dist/index.js" } }, sideEffects: false, scripts: { prestart: "rm -rf dist && yarn types:build", start: 'concurrently "yarn dev" "yarn types"', dev: "node ../../scripts/dev", "build:only": "node ../../scripts/build", build: "yarn build:only && yarn types:build", types: "tsc -w", "types:build": "tsc -p tsconfig.json", format: "prettier --write src/**/*.ts", test: "jest --maxWorkers=1", "test:watch": "jest --watch", "test:coverage": "jest --coverage", lint: "eslint -c ../../.eslintrc .", "lint:fix": "yarn lint --fix", prepare: "yarn build", size: "size-limit", analyze: "size-limit --why", docs: "rm -rf ./docs && typedoc && rm -f ./docs/README.md && mkdir ./docs/home &&mv ./docs/modules.md ./docs/home/content.md && node ../../scripts/docs-store && npx prettier --write './docs/**/*'" }, name: "@100mslive/hms-video-store", author: "100ms", dependencies: { eventemitter2: "^6.4.9", immer: "^9.0.6", "lodash.isequal": "^4.5.0", reselect: "4.0.0", "sdp-transform": "^2.14.1", "ua-parser-js": "^1.0.1", uuid: "^8.3.2", "webrtc-adapter": "^8.0.0", zustand: "3.5.7" }, devDependencies: { "@types/dom-screen-wake-lock": "^1.0.1", "@types/lodash.isequal": "^4.5.8", "@types/sdp-transform": "^2.4.4", "@types/ua-parser-js": "^0.7.36", "@types/uuid": "^8.3.0", "jest-canvas-mock": "^2.3.1", "jsdom-worker": "^0.3.0", tslib: "^2.2.0" }, description: "@100mslive Core SDK which abstracts the complexities of webRTC while providing a reactive store for data management with a unidirectional data flow", keywords: ["video", "webrtc", "conferencing", "100ms"], gitHead: "cc9d1fa2804d266e26226b250edc0fc7b76f0691" };
});
var er = ((n9) => (n9.Disconnected = "Disconnected", n9.Preview = "Preview", n9.Connecting = "Connecting", n9.Connected = "Connected", n9.Reconnecting = "Reconnecting", n9.Disconnecting = "Disconnecting", n9.Failed = "Failed", n9))(er || {});
var Gt = () => ({ room: { id: "", isConnected: false, name: "", peers: [], localPeer: "", roomState: "Disconnected", recording: { browser: { running: false }, server: { running: false }, hls: { running: false } }, rtmp: { running: false }, hls: { running: false, variants: [] }, sessionId: "" }, peers: {}, tracks: {}, playlist: { audio: { list: {}, selection: { id: "", hasPrevious: false, hasNext: false }, progress: 0, volume: 0, currentTime: 0, playbackRate: 1 }, video: { list: {}, selection: { id: "", hasPrevious: false, hasNext: false }, progress: 0, volume: 0, currentTime: 0, playbackRate: 1 } }, messages: { byID: {}, allIDs: [] }, speakers: {}, connectionQualities: {}, settings: { audioInputDeviceId: "", audioOutputDeviceId: "", videoInputDeviceId: "" }, devices: { audioInput: [], audioOutput: [], videoInput: [] }, roles: {}, roleChangeRequests: [], errors: [], sessionStore: {}, templateAppData: {}, polls: {}, whiteboards: {}, hideLocalPeer: false });
var Wt = () => ({ peerStats: {}, remoteTrackStats: {}, localTrackStats: {}, localPeer: { id: "" } });
var Da = ((e16) => (e16.CHAT = "chat", e16))(Da || {});
var jr = ((t11) => (t11.INFO = "info", t11.ERROR = "error", t11))(jr || {});
var tr = ((L) => (L.PEER_JOINED = "PEER_JOINED", L.PEER_LEFT = "PEER_LEFT", L.PEER_LIST = "PEER_LIST", L.NEW_MESSAGE = "NEW_MESSAGE", L.ERROR = "ERROR", L.RECONNECTING = "RECONNECTING", L.RECONNECTED = "RECONNECTED", L.TRACK_ADDED = "TRACK_ADDED", L.TRACK_REMOVED = "TRACK_REMOVED", L.TRACK_MUTED = "TRACK_MUTED", L.TRACK_UNMUTED = "TRACK_UNMUTED", L.TRACK_DEGRADED = "TRACK_DEGRADED", L.TRACK_RESTORED = "TRACK_RESTORED", L.TRACK_DESCRIPTION_CHANGED = "TRACK_DESCRIPTION_CHANGED", L.ROLE_UPDATED = "ROLE_UPDATED", L.CHANGE_TRACK_STATE_REQUEST = "CHANGE_TRACK_STATE_REQUEST", L.CHANGE_MULTI_TRACK_STATE_REQUEST = "CHANGE_MULTI_TRACK_STATE_REQUEST", L.ROOM_ENDED = "ROOM_ENDED", L.REMOVED_FROM_ROOM = "REMOVED_FROM_ROOM", L.DEVICE_CHANGE_UPDATE = "DEVICE_CHANGE_UPDATE", L.PLAYLIST_TRACK_ENDED = "PLAYLIST_TRACK_ENDED", L.NAME_UPDATED = "NAME_UPDATED", L.METADATA_UPDATED = "METADATA_UPDATED", L.POLL_CREATED = "POLL_CREATED", L.POLL_STARTED = "POLL_STARTED", L.POLL_STOPPED = "POLL_STOPPED", L.POLL_VOTES_UPDATED = "POLL_VOTES_UPDATED", L.POLLS_LIST = "POLLS_LIST", L.HAND_RAISE_CHANGED = "HAND_RAISE_CHANGED", L))(tr || {});
var Jr = ((t11) => (t11.audio = "audio", t11.video = "video", t11))(Jr || {});
function He(a12, e16) {
  let t11, i9;
  if (e16) for (let r9 of e16.auxiliaryTracks) {
    let s9 = a12[r9];
    _a(s9) && (i9 = tt(s9) ? s9 : i9, t11 = it(s9) ? s9 : t11);
  }
  return { video: t11, audio: i9 };
}
function tt(a12) {
  return a12 && a12.type === "audio";
}
function it(a12) {
  return a12 && a12.type === "video";
}
function _a(a12) {
  return a12 && a12.source === "screen";
}
function $t(a12) {
  return a12 && a12.source === "audioplaylist";
}
function rt(a12) {
  return a12 && a12.source === "videoplaylist";
}
function Qr(a12) {
  return a12 ? !!(a12 != null && a12.degraded) : false;
}
function Ue(a12, e16) {
  return e16 && a12.tracks[e16] ? a12.tracks[e16].enabled : false;
}
function zr(a12, e16) {
  return e16 && a12.tracks[e16] ? a12.tracks[e16].displayEnabled : false;
}
function st(a12) {
  var r9;
  let e16 = false, t11 = false, i9 = false;
  return (r9 = a12 == null ? void 0 : a12.publishParams) != null && r9.allowed && (e16 = a12.publishParams.allowed.includes("video"), t11 = a12.publishParams.allowed.includes("audio"), i9 = a12.publishParams.allowed.includes("screen")), { video: e16, audio: t11, screen: i9 };
}
var B = (a12) => a12.room;
var Na = (a12) => a12.errors;
var Dn = createSelector(Na, (a12) => a12.length === 0 ? null : a12.at(-1));
var _n = createSelector(B, (a12) => a12.id);
var G = (a12) => a12.peers;
var Kt = (a12) => a12.messages.byID;
var Yr = (a12) => a12.messages.allIDs;
var D = (a12) => a12.tracks;
var Xr = (a12) => a12.settings;
var ir = (a12) => a12.appData;
var Nn = (a12) => a12.devices;
var Oa = (a12) => a12.speakers;
var On = (a12) => a12.connectionQualities;
var ye = createSelector([B], (a12) => a12 && a12.isConnected);
var xn = createSelector([ye, B], (a12, e16) => a12 ? e16.peerCount !== void 0 ? e16.peerCount || 1 : e16.peers.length : Math.max(e16.peerCount !== void 0 ? e16.peerCount : e16.peers.length - 1, 0));
var xa = (a12) => a12.hideLocalPeer;
var oe = createSelector([B, G, xa], (a12, e16, t11) => t11 ? a12.peers.filter((i9) => a12.localPeer !== i9).map((i9) => e16[i9]) : a12.peers.map((i9) => e16[i9]));
var Ua = createSelector(D, (a12) => Object.values(a12));
var z = createSelector(B, G, (a12, e16) => e16[a12.localPeer]);
var ue = createSelector(B, (a12) => a12.localPeer);
var Un = createSelector(z, (a12) => a12 == null ? void 0 : a12.name);
var Bn = createSelector(z, (a12) => a12 == null ? void 0 : a12.roleName);
var Z = createSelector(z, (a12) => a12 == null ? void 0 : a12.audioTrack);
var q = createSelector(z, (a12) => a12 == null ? void 0 : a12.videoTrack);
var Ba = createSelector(z, (a12) => a12 == null ? void 0 : a12.auxiliaryTracks);
var Zr = createSelector([Z, q, Ba], (a12, e16, t11) => {
  let i9 = t11 ? [...t11] : [];
  return a12 && i9.unshift(a12), e16 && i9.unshift(e16), i9;
});
var Vn = createSelector(oe, (a12) => a12.filter((e16) => !e16.isLocal));
var Fn = createSelector(G, Oa, (a12, e16) => {
  let t11 = Object.entries(e16).sort((i9, r9) => {
    var n9, l5;
    let s9 = ((n9 = i9[1]) == null ? void 0 : n9.audioLevel) || 0;
    return (((l5 = r9[1]) == null ? void 0 : l5.audioLevel) || 0) > s9 ? 1 : -1;
  });
  if (t11.length > 0 && t11[0][1].audioLevel && t11[0][1].audioLevel > 0) {
    let i9 = t11[0][1].peerID;
    if (i9 in a12) return a12[i9];
  }
  return null;
});
var Gn = (a12) => {
  let e16 = z(a12);
  return Ue(a12, e16 == null ? void 0 : e16.audioTrack);
};
var rr = (a12) => {
  let e16 = z(a12);
  return Ue(a12, e16 == null ? void 0 : e16.videoTrack);
};
var es = (a12) => {
  let e16 = z(a12);
  return zr(a12, e16 == null ? void 0 : e16.videoTrack);
};
var sr = createSelector(z, D, (a12, e16) => {
  let { video: t11, audio: i9 } = He(e16, a12);
  return !!(t11 || i9);
});
var Va = createSelector(G, D, (a12, e16) => {
  let t11;
  for (let i9 in a12) {
    let r9 = a12[i9], { video: s9, audio: o14 } = He(e16, r9);
    if (s9) return r9;
    o14 && !t11 && (t11 = r9);
  }
  return t11;
});
var Wn = createSelector(Va, (a12) => !!a12);
var $n = createSelector(G, D, (a12, e16) => {
  for (let t11 in a12) {
    let i9 = a12[t11], { audio: r9, video: s9 } = He(e16, i9);
    if (!s9 && r9) return i9;
  }
});
var Kn = createSelector(G, D, (a12, e16) => {
  let t11 = [], i9 = [];
  for (let r9 in a12) {
    let s9 = a12[r9], { video: o14, audio: n9 } = He(e16, s9);
    o14 ? t11.push(s9) : n9 && i9.push(s9);
  }
  return t11.concat(i9);
});
var qn = createSelector(G, D, (a12, e16) => {
  for (let t11 in e16) {
    let i9 = e16[t11];
    if (rt(i9) && it(i9) && i9.peerId) return a12[i9.peerId];
  }
});
var jn = createSelector(G, D, (a12, e16) => {
  for (let t11 in e16) {
    let i9 = e16[t11];
    if ($t(i9) && i9.peerId) return a12[i9.peerId];
  }
});
var Jn = createSelector(Ua, (a12) => a12.filter(Qr));
var Qn = createSelector(Yr, (a12) => a12.length);
var zn = createSelector(Kt, (a12) => Object.values(a12).filter((e16) => !e16.read).length);
var at = createSelector(Yr, Kt, (a12, e16) => {
  let t11 = [];
  return a12.forEach((i9) => {
    t11.push(e16[i9]);
  }), t11;
});
var Fa = createSelector(at, (a12) => a12.filter((e16) => {
  var t11;
  return !e16.recipientPeer && !(e16.recipientRoles && ((t11 = e16.recipientRoles) == null ? void 0 : t11.length) > 0);
}));
var Yn = createSelector(Fa, (a12) => a12.filter((e16) => !e16.read).length);
var Y = createSelector([B], (a12) => a12 && a12.roomState);
var ts = createSelector(Y, (a12) => a12 === "Preview");
var Xn = createSelector(B, (a12) => a12.roomState !== "Disconnected");
var ne = (a12) => a12.roles;
var Zn = createSelector([ne], (a12) => Object.keys(a12));
var qt = createSelector([z, ne], (a12, e16) => a12 != null && a12.roleName ? e16[a12.roleName] : null);
var Ga = (a12) => {
  var e16;
  return (e16 = a12.preview) == null ? void 0 : e16.asRole;
};
var is = createSelector([Ga, ne], (a12, e16) => a12 ? e16[a12] : null);
var ec = createSelector([qt], (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.subscribeParams) != null && e16.subscribeToRoles ? a12.subscribeParams.subscribeToRoles.length > 0 : false;
});
var rs = createSelector(qt, (a12) => a12 == null ? void 0 : a12.permissions);
var tc = createSelector(B, (a12) => a12.recording);
var ic = createSelector(B, (a12) => a12.rtmp);
var rc = createSelector(B, (a12) => a12.hls);
var sc = createSelector(B, (a12) => a12.sessionId);
var ac = createSelector(B, (a12) => a12.startedAt);
var oc = createSelector(B, (a12) => !!a12.isLargeRoom);
var nc = createSelector(B, (a12) => !!a12.isEffectsEnabled);
var cc = createSelector(B, (a12) => a12.effectsKey);
var dc = (a12) => a12.templateAppData;
var lc = (a12) => a12.sessionMetadata;
var ss = (a12) => a12.polls;
var uc = (a12) => Object.values(a12.polls);
var pc = createSelector(oe, (a12) => a12.filter((e16) => e16.isHandRaised));
var Wa = (a12) => a12.whiteboards;
var hc = createSelector(Wa, (a12) => Object.values(a12)[0]);
var os = (a12 = "audio") => (e16) => e16.playlist[a12].list;
var ar = (a12 = "audio") => (e16) => e16.playlist[a12].selection;
var ns = (a12 = "audio") => (e16) => e16.playlist[a12].progress;
var cs = (a12 = "audio") => (e16) => e16.playlist[a12].currentTime;
var ds = (a12 = "audio") => (e16) => e16.playlist[a12].playbackRate;
var ls = (a12 = "audio") => (e16) => e16.playlist[a12].volume;
var us = (a12 = "audio") => createSelector(os(a12), (e16) => Object.values(e16));
var ps = (a12 = "audio") => createSelector(os(a12), ar(a12), (e16, t11) => {
  if (t11.id) return e16[t11.id];
});
var hs = { selection: ar("audio"), progress: ns("audio"), currentTime: cs("audio"), playbackRate: ds("audio"), volume: ls("audio"), list: us("audio"), selectedItem: ps("audio") };
var ms = { selection: ar("video"), progress: ns("video"), currentTime: cs("video"), playbackRate: ds("video"), volume: ls("video"), list: us("video"), selectedItem: ps("video") };
function R(a12) {
  return (e16) => (t11) => a12(t11, e16);
}
var Ss = ((l5) => (l5[l5.VERBOSE = 0] = "VERBOSE", l5[l5.DEBUG = 1] = "DEBUG", l5[l5.INFO = 2] = "INFO", l5[l5.WARN = 3] = "WARN", l5[l5.TIME = 4] = "TIME", l5[l5.TIMEEND = 5] = "TIMEEND", l5[l5.ERROR = 6] = "ERROR", l5[l5.NONE = 7] = "NONE", l5))(Ss || {});
var $a = typeof window != "undefined" && typeof window.expect != "undefined";
var d = class {
  static v(e16, ...t11) {
    this.log(0, e16, ...t11);
  }
  static d(e16, ...t11) {
    this.log(1, e16, ...t11);
  }
  static i(e16, ...t11) {
    this.log(2, e16, ...t11);
  }
  static w(e16, ...t11) {
    this.log(3, e16, ...t11);
  }
  static e(e16, ...t11) {
    this.log(6, e16, ...t11);
  }
  static time(e16) {
    this.log(4, "[HMSPerformanceTiming]", e16);
  }
  static timeEnd(e16) {
    this.log(5, "[HMSPerformanceTiming]", e16, e16);
  }
  static cleanup() {
    performance.clearMarks(), performance.clearMeasures();
  }
  static log(e16, t11, ...i9) {
    if (!(this.level.valueOf() > e16.valueOf())) switch (e16) {
      case 0: {
        console.log(t11, ...i9);
        break;
      }
      case 1: {
        console.debug(t11, ...i9);
        break;
      }
      case 2: {
        console.info(t11, ...i9);
        break;
      }
      case 3: {
        console.warn(t11, ...i9);
        break;
      }
      case 6: {
        console.error(t11, ...i9);
        break;
      }
      case 4: {
        performance.mark(i9[0]);
        break;
      }
      case 5: {
        let r9 = i9[0];
        try {
          let s9 = performance.measure(r9, r9);
          this.log(1, t11, r9, s9 == null ? void 0 : s9.duration), performance.clearMarks(r9), performance.clearMeasures(r9);
        } catch (s9) {
          this.log(1, t11, r9, s9);
        }
        break;
      }
    }
  }
};
d.level = $a ? 7 : 0;
var Be = class {
  constructor(e16) {
    this.tracks = new Array();
    this.nativeStream = e16, this.id = e16.id;
  }
  updateId(e16) {
    this.id = e16;
  }
};
var pe = new import_ua_parser_js.UAParser();
var _ = typeof window != "undefined";
var gs;
var Ce = typeof window == "undefined" && !((gs = pe.getBrowser().name) != null && gs.toLowerCase().includes("electron"));
var qa = () => !Ce;
var yc = qa();
var Le = () => pe.getDevice().type === "mobile";
var vs = () => typeof document != "undefined" && document.hidden;
var or = () => {
  var a12;
  return ((a12 = pe.getOS().name) == null ? void 0 : a12.toLowerCase()) === "ios";
};
var Ts;
var fs;
var Ms = ((fs = (Ts = pe.getBrowser()) == null ? void 0 : Ts.name) == null ? void 0 : fs.toLowerCase()) === "firefox";
var jt = (a12) => a12 ? `{
    trackId: ${a12.id};
    kind: ${a12.kind};
    enabled: ${a12.enabled};
    muted: ${a12.muted};
    readyState: ${a12.readyState};
  }` : "";
var ke = class {
  constructor(e16, t11, i9) {
    this.logIdentifier = "";
    this.stream = e16, this.nativeTrack = t11, this.source = i9;
  }
  get enabled() {
    return this.nativeTrack.enabled;
  }
  get trackId() {
    return this.firstTrackId || this.sdpTrackId || this.nativeTrack.id;
  }
  getMediaTrackSettings() {
    return this.nativeTrack.getSettings();
  }
  setEnabled(e16) {
    return c(this, null, function* () {
      this.nativeTrack.enabled = e16;
    });
  }
  setSdpTrackId(e16) {
    this.sdpTrackId = e16;
  }
  setFirstTrackId(e16) {
    this.firstTrackId = e16;
  }
  cleanup() {
    var e16;
    d.d("[HMSTrack]", "Stopping track", this.toString()), (e16 = this.nativeTrack) == null || e16.stop();
  }
  toString() {
    var e16;
    return `{
      streamId: ${this.stream.id};
      peerId: ${this.peerId};
      trackId: ${this.trackId};
      mid: ${((e16 = this.transceiver) == null ? void 0 : e16.mid) || "-"};
      logIdentifier: ${this.logIdentifier};
      source: ${this.source};
      enabled: ${this.enabled};
      nativeTrack: ${jt(this.nativeTrack)};
    }`;
  }
};
var Ee = class extends ke {
  constructor(t11, i9, r9) {
    super(t11, i9, r9);
    this.type = "audio";
    this.audioElement = null;
    if (i9.kind !== "audio") throw new Error("Expected 'track' kind = 'audio'");
  }
  getVolume() {
    return this.audioElement ? this.audioElement.volume * 100 : null;
  }
  setVolume(t11) {
    return c(this, null, function* () {
      if (t11 < 0 || t11 > 100) throw Error("Please pass a valid number between 0-100");
      yield this.subscribeToAudio(t11 === 0 ? false : this.enabled), this.audioElement && (this.audioElement.volume = t11 / 100);
    });
  }
  setAudioElement(t11) {
    d.d("[HMSAudioTrack]", this.logIdentifier, "adding audio element", `${this}`, t11), this.audioElement = t11;
  }
  getAudioElement() {
    return this.audioElement;
  }
  getOutputDevice() {
    return this.outputDevice;
  }
  cleanup() {
    super.cleanup(), this.audioElement && (this.audioElement.srcObject = null, this.audioElement.remove(), this.audioElement = null);
  }
  setOutputDevice(t11) {
    return c(this, null, function* () {
      var i9;
      if (!t11) {
        d.d("[HMSAudioTrack]", this.logIdentifier, "device is null", `${this}`);
        return;
      }
      if (!this.audioElement) {
        d.d("[HMSAudioTrack]", this.logIdentifier, "no audio element to set output", `${this}`), this.outputDevice = t11;
        return;
      }
      try {
        typeof this.audioElement.setSinkId == "function" && (Ms || (yield (i9 = this.audioElement) == null ? void 0 : i9.setSinkId(t11.deviceId)), this.outputDevice = t11);
      } catch (r9) {
        d.d("[HMSAudioTrack]", "error in setSinkId", r9);
      }
    });
  }
  subscribeToAudio(t11) {
    return c(this, null, function* () {
      this.stream instanceof he && (yield this.stream.setAudio(t11, this.trackId, this.logIdentifier));
    });
  }
};
var ys = ((i9) => (i9.CUSTOM = "CUSTOM", i9.LOCAL = "LOCAL", i9.HMS = "HMS", i9))(ys || {});
function ja() {
  if (_ && window) {
    let a12 = window.location.hostname;
    return a12 === "localhost" || a12 === "127.0.0.1" ? "LOCAL" : a12.includes("app.100ms.live") ? "HMS" : "CUSTOM";
  }
  return "CUSTOM";
}
var Ve = ja();
var M = { WebSocketConnectionErrors: { FAILED_TO_CONNECT: 1e3, WEBSOCKET_CONNECTION_LOST: 1003, ABNORMAL_CLOSE: 1006 }, APIErrors: { SERVER_ERRORS: 2e3, INIT_CONFIG_NOT_AVAILABLE: 2002, ENDPOINT_UNREACHABLE: 2003, INVALID_TOKEN_FORMAT: 2004 }, TracksErrors: { GENERIC_TRACK: 3e3, CANT_ACCESS_CAPTURE_DEVICE: 3001, DEVICE_NOT_AVAILABLE: 3002, DEVICE_IN_USE: 3003, DEVICE_LOST_MIDWAY: 3004, NOTHING_TO_RETURN: 3005, INVALID_VIDEO_SETTINGS: 3006, CODEC_CHANGE_NOT_PERMITTED: 3007, AUTOPLAY_ERROR: 3008, OVER_CONSTRAINED: 3009, NO_AUDIO_DETECTED: 3010, SYSTEM_DENIED_PERMISSION: 3011, CURRENT_TAB_NOT_SHARED: 3012, AUDIO_PLAYBACK_ERROR: 3013, SELECTED_DEVICE_MISSING: 3014 }, WebrtcErrors: { CREATE_OFFER_FAILED: 4001, CREATE_ANSWER_FAILED: 4002, SET_LOCAL_DESCRIPTION_FAILED: 4003, SET_REMOTE_DESCRIPTION_FAILED: 4004, ICE_FAILURE: 4005, ICE_DISCONNECTED: 4006, STATS_FAILED: 4007 }, WebsocketMethodErrors: { SERVER_ERRORS: 5e3, ALREADY_JOINED: 5001, CANNOT_JOIN_PREVIEW_IN_PROGRESS: 5002 }, GenericErrors: { NOT_CONNECTED: 6e3, SIGNALLING: 6001, UNKNOWN: 6002, NOT_READY: 6003, JSON_PARSING_FAILED: 6004, TRACK_METADATA_MISSING: 6005, RTC_TRACK_MISSING: 6006, PEER_METADATA_MISSING: 6007, INVALID_ROLE: 6008, PREVIEW_IN_PROGRESS: 6009, MISSING_MEDIADEVICES: 6010, MISSING_RTCPEERCONNECTION: 6011, LOCAL_STORAGE_ACCESS_DENIED: 6012, VALIDATION_FAILED: 6013 }, PlaylistErrors: { NO_ENTRY_TO_PLAY: 8001, NO_ENTRY_IS_PLAYING: 8002 } };
var f = class a extends Error {
  constructor(t11, i9, r9, s9, o14, n9 = false) {
    super(s9);
    this.code = t11;
    this.name = i9;
    this.message = s9;
    this.description = o14;
    this.isTerminal = n9;
    Object.setPrototypeOf(this, a.prototype), this.action = r9.toString();
  }
  toAnalyticsProperties() {
    return { error_name: this.name, error_code: this.code, error_message: this.message, error_description: this.description, action: this.action, is_terminal: this.isTerminal };
  }
  addNativeError(t11) {
    this.nativeError = t11;
  }
  toString() {
    var t11;
    return `{
      code: ${this.code};
      name: ${this.name};
      action: ${this.action};
      message: ${this.message};
      description: ${this.description};
      isTerminal: ${this.isTerminal};
      nativeError: ${(t11 = this.nativeError) == null ? void 0 : t11.message};
    }`;
  }
};
function nr(a12) {
  switch (a12) {
    case "join":
      return "JOIN";
    case "offer":
      return "PUBLISH";
    case "answer":
      return "SUBSCRIBE";
    case "track-update":
      return "TRACK";
    default:
      return "NONE";
  }
}
var Ja = ["join", "offer", "answer", "trickle", "on-error", "JOIN"];
var S = { WebSocketConnectionErrors: { FailedToConnect(a12, e16 = "") {
  return new f(M.WebSocketConnectionErrors.FAILED_TO_CONNECT, "WebsocketFailedToConnect", a12, `[WS]: ${e16}`, `[WS]: ${e16}`);
}, WebSocketConnectionLost(a12, e16 = "") {
  return new f(M.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, "WebSocketConnectionLost", a12, "Network connection lost", e16);
}, AbnormalClose(a12, e16 = "") {
  return new f(M.WebSocketConnectionErrors.ABNORMAL_CLOSE, "WebSocketAbnormalClose", a12, "Websocket closed abnormally", e16);
} }, APIErrors: { ServerErrors(a12, e16, t11 = "", i9 = true) {
  return new f(a12, "ServerErrors", e16, `[${e16}]: Server error ${t11}`, t11, i9);
}, EndpointUnreachable(a12, e16 = "") {
  return new f(M.APIErrors.ENDPOINT_UNREACHABLE, "EndpointUnreachable", a12, `Endpoint is not reachable - ${e16}`, e16);
}, InvalidTokenFormat(a12, e16 = "") {
  return new f(M.APIErrors.INVALID_TOKEN_FORMAT, "InvalidTokenFormat", a12, `Token is not in proper JWT format - ${e16}`, e16, true);
}, InitConfigNotAvailable(a12, e16 = "") {
  return new f(M.APIErrors.INIT_CONFIG_NOT_AVAILABLE, "InitError", a12, `[INIT]: ${e16}`, `[INIT]: ${e16}`);
} }, TracksErrors: { GenericTrack(a12, e16 = "") {
  return new f(M.TracksErrors.GENERIC_TRACK, "GenericTrack", a12, `[TRACK]: ${e16}`, `[TRACK]: ${e16}`);
}, CantAccessCaptureDevice(a12, e16, t11 = "") {
  return new f(M.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE, "CantAccessCaptureDevice", a12, `User denied permission to access capture device - ${e16}`, t11);
}, DeviceNotAvailable(a12, e16, t11 = "") {
  return new f(M.TracksErrors.DEVICE_NOT_AVAILABLE, "DeviceNotAvailable", a12, `[TRACK]: Capture device is no longer available - ${e16}`, t11);
}, DeviceInUse(a12, e16, t11 = "") {
  return new f(M.TracksErrors.DEVICE_IN_USE, "DeviceInUse", a12, `[TRACK]: Capture device is in use by another application - ${e16}`, t11);
}, DeviceLostMidway(a12, e16, t11 = "") {
  return new f(M.TracksErrors.DEVICE_LOST_MIDWAY, "DeviceLostMidway", a12, `Lost access to capture device midway - ${e16}`, t11);
}, NothingToReturn(a12, e16 = "", t11 = "There is no media to return. Please select either video or audio or both.") {
  return new f(M.TracksErrors.NOTHING_TO_RETURN, "NothingToReturn", a12, t11, e16);
}, InvalidVideoSettings(a12, e16 = "") {
  return new f(M.TracksErrors.INVALID_VIDEO_SETTINGS, "InvalidVideoSettings", a12, "Cannot enable simulcast when no video settings are provided", e16);
}, AutoplayBlocked(a12, e16 = "") {
  return new f(M.TracksErrors.AUTOPLAY_ERROR, "AutoplayBlocked", a12, "Autoplay blocked because the user didn't interact with the document first", e16);
}, CodecChangeNotPermitted(a12, e16 = "") {
  return new f(M.TracksErrors.CODEC_CHANGE_NOT_PERMITTED, "CodecChangeNotPermitted", a12, "Codec can't be changed mid call.", e16);
}, OverConstrained(a12, e16, t11 = "") {
  return new f(M.TracksErrors.OVER_CONSTRAINED, "OverConstrained", a12, `[TRACK]: Requested constraints cannot be satisfied with the device hardware - ${e16}`, t11);
}, NoAudioDetected(a12, e16 = "Please check the mic or use another audio input") {
  return new f(M.TracksErrors.NO_AUDIO_DETECTED, "NoAudioDetected", a12, "No audio input detected from microphone", e16);
}, SystemDeniedPermission(a12, e16, t11 = "") {
  return new f(M.TracksErrors.SYSTEM_DENIED_PERMISSION, "SystemDeniedPermission", a12, `Operating System denied permission to access capture device - ${e16}`, t11);
}, CurrentTabNotShared() {
  return new f(M.TracksErrors.CURRENT_TAB_NOT_SHARED, "CurrentTabNotShared", "TRACK", "The app requires you to share the current tab", "You must screen share the current tab in order to proceed");
}, AudioPlaybackError(a12) {
  return new f(M.TracksErrors.AUDIO_PLAYBACK_ERROR, "Audio playback error", "TRACK", a12, a12);
}, SelectedDeviceMissing(a12) {
  return new f(M.TracksErrors.SELECTED_DEVICE_MISSING, "SelectedDeviceMissing", "TRACK", `Could not detect selected ${a12} device`, `Please check connection to the ${a12} device`, false);
} }, WebrtcErrors: { CreateOfferFailed(a12, e16 = "") {
  return new f(M.WebrtcErrors.CREATE_OFFER_FAILED, "CreateOfferFailed", a12, `[${a12.toString()}]: Failed to create offer. `, e16);
}, CreateAnswerFailed(a12, e16 = "") {
  return new f(M.WebrtcErrors.CREATE_ANSWER_FAILED, "CreateAnswerFailed", a12, `[${a12.toString()}]: Failed to create answer. `, e16);
}, SetLocalDescriptionFailed(a12, e16 = "") {
  return new f(M.WebrtcErrors.SET_LOCAL_DESCRIPTION_FAILED, "SetLocalDescriptionFailed", a12, `[${a12.toString()}]: Failed to set offer. `, e16);
}, SetRemoteDescriptionFailed(a12, e16 = "") {
  return new f(M.WebrtcErrors.SET_REMOTE_DESCRIPTION_FAILED, "SetRemoteDescriptionFailed", a12, `[${a12.toString()}]: Failed to set answer. `, e16, true);
}, ICEFailure(a12, e16 = "", t11 = false) {
  return new f(M.WebrtcErrors.ICE_FAILURE, "ICEFailure", a12, `[${a12.toString()}]: Ice connection state FAILED`, e16, t11);
}, ICEDisconnected(a12, e16 = "") {
  return new f(M.WebrtcErrors.ICE_DISCONNECTED, "ICEDisconnected", a12, `[${a12.toString()}]: Ice connection state DISCONNECTED`, e16);
}, StatsFailed(a12, e16 = "") {
  return new f(M.WebrtcErrors.STATS_FAILED, "StatsFailed", a12, `Failed to WebRTC get stats - ${e16}`, e16);
} }, WebsocketMethodErrors: { ServerErrors(a12, e16, t11) {
  return new f(a12, "ServerErrors", e16, t11, t11, Ja.includes(e16));
}, AlreadyJoined(a12, e16 = "") {
  return new f(M.WebsocketMethodErrors.ALREADY_JOINED, "AlreadyJoined", a12, "[JOIN]: You have already joined this room.", e16);
}, CannotJoinPreviewInProgress(a12, e16 = "") {
  return new f(M.WebsocketMethodErrors.CANNOT_JOIN_PREVIEW_IN_PROGRESS, "CannotJoinPreviewInProgress", a12, "[JOIN]: Cannot join if preview is in progress", e16);
} }, GenericErrors: { NotConnected(a12, e16 = "") {
  return new f(M.GenericErrors.NOT_CONNECTED, "NotConnected", a12, "Client is not connected", e16);
}, Signalling(a12, e16) {
  return new f(M.GenericErrors.SIGNALLING, "Signalling", a12, `Unknown signalling error: ${a12.toString()} ${e16} `, e16);
}, Unknown(a12, e16) {
  return new f(M.GenericErrors.UNKNOWN, "Unknown", a12, `Unknown exception: ${e16}`, e16);
}, NotReady(a12, e16 = "") {
  return new f(M.GenericErrors.NOT_READY, "NotReady", a12, e16, e16);
}, JsonParsingFailed(a12, e16, t11 = "") {
  return new f(M.GenericErrors.JSON_PARSING_FAILED, "JsonParsingFailed", a12, `Failed to parse JSON message - ${e16}`, t11);
}, TrackMetadataMissing(a12, e16 = "") {
  return new f(M.GenericErrors.TRACK_METADATA_MISSING, "TrackMetadataMissing", a12, "Track Metadata Missing", e16);
}, RTCTrackMissing(a12, e16 = "") {
  return new f(M.GenericErrors.RTC_TRACK_MISSING, "RTCTrackMissing", a12, "RTC Track missing", e16);
}, PeerMetadataMissing(a12, e16 = "") {
  return new f(M.GenericErrors.PEER_METADATA_MISSING, "PeerMetadataMissing", a12, "Peer Metadata Missing", e16);
}, ValidationFailed(a12, e16) {
  return new f(M.GenericErrors.VALIDATION_FAILED, "ValidationFailed", "VALIDATION", a12, e16 ? JSON.stringify(e16) : "");
}, InvalidRole(a12, e16) {
  return new f(M.GenericErrors.INVALID_ROLE, "InvalidRole", a12, "Invalid role. Join with valid role", e16, true);
}, PreviewAlreadyInProgress(a12, e16 = "") {
  return new f(M.GenericErrors.PREVIEW_IN_PROGRESS, "PreviewAlreadyInProgress", a12, "[Preview]: Cannot join if preview is in progress", e16);
}, LocalStorageAccessDenied(a12 = "Access to localStorage has been denied") {
  return new f(M.GenericErrors.LOCAL_STORAGE_ACCESS_DENIED, "LocalStorageAccessDenied", "NONE", "LocalStorageAccessDenied", a12);
}, MissingMediaDevices() {
  return new f(M.GenericErrors.MISSING_MEDIADEVICES, "MissingMediaDevices", "JOIN", "navigator.mediaDevices is undefined. 100ms SDK won't work on this website as WebRTC is not supported on HTTP endpoints(missing navigator.mediaDevices). Please ensure you're using the SDK either on localhost or a valid HTTPS endpoint.", "", true);
}, MissingRTCPeerConnection() {
  return new f(M.GenericErrors.MISSING_RTCPEERCONNECTION, "MissingRTCPeerConnection", "JOIN", "RTCPeerConnection which is a core requirement for WebRTC call was not found, this could be due to an unsupported browser or browser extensions blocking WebRTC", "", true);
} }, MediaPluginErrors: { PlatformNotSupported(a12, e16 = "") {
  return new f(7001, "PlatformNotSupported", a12, "Check HMS Docs to see the list of supported platforms", e16);
}, InitFailed(a12, e16 = "") {
  return new f(7002, "InitFailed", a12, "Plugin init failed", e16);
}, ProcessingFailed(a12, e16 = "") {
  return new f(7003, "ProcessingFailed", a12, "Plugin processing failed", e16);
}, AddAlreadyInProgress(a12, e16 = "") {
  return new f(7004, "AddAlreadyInProgress", a12, "Plugin add already in progress", e16);
}, DeviceNotSupported(a12, e16 = "") {
  return new f(7005, "DeviceNotSupported", a12, "Check HMS Docs to see the list of supported devices", e16);
} }, PlaylistErrors: { NoEntryToPlay(a12, e16) {
  return new f(M.PlaylistErrors.NO_ENTRY_TO_PLAY, "NoEntryToPlay", a12, "Reached end of playlist", e16);
}, NoEntryPlaying(a12, e16) {
  return new f(M.PlaylistErrors.NO_ENTRY_IS_PLAYING, "NoEntryIsPlaying", a12, "No entry is playing at this time", e16);
} } };
var cr = class {
  constructor() {
    this.valuesMap = /* @__PURE__ */ new Map();
  }
  getItem(e16) {
    return this.valuesMap.has(e16) ? String(this.valuesMap.get(e16)) : null;
  }
  setItem(e16, t11) {
    this.valuesMap.set(e16, t11);
  }
  removeItem(e16) {
    this.valuesMap.delete(e16);
  }
  clear() {
    this.valuesMap.clear();
  }
  key(e16) {
    if (arguments.length === 0) throw new TypeError("Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.");
    return Array.from(this.valuesMap.keys())[e16];
  }
  get length() {
    return this.valuesMap.size;
  }
};
var ks = () => {
  try {
    _ && !localStorage && (window.localStorage = new cr());
  } catch (a12) {
    d.e("Error initialising localStorage", S.GenericErrors.LocalStorageAccessDenied());
  }
};
var ce = class {
  constructor(e16) {
    this.key = e16;
    this.storage = null;
  }
  getStorage() {
    try {
      return _ && !this.storage && (ks(), this.storage = window.localStorage), this.storage;
    } catch (e16) {
      return d.e("Error initialising localStorage", S.GenericErrors.LocalStorageAccessDenied()), null;
    }
  }
  get() {
    var i9;
    let e16 = (i9 = this.getStorage()) == null ? void 0 : i9.getItem(this.key);
    return e16 ? JSON.parse(e16) : void 0;
  }
  set(e16) {
    var i9;
    let t11 = JSON.stringify(e16);
    (i9 = this.getStorage()) == null || i9.setItem(this.key, t11);
  }
  clear() {
    var e16;
    (e16 = this.getStorage()) == null || e16.removeItem(this.key);
  }
};
var Es = () => {
  let a12, e16 = new ce("hms-analytics-deviceId"), t11 = e16.get();
  return t11 ? a12 = t11 : (a12 = v4_default(), e16.set(a12)), a12;
};
var Ps = "[VALIDATIONS]";
function ie(a12) {
  return a12 != null;
}
var dr = () => {
  if (!ie(RTCPeerConnection)) {
    let a12 = S.GenericErrors.MissingRTCPeerConnection();
    throw d.e(Ps, a12), a12;
  }
};
var lr = () => {
  if (!ie(navigator.mediaDevices)) {
    let a12 = S.GenericErrors.MissingMediaDevices();
    throw d.e(Ps, a12), a12;
  }
};
var bs = ur().version;
function ot(a12 = "prod", e16) {
  let t11 = "web", i9 = Ve !== "LOCAL" && a12 === "prod" ? "prod" : "debug";
  if (Ce) return As({ os: "web_nodejs", os_version: process.version, sdk: t11, sdk_version: bs, env: i9, domain: Ve, is_prebuilt: !!(e16 != null && e16.isPrebuilt), framework: "node", framework_version: process.version, framework_sdk_version: e16 == null ? void 0 : e16.sdkVersion });
  let r9 = pe.getOS(), s9 = pe.getDevice(), o14 = pe.getBrowser(), n9 = pr(`web_${r9.name}`), l5 = r9.version || "", u3 = pr(`${o14.name}_${o14.version}`), p2 = u3;
  return s9.type && (p2 = `${pr(`${s9.vendor}_${s9.type}`)}/${u3}`), As({ os: n9, os_version: l5, sdk: t11, sdk_version: bs, device_model: p2, env: i9, domain: Ve, is_prebuilt: !!(e16 != null && e16.isPrebuilt), framework: e16 == null ? void 0 : e16.type, framework_version: e16 == null ? void 0 : e16.version, framework_sdk_version: e16 == null ? void 0 : e16.sdkVersion });
}
function pr(a12) {
  return a12.replace(/ /g, "_");
}
var As = (a12, e16 = ",") => Object.keys(a12).filter((t11) => ie(a12[t11])).map((t11) => `${t11}:${a12[t11]}`).join(e16);
var I = class {
  constructor({ name: e16, level: t11, properties: i9, includesPII: r9, timestamp: s9 }) {
    this.metadata = { peer: {}, userAgent: ot() };
    this.name = e16, this.level = t11, this.includesPII = r9 || false, this.properties = i9 || {}, this.timestamp = s9 || (/* @__PURE__ */ new Date()).getTime(), this.event_id = v4_default(), this.device_id = Es();
  }
  toSignalParams() {
    return { name: this.name, info: v(m({}, this.properties), { timestamp: this.timestamp, domain: Ve }), timestamp: (/* @__PURE__ */ new Date()).getTime() };
  }
};
var y = class {
  static connect(e16, t11, i9 = /* @__PURE__ */ new Date(), r9 = /* @__PURE__ */ new Date(), s9) {
    let o14 = this.eventNameFor("connect", e16 === void 0), n9 = e16 ? 2 : 1, l5 = this.getPropertiesWithError(v(m({}, t11), { [this.KEY_REQUESTED_AT]: i9 == null ? void 0 : i9.getTime(), [this.KEY_RESPONDED_AT]: r9 == null ? void 0 : r9.getTime(), endpoint: s9 }), e16);
    return new I({ name: o14, level: n9, properties: l5 });
  }
  static disconnect(e16, t11) {
    let i9 = "disconnected", r9 = e16 ? 2 : 1, s9 = this.getPropertiesWithError(t11, e16);
    return new I({ name: i9, level: r9, properties: s9 });
  }
  static preview(i9) {
    var r9 = i9, { error: e16 } = r9, t11 = Zi(r9, ["error"]);
    let s9 = this.eventNameFor("preview", e16 === void 0), o14 = e16 ? 2 : 1, n9 = this.getPropertiesWithError(t11, e16);
    return new I({ name: s9, level: o14, properties: n9 });
  }
  static join(i9) {
    var r9 = i9, { error: e16 } = r9, t11 = Zi(r9, ["error"]);
    let s9 = this.eventNameFor("join", e16 === void 0), o14 = e16 ? 2 : 1, n9 = this.getPropertiesWithError(v(m({}, t11), { is_preview_called: !!t11.is_preview_called }), e16);
    return new I({ name: s9, level: o14, properties: n9 });
  }
  static publish({ devices: e16, settings: t11, error: i9 }) {
    let r9 = this.eventNameFor("publish", i9 === void 0), s9 = i9 ? 2 : 1, o14 = this.getPropertiesWithError({ devices: e16, audio: t11 == null ? void 0 : t11.audio, video: t11 == null ? void 0 : t11.video }, i9);
    return new I({ name: r9, level: s9, properties: o14 });
  }
  static hlsPlayerError(e16) {
    return new I({ name: "hlsPlayerError", level: 2, properties: this.getErrorProperties(e16) });
  }
  static subscribeFail(e16) {
    let t11 = this.eventNameFor("subscribe", false), i9 = 2, r9 = this.getErrorProperties(e16);
    return new I({ name: t11, level: i9, properties: r9 });
  }
  static leave() {
    return new I({ name: "leave", level: 1 });
  }
  static autoplayError() {
    return new I({ name: "autoplayError", level: 2 });
  }
  static audioPlaybackError(e16) {
    return new I({ name: "audioPlaybackError", level: 2, properties: this.getErrorProperties(e16) });
  }
  static deviceChange({ isUserSelection: e16, selection: t11, type: i9, devices: r9, error: s9 }) {
    let o14 = this.eventNameFor(s9 ? "publish" : `device.${i9}`, s9 === void 0), n9 = s9 ? 2 : 1, l5 = this.getPropertiesWithError({ selection: t11, devices: r9, isUserSelection: e16 }, s9);
    return new I({ name: o14, level: n9, properties: l5 });
  }
  static performance(e16) {
    let t11 = "perf.stats", i9 = 1, r9 = e16.toAnalyticsProperties();
    return new I({ name: t11, level: i9, properties: r9 });
  }
  static rtcStats(e16) {
    let t11 = "rtc.stats", i9 = 1, r9 = e16.toAnalyticsProperties();
    return new I({ name: t11, level: i9, properties: r9 });
  }
  static rtcStatsFailed(e16) {
    let t11 = "rtc.stats.failed", i9 = 2;
    return new I({ name: t11, level: i9, properties: this.getErrorProperties(e16) });
  }
  static degradationStats(e16, t11) {
    let i9 = "video.degradation.stats", r9 = 1, s9 = { degradedAt: e16.degradedAt, trackId: e16.trackId };
    if (!t11 && e16.degradedAt instanceof Date) {
      let o14 = /* @__PURE__ */ new Date(), n9 = o14.valueOf() - e16.degradedAt.valueOf();
      s9 = v(m({}, s9), { duration: n9, restoredAt: o14 });
    }
    return new I({ name: i9, level: r9, properties: s9 });
  }
  static audioDetectionFail(e16, t11) {
    let i9 = this.getPropertiesWithError({ device: t11 }, e16), r9 = 2, s9 = "audiopresence.failed";
    return new I({ name: s9, level: r9, properties: i9 });
  }
  static previewNetworkQuality(e16) {
    return new I({ name: "perf.networkquality.preview", level: e16.error ? 2 : 1, properties: e16 });
  }
  static publishStats(e16) {
    return new I({ name: "publisher.stats", level: 1, properties: e16 });
  }
  static subscribeStats(e16) {
    return new I({ name: "subscriber.stats", level: 1, properties: e16 });
  }
  static getKrispUsage(e16) {
    return new I({ name: "krisp.usage", level: 1, properties: { duration: e16 } });
  }
  static eventNameFor(e16, t11) {
    return `${e16}.${t11 ? "success" : "failed"}`;
  }
  static getPropertiesWithError(e16, t11) {
    let i9 = this.getErrorProperties(t11);
    return e16 = m(m({}, i9), e16), e16;
  }
  static getErrorProperties(e16) {
    return e16 ? e16 instanceof f ? e16.toAnalyticsProperties() : { error_name: e16.name, error_message: e16.message, error_description: e16.cause } : {};
  }
};
y.KEY_REQUESTED_AT = "requested_at", y.KEY_RESPONDED_AT = "responded_at";
var hr = class {
  constructor() {
    this.storage = new ce("hms-device-selection");
    this.remember = false;
    this.TAG = "[HMSDeviceStorage]";
  }
  setDevices(e16) {
    this.devices = e16;
  }
  rememberDevices(e16) {
    this.remember = e16;
  }
  updateSelection(e16, { deviceId: t11, groupId: i9 }) {
    if (!this.devices || !this.remember) return;
    let r9 = this.devices[e16].find((o14) => this.isSame({ deviceId: t11, groupId: i9 }, o14));
    if (!r9) {
      d.w(this.TAG, `Could not find device with deviceId: ${t11}, groupId: ${i9}`);
      return;
    }
    let s9 = this.storage.get() || {};
    s9[e16] = r9, this.storage.set(s9);
  }
  getSelection() {
    if (this.remember) return this.storage.get();
  }
  cleanup() {
    this.remember = false, this.devices = void 0;
  }
  isSame(e16, t11) {
    return e16.deviceId === t11.deviceId && (e16.groupId === t11.groupId || !e16.groupId);
  }
};
var j = new hr();
var mr = ((t11) => (t11.TRANSFORM = "TRANSFORM", t11.ANALYZE = "ANALYZE", t11))(mr || {});
var Sr = ((t11) => (t11.PLATFORM_NOT_SUPPORTED = "PLATFORM_NOT_SUPPORTED", t11.DEVICE_NOT_SUPPORTED = "DEVICE_NOT_SUPPORTED", t11))(Sr || {});
var re = class {
  static failure(e16, t11) {
    let i9 = "mediaPlugin.failed", r9 = 2, s9 = m({ plugin_name: e16 }, t11.toAnalyticsProperties());
    return new I({ name: i9, level: r9, properties: s9 });
  }
  static audioPluginFailure(e16, t11, i9) {
    let r9 = "mediaPlugin.failed", s9 = 2, o14 = m({ plugin_name: e16, sampleRate: t11 }, i9.toAnalyticsProperties());
    return new I({ name: r9, level: s9, properties: o14 });
  }
  static audioPluginStats({ pluginName: e16, duration: t11, loadTime: i9, sampleRate: r9 }) {
    let s9 = "mediaPlugin.stats", o14 = 1, n9 = { plugin_name: e16, duration: t11, load_time: i9, sampleRate: r9 };
    return new I({ name: s9, level: o14, properties: n9 });
  }
  static added(e16, t11) {
    let i9 = "mediaPlugin.added", r9 = 1, s9 = { plugin_name: e16, added_at: t11 };
    return new I({ name: i9, level: r9, properties: s9 });
  }
  static stats({ pluginName: e16, duration: t11, loadTime: i9, avgPreProcessingTime: r9, avgProcessingTime: s9, inputFrameRate: o14, pluginFrameRate: n9 }) {
    let l5 = "mediaPlugin.stats", u3 = 1, p2 = { plugin_name: e16, duration: t11, load_time: i9, avg_preprocessing_time: r9, avg_processing_time: s9, input_frame_rate: o14, plugin_frame_rate: n9 };
    return new I({ name: l5, level: u3, properties: p2 });
  }
};
var Jt = class {
  constructor(e16) {
    this.eventBus = e16;
    this.TAG = "[AudioPluginsAnalytics]";
    this.initTime = {}, this.addedTimestamps = {}, this.pluginAdded = {}, this.pluginSampleRate = {};
  }
  added(e16, t11) {
    this.pluginAdded[e16] = true, this.addedTimestamps[e16] = Date.now(), this.initTime[e16] = 0, this.pluginSampleRate[e16] = t11, this.eventBus.analytics.publish(re.added(e16, this.addedTimestamps[e16]));
  }
  removed(e16) {
    if (this.pluginAdded[e16]) {
      let t11 = { pluginName: e16, duration: Math.floor((Date.now() - this.addedTimestamps[e16]) / 1e3), loadTime: this.initTime[e16], sampleRate: this.pluginSampleRate[e16] };
      this.eventBus.analytics.publish(re.audioPluginStats(t11)), this.clean(e16);
    }
  }
  failure(e16, t11) {
    this.pluginAdded[e16] && (this.eventBus.analytics.publish(re.audioPluginFailure(e16, this.pluginSampleRate[e16], t11)), this.clean(e16));
  }
  initWithTime(e16, t11) {
    return c(this, null, function* () {
      if (this.initTime[e16]) {
        d.i(this.TAG, `Plugin Already loaded ${e16}, time it took: ${this.initTime[e16]}`);
        return;
      }
      let i9;
      try {
        i9 = yield this.timeInMs(t11), d.i(this.TAG, `Time taken for Plugin ${e16} initialization : ${i9}`);
      } catch (r9) {
        let s9 = S.MediaPluginErrors.InitFailed("AUDIO_PLUGINS", `failed during initialization of plugin${r9.message || r9}`);
        throw d.e(this.TAG, s9), this.failure(e16, s9), s9;
      }
      i9 && (this.initTime[e16] = i9);
    });
  }
  timeInMs(e16) {
    return c(this, null, function* () {
      let t11 = Date.now();
      return yield e16(), Math.floor(Date.now() - t11);
    });
  }
  clean(e16) {
    delete this.addedTimestamps[e16], delete this.initTime[e16], delete this.pluginAdded[e16], delete this.pluginSampleRate[e16];
  }
};
var Xa = 48e3;
var Za = () => navigator.userAgent.indexOf("Firefox") !== -1;
var nt = class {
  constructor(e16, t11) {
    this.eventBus = t11;
    this.TAG = "[AudioPluginsManager]";
    this.pluginAddInProgress = false;
    this.hmsTrack = e16, this.pluginsMap = /* @__PURE__ */ new Map(), this.analytics = new Jt(t11), this.createAudioContext();
  }
  getPlugins() {
    return Array.from(this.pluginsMap.keys());
  }
  addPlugin(e16) {
    return c(this, null, function* () {
      var i9;
      let t11 = (i9 = e16.getName) == null ? void 0 : i9.call(e16);
      if (!t11) {
        d.w("no name provided by the plugin");
        return;
      }
      if (this.pluginAddInProgress) {
        let r9 = S.MediaPluginErrors.AddAlreadyInProgress("AUDIO_PLUGINS", "Add Plugin is already in Progress");
        throw this.analytics.added(t11, this.audioContext.sampleRate), this.analytics.failure(t11, r9), d.w("can't add another plugin when previous add is in progress"), r9;
      }
      this.pluginAddInProgress = true;
      try {
        yield this.addPluginInternal(e16);
      } finally {
        this.pluginAddInProgress = false;
      }
    });
  }
  addPluginInternal(e16) {
    return c(this, null, function* () {
      var i9, r9;
      let t11 = (i9 = e16.getName) == null ? void 0 : i9.call(e16);
      if (this.pluginsMap.get(t11)) {
        d.w(this.TAG, `plugin - ${t11} already added.`);
        return;
      }
      yield this.validateAndThrow(t11, e16), (r9 = e16.setEventBus) == null || r9.call(e16, this.eventBus);
      try {
        this.pluginsMap.size === 0 ? yield this.initAudioNodes() : this.prevAudioNode && this.prevAudioNode.disconnect(), this.analytics.added(t11, this.audioContext.sampleRate), yield this.analytics.initWithTime(t11, () => c(this, null, function* () {
          return e16.init();
        })), this.pluginsMap.set(t11, e16), yield this.processPlugin(e16), yield this.connectToDestination();
      } catch (s9) {
        throw d.e(this.TAG, "failed to add plugin", s9), s9;
      }
    });
  }
  validatePlugin(e16) {
    return e16.checkSupport(this.audioContext);
  }
  validateAndThrow(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.validatePlugin(t11);
      if (i9.isSupported) d.i(this.TAG, `plugin is supported,- ${t11.getName()}`);
      else if (this.analytics.added(e16, this.audioContext.sampleRate), i9.errType === "PLATFORM_NOT_SUPPORTED") {
        let r9 = S.MediaPluginErrors.PlatformNotSupported("AUDIO_PLUGINS", "platform not supported, see docs");
        throw this.analytics.failure(e16, r9), yield this.cleanup(), r9;
      } else if (i9.errType === "DEVICE_NOT_SUPPORTED") {
        let r9 = S.MediaPluginErrors.DeviceNotSupported("AUDIO_PLUGINS", "audio device not supported, see docs");
        throw this.analytics.failure(e16, r9), yield this.cleanup(), r9;
      }
    });
  }
  removePlugin(e16) {
    return c(this, null, function* () {
      yield this.removePluginInternal(e16), this.pluginsMap.size === 0 ? (yield this.cleanup(), d.i(this.TAG, "No plugins left, stopping plugins loop"), yield this.hmsTrack.setProcessedTrack(void 0)) : yield this.reprocessPlugins();
    });
  }
  cleanup() {
    return c(this, null, function* () {
      var e16, t11, i9;
      for (let r9 of this.pluginsMap.values()) yield this.removePluginInternal(r9);
      yield this.hmsTrack.setProcessedTrack(void 0), (e16 = this.sourceNode) == null || e16.disconnect(), (t11 = this.prevAudioNode) == null || t11.disconnect(), (i9 = this.outputTrack) == null || i9.stop(), this.sourceNode = void 0, this.destinationNode = void 0, this.prevAudioNode = void 0, this.outputTrack = void 0;
    });
  }
  closeContext() {
    return c(this, null, function* () {
      var e16;
      (e16 = this.audioContext) == null || e16.close(), this.audioContext = void 0;
    });
  }
  reprocessPlugins() {
    return c(this, null, function* () {
      if (this.pluginsMap.size === 0 || !this.sourceNode) return;
      let e16 = Array.from(this.pluginsMap.values());
      yield this.cleanup(), yield this.initAudioNodes();
      for (let t11 of e16) yield this.addPlugin(t11);
    });
  }
  initAudioNodes() {
    return c(this, null, function* () {
      if (this.audioContext) {
        if (!this.sourceNode) {
          let e16 = new MediaStream([this.hmsTrack.nativeTrack]);
          this.sourceNode = this.audioContext.createMediaStreamSource(e16);
        }
        if (!this.destinationNode) {
          this.destinationNode = this.audioContext.createMediaStreamDestination(), this.outputTrack = this.destinationNode.stream.getAudioTracks()[0];
          try {
            yield this.hmsTrack.setProcessedTrack(this.outputTrack);
          } catch (e16) {
            throw d.e(this.TAG, "error in setting processed track", e16), e16;
          }
        }
      }
    });
  }
  processPlugin(e16) {
    return c(this, null, function* () {
      try {
        let t11 = yield e16.processAudioTrack(this.audioContext, this.prevAudioNode || this.sourceNode);
        this.prevAudioNode && this.prevAudioNode.connect(t11), this.prevAudioNode = t11;
      } catch (t11) {
        let i9 = e16.getName();
        d.e(this.TAG, `error in processing plugin ${i9}`, t11), yield this.removePluginInternal(e16);
      }
    });
  }
  connectToDestination() {
    return c(this, null, function* () {
      try {
        this.prevAudioNode && this.destinationNode && this.prevAudioNode.context === this.destinationNode.context && this.prevAudioNode.connect(this.destinationNode);
      } catch (e16) {
        d.e(this.TAG, "error in connecting to destination node", e16);
      }
    });
  }
  removePluginInternal(e16) {
    return c(this, null, function* () {
      var i9;
      let t11 = (i9 = e16.getName) == null ? void 0 : i9.call(e16);
      if (!this.pluginsMap.get(t11)) {
        d.w(this.TAG, `plugin - ${t11} not found to remove.`);
        return;
      }
      d.i(this.TAG, `removing plugin ${t11}`), this.pluginsMap.delete(t11), e16.stop(), this.analytics.removed(t11);
    });
  }
  createAudioContext() {
    this.audioContext || (Za() ? this.audioContext = new AudioContext() : this.audioContext = new AudioContext({ sampleRate: Xa }));
  }
};
function eo(a12, e16) {
  let t11 = a12.toLowerCase();
  return t11.includes("device not found") ? S.TracksErrors.DeviceNotAvailable("TRACK", e16, a12) : t11.includes("permission denied") ? S.TracksErrors.CantAccessCaptureDevice("TRACK", e16, a12) : S.TracksErrors.GenericTrack("TRACK", a12);
}
function to(a12, e16 = "") {
  if (adapter_core_default.browserDetails.browser === "chrome" && a12.name === "NotAllowedError" && a12.message.includes("denied by system")) return S.TracksErrors.SystemDeniedPermission("TRACK", e16, a12.message);
  if (adapter_core_default.browserDetails.browser === "firefox" && a12.name === "NotFoundError") {
    let i9 = S.TracksErrors.SystemDeniedPermission("TRACK", e16, a12.message);
    return i9.description = `Capture device is either blocked at Operating System level or not available - ${e16}`, i9;
  }
  switch (a12.name) {
    case "OverconstrainedError":
      return S.TracksErrors.OverConstrained("TRACK", e16, a12.constraint);
    case "NotAllowedError":
      return S.TracksErrors.CantAccessCaptureDevice("TRACK", e16, a12.message);
    case "NotFoundError":
      return S.TracksErrors.DeviceNotAvailable("TRACK", e16, a12.message);
    case "NotReadableError":
      return S.TracksErrors.DeviceInUse("TRACK", e16, a12.message);
    case "TypeError":
      return S.TracksErrors.NothingToReturn("TRACK", a12.message);
    default:
      return eo(a12.message, e16);
  }
}
function Fe(a12, e16) {
  let t11 = to(a12, e16);
  return t11.addNativeError(a12), t11;
}
function Is(a12) {
  return c(this, null, function* () {
    try {
      return (yield navigator.mediaDevices.getUserMedia({ audio: a12 ? a12.toConstraints() : false })).getAudioTracks()[0];
    } catch (e16) {
      throw Fe(e16, "audio");
    }
  });
}
function Hs(a12) {
  return c(this, null, function* () {
    try {
      return (yield navigator.mediaDevices.getUserMedia({ video: a12 ? a12.toConstraints() : false })).getVideoTracks()[0];
    } catch (e16) {
      throw Fe(e16, "video");
    }
  });
}
function de(a12) {
  return "canvas" in a12 || a12.label === "MediaStreamAudioDestinationNode" || a12.label === "";
}
var Pe = { audioContext: null, getAudioContext() {
  return this.audioContext || (this.audioContext = new AudioContext()), this.audioContext;
}, resumeContext() {
  return c(this, null, function* () {
    try {
      return yield this.getAudioContext().resume();
    } catch (a12) {
      d.e("AudioContext", a12);
    }
  });
} };
var be = class {
  constructor(e16 = 1 / 0) {
    this.capacity = e16;
    this.storage = [];
  }
  size() {
    return this.storage.length;
  }
  toList() {
    return this.storage.slice(0);
  }
  enqueue(e16) {
    this.size() === this.capacity && this.dequeue(), this.storage.push(e16);
  }
  dequeue() {
    return this.storage.shift();
  }
  aggregate(e16) {
    return e16(this.storage);
  }
};
var Cs = `(function workerSetup() {
  function ticker() {
    self.postMessage('tick');
  }
  self.onmessage = function (event) {
    const [data, time] = event.data;
    switch (data) {
      case 'start':
        setTimeout(ticker, time);
        break;
      default:
        break;
    }
  };
})()`;
function J(a12) {
  if (a12 < 0) throw Error("`ms` should be a positive integer");
  return new Promise((e16) => {
    setTimeout(e16, a12);
  });
}
function Ae(a12) {
  if (a12 < 0) throw Error("`ms` should be a positive integer");
  if (typeof Worker == "undefined") return J(a12);
  let e16 = new Worker(URL.createObjectURL(new Blob([Cs], { type: "application/javascript" })));
  return e16.postMessage(["start", a12]), new Promise((t11) => {
    e16.onmessage = (i9) => {
      i9.data === "tick" && (t11(), e16.terminate());
    };
  });
}
function Ls() {
  if (typeof Worker == "undefined") return { sleep: (e16) => J(e16) };
  let a12 = new Worker(URL.createObjectURL(new Blob([Cs], { type: "application/javascript" })));
  return { sleep: (e16) => (a12.postMessage(["start", e16]), new Promise((t11) => {
    a12.onmessage = (i9) => {
      i9.data === "tick" && t11();
    };
  })) };
}
function Qt(a12, e16 = 300) {
  let t11;
  return function(...i9) {
    clearTimeout(t11), t11 = void 0;
    let r9 = this;
    t11 = setTimeout(() => {
      a12.apply(r9, i9);
    }, e16);
  };
}
var ro = 35;
var so = 5;
var zt = class {
  constructor(e16, t11, i9) {
    this.track = e16;
    this.audioLevelEvent = t11;
    this.silenceEvent = i9;
    this.TAG = "[TrackAudioLevelMonitor]";
    this.audioLevel = 0;
    this.isMonitored = false;
    this.interval = 100;
    this.historyInterval = 700;
    this.history = new be(this.historyInterval / this.interval);
    this.detectSilence = () => c(this, null, function* () {
      let i10 = 0;
      for (; this.isMonitored; ) {
        if (this.track.enabled) if (this.isSilentThisInstant()) {
          if (i10++, i10 > 50) {
            this.silenceEvent.publish({ track: this.track });
            break;
          }
        } else break;
        yield J(20);
      }
    });
    try {
      let r9 = new MediaStream([this.track.nativeTrack]);
      this.analyserNode = this.createAnalyserNodeForStream(r9);
    } catch (r9) {
      d.w(this.TAG, "Unable to initialize AudioContext", r9);
    }
  }
  start() {
    this.stop(), this.isMonitored = true, d.d(this.TAG, "Starting track Monitor", `${this.track}`), this.loop().then(() => d.d(this.TAG, "Stopping track Monitor", `${this.track}`));
  }
  stop() {
    if (!this.analyserNode) {
      d.d(this.TAG, "AudioContext not initialized");
      return;
    }
    this.sendAudioLevel(0), this.isMonitored = false;
  }
  loop() {
    return c(this, null, function* () {
      for (; this.isMonitored; ) this.sendAudioLevel(this.getMaxAudioLevelOverPeriod()), yield J(this.interval);
    });
  }
  sendAudioLevel(e16 = 0) {
    if (e16 = e16 > ro ? e16 : 0, Math.abs(this.audioLevel - e16) > so) {
      this.audioLevel = e16;
      let i9 = { track: this.track, audioLevel: this.audioLevel };
      this.audioLevelEvent.publish(i9);
    }
  }
  getMaxAudioLevelOverPeriod() {
    if (!this.analyserNode) {
      d.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e16 = this.calculateAudioLevel();
    return e16 !== void 0 && this.history.enqueue(e16), this.history.aggregate((t11) => Math.max(...t11));
  }
  calculateAudioLevel() {
    if (!this.analyserNode) {
      d.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e16 = new Uint8Array(this.analyserNode.fftSize);
    this.analyserNode.getByteTimeDomainData(e16);
    let t11 = 9e-3, i9 = t11;
    for (let o14 of e16) i9 = Math.max(i9, (o14 - 128) / 128);
    let r9 = (Math.log(t11) - Math.log(i9)) / Math.log(t11);
    return Math.ceil(Math.min(Math.max(r9 * 100, 0), 100));
  }
  isSilentThisInstant() {
    if (!this.analyserNode) {
      d.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e16 = new Uint8Array(this.analyserNode.fftSize);
    return this.analyserNode.getByteTimeDomainData(e16), !e16.some((t11) => t11 !== 128 && t11 !== 0);
  }
  createAnalyserNodeForStream(e16) {
    let t11 = Pe.getAudioContext(), i9 = t11.createAnalyser();
    return t11.createMediaStreamSource(e16).connect(i9), i9;
  }
};
var gr = ((t11) => (t11.SIP = "sip", t11.REGULAR = "regular", t11))(gr || {});
var ws = ((n9) => (n9.NONE = "none", n9.INITIALISED = "initialised", n9.STARTED = "started", n9.PAUSED = "paused", n9.RESUMED = "resumed", n9.STOPPED = "stopped", n9.FAILED = "failed", n9))(ws || {});
var Ds = ((t11) => (t11.DVR = "dvr", t11.NO_DVR = "no-dvr", t11))(Ds || {});
var _s = ((i9) => (i9.REGULAR = "regular", i9.SCREEN = "screen", i9.COMPOSITE = "composite", i9))(_s || {});
var we = { f: "high", h: "medium", q: "low" };
var Ns = ((i9) => (i9.videoInput = "videoInput", i9.audioInput = "audioInput", i9.audioOutput = "audioOutput", i9))(Ns || {});
var se = class {
  constructor() {
    this._volume = 1;
    this._codec = "opus";
    this._maxBitrate = 32;
    this._deviceId = "default";
    this._advanced = [{ googEchoCancellation: { exact: true } }, { googExperimentalEchoCancellation: { exact: true } }, { autoGainControl: { exact: true } }, { noiseSuppression: { exact: true } }, { googHighpassFilter: { exact: true } }, { googAudioMirroring: { exact: true } }];
  }
  volume(e16) {
    if (!(0 <= e16 && e16 <= 1)) throw Error("volume can only be in range [0.0, 1.0]");
    return this._volume = e16, this;
  }
  codec(e16) {
    return this._codec = e16, this;
  }
  maxBitrate(e16) {
    if (e16 && e16 <= 0) throw Error("maxBitrate should be >= 1");
    return this._maxBitrate = e16, this;
  }
  deviceId(e16) {
    return this._deviceId = e16, this;
  }
  advanced(e16) {
    return this._advanced = e16, this;
  }
  build() {
    return new De(this._volume, this._codec, this._maxBitrate, this._deviceId, this._advanced);
  }
};
var De = class {
  constructor(e16, t11, i9, r9, s9) {
    this.volume = e16, this.codec = t11, this.maxBitrate = i9, this.deviceId = r9, this.advanced = s9;
  }
  toConstraints() {
    return { deviceId: this.deviceId, advanced: this.advanced };
  }
  toAnalyticsProperties() {
    return { audio_bitrate: this.maxBitrate, audio_codec: this.codec };
  }
};
var ee = class {
  constructor() {
    this._width = 320;
    this._height = 180;
    this._codec = "vp8";
    this._maxFramerate = 30;
    this._maxBitrate = 150;
    this._advanced = [];
  }
  setWidth(e16) {
    return this._width = e16, this;
  }
  setHeight(e16) {
    return this._height = e16, this;
  }
  codec(e16) {
    return this._codec = e16, this;
  }
  maxFramerate(e16) {
    if (e16 && e16 <= 0) throw Error("maxFramerate should be >= 1");
    return this._maxFramerate = e16, this;
  }
  maxBitrate(e16, t11 = true) {
    if (typeof e16 == "number" && e16 <= 0) throw Error("maxBitrate should be >= 1");
    return this._maxBitrate = e16, !this._maxBitrate && t11 && (this._maxBitrate = 15e4), this;
  }
  deviceId(e16) {
    return this._deviceId = e16, this;
  }
  advanced(e16) {
    return this._advanced = e16, this;
  }
  facingMode(e16) {
    return this._facingMode = e16, this;
  }
  build() {
    return new _e(this._width, this._height, this._codec, this._maxFramerate, this._deviceId, this._advanced, this._maxBitrate, this._facingMode);
  }
};
var _e = class {
  constructor(e16, t11, i9, r9, s9, o14, n9, l5) {
    this.width = e16, this.height = t11, this.codec = i9, this.maxFramerate = r9, this.maxBitrate = n9, this.deviceId = s9, this.advanced = o14, this.facingMode = l5;
  }
  toConstraints(e16) {
    let t11 = "ideal";
    e16 && (t11 = "max");
    let i9 = this.improviseConstraintsAspect();
    return { width: { [t11]: i9.width }, height: { [t11]: i9.height }, frameRate: this.maxFramerate, deviceId: this.deviceId, facingMode: this.facingMode };
  }
  toAnalyticsProperties() {
    return { width: this.width, height: this.height, video_bitrate: this.maxBitrate, framerate: this.maxFramerate, video_codec: this.codec, facingMode: this.facingMode };
  }
  improviseConstraintsAspect() {
    return Le() && this.height && this.width && this.height > this.width ? { width: this.height, height: this.width } : { width: this.width, height: this.height };
  }
};
var ct = class {
  constructor() {
    this._video = new ee().build();
    this._audio = new se().build();
    this._screen = new ee().build();
    this._simulcast = false;
  }
  video(e16) {
    return this._video = e16, this;
  }
  audio(e16) {
    return this._audio = e16, this;
  }
  screen(e16) {
    return this._screen = e16, this;
  }
  simulcast(e16) {
    return this._simulcast = e16, this;
  }
  build() {
    if (this._audio === null && this._video === null) throw S.TracksErrors.NothingToReturn("TRACK");
    if (this._video === null && this._simulcast) throw S.TracksErrors.InvalidVideoSettings("TRACK", "Cannot enable simulcast when no video settings are provided");
    return new Ge(this._video, this._audio, this._simulcast, this._screen || void 0);
  }
};
var Ge = class {
  constructor(e16, t11, i9, r9 = null) {
    this.video = e16, this.audio = t11, this.simulcast = i9, this.screen = r9;
  }
  toAnalyticsProperties() {
    let e16 = { audio_enabled: this.audio !== null, video_enabled: this.video !== null };
    return this.audio && (e16 = m(m({}, this.audio.toAnalyticsProperties()), e16)), this.video && (e16 = m(m({}, this.video.toAnalyticsProperties()), e16)), e16;
  }
};
function xs(a12, e16) {
  return function(i9) {
    return !(0, import_lodash.default)(a12[i9], e16[i9]);
  };
}
var ae = class a2 extends Ee {
  constructor(t11, i9, r9, s9, o14 = new se().build()) {
    super(t11, i9, r9);
    this.eventBus = s9;
    this.TAG = "[HMSLocalAudioTrack]";
    this.isPublished = false;
    this.handleVisibilityChange = () => c(this, null, function* () {
      document.visibilityState === "visible" && (yield this.replaceTrackWith(this.settings));
    });
    this.replaceSenderTrack = () => c(this, null, function* () {
      if (!this.transceiver || this.transceiver.direction !== "sendonly") {
        d.d(this.TAG, `transceiver for ${this.trackId} not available or not connected yet`);
        return;
      }
      yield this.transceiver.sender.replaceTrack(this.processedTrack || this.nativeTrack);
    });
    this.handleSettingsChange = (t12) => c(this, null, function* () {
      let i10 = this.stream, r10 = xs(t12, this.settings);
      r10("maxBitrate") && t12.maxBitrate && (yield i10.setMaxBitrateAndFramerate(this)), r10("advanced") && (yield this.replaceTrackWith(t12));
    });
    this.handleDeviceChange = (t12, i10 = false) => c(this, null, function* () {
      if (xs(t12, this.settings)("deviceId")) {
        this.manuallySelectedDeviceId = i10 ? this.manuallySelectedDeviceId : t12.deviceId, d.d(this.TAG, "device change", "manual selection:", this.manuallySelectedDeviceId, "new device:", t12.deviceId), yield this.replaceTrackWith(t12);
        let s10 = this.nativeTrack.getSettings().groupId;
        !i10 && t12.deviceId && (j.updateSelection("audioInput", { deviceId: t12.deviceId, groupId: s10 }), this.eventBus.deviceChange.publish({ isUserSelection: true, type: "audioInput", selection: { deviceId: t12.deviceId, groupId: s10 } }));
      }
    });
    t11.tracks.push(this), this.settings = o14, o14.deviceId !== i9.getSettings().deviceId && !de(i9) && (this.settings = this.buildNewSettings({ deviceId: i9.getSettings().deviceId })), this.pluginsManager = new nt(this, s9), this.setFirstTrackId(i9.id), or() && _ && document.addEventListener("visibilitychange", this.handleVisibilityChange);
  }
  getManuallySelectedDeviceId() {
    return this.manuallySelectedDeviceId;
  }
  resetManuallySelectedDeviceId() {
    this.manuallySelectedDeviceId = void 0;
  }
  replaceTrackWith(t11) {
    return c(this, null, function* () {
      let i9 = this.nativeTrack;
      i9 == null || i9.stop();
      let r9 = !!this.audioLevelMonitor;
      try {
        let s9 = yield Is(t11);
        s9.enabled = this.enabled, d.d(this.TAG, "replaceTrack, Previous track stopped", i9, "newTrack", s9), yield this.stream.replaceStreamTrack(i9, s9), this.nativeTrack = s9, yield this.replaceSenderTrack(), r9 && this.initAudioLevelMonitor();
      } catch (s9) {
        throw this.isPublished && this.eventBus.analytics.publish(y.publish({ error: s9 })), s9;
      }
      try {
        yield this.pluginsManager.reprocessPlugins();
      } catch (s9) {
        this.eventBus.audioPluginFailed.publish(s9);
      }
    });
  }
  setEnabled(t11) {
    return c(this, null, function* () {
      t11 !== this.enabled && (t11 && de(this.nativeTrack) && (yield this.replaceTrackWith(this.settings)), yield K(a2.prototype, this, "setEnabled").call(this, t11), t11 && (this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId })), this.eventBus.localAudioEnabled.publish({ enabled: t11, track: this }));
    });
  }
  isPublishedTrackId(t11) {
    return this.publishedTrackId === t11;
  }
  setSettings(t11, i9 = false) {
    return c(this, null, function* () {
      let r9 = this.buildNewSettings(t11);
      if (de(this.nativeTrack)) {
        this.settings = r9;
        return;
      }
      yield this.handleDeviceChange(r9, i9), yield this.handleSettingsChange(r9), this.settings = r9;
    });
  }
  getPlugins() {
    return this.pluginsManager.getPlugins();
  }
  addPlugin(t11) {
    return c(this, null, function* () {
      return this.pluginsManager.addPlugin(t11);
    });
  }
  removePlugin(t11) {
    return c(this, null, function* () {
      return this.pluginsManager.removePlugin(t11);
    });
  }
  validatePlugin(t11) {
    return this.pluginsManager.validatePlugin(t11);
  }
  setProcessedTrack(t11) {
    return c(this, null, function* () {
      t11 ? t11 !== this.processedTrack && (this.processedTrack = t11) : this.processedTrack = void 0, yield this.replaceSenderTrack();
    });
  }
  initAudioLevelMonitor() {
    this.audioLevelMonitor && this.destroyAudioLevelMonitor(), d.d(this.TAG, "Monitor Audio Level for", this, this.getMediaTrackSettings().deviceId), this.audioLevelMonitor = new zt(this, this.eventBus.trackAudioLevelUpdate, this.eventBus.localAudioSilence), this.audioLevelMonitor.start(), this.audioLevelMonitor.detectSilence();
  }
  destroyAudioLevelMonitor() {
    var t11;
    (t11 = this.audioLevelMonitor) == null || t11.stop(), this.audioLevelMonitor = void 0;
  }
  cleanup() {
    return c(this, null, function* () {
      var t11;
      K(a2.prototype, this, "cleanup").call(this), yield this.pluginsManager.cleanup(), yield this.pluginsManager.closeContext(), this.transceiver = void 0, (t11 = this.processedTrack) == null || t11.stop(), this.isPublished = false, this.destroyAudioLevelMonitor(), or() && _ && document.removeEventListener("visibilitychange", this.handleVisibilityChange);
    });
  }
  getTrackIDBeingSent() {
    return this.processedTrack ? this.processedTrack.id : this.nativeTrack.id;
  }
  getTrackBeingSent() {
    return this.processedTrack || this.nativeTrack;
  }
  buildNewSettings(t11) {
    let { volume: i9, codec: r9, maxBitrate: s9, deviceId: o14, advanced: n9 } = m(m({}, this.settings), t11);
    return new De(i9, r9, s9, o14, n9);
  }
};
var te = class a3 extends Ee {
  setEnabled(e16) {
    return c(this, null, function* () {
      e16 !== this.enabled && (yield K(a3.prototype, this, "setEnabled").call(this, e16), yield this.subscribeToAudio(e16));
    });
  }
};
var We = class extends ke {
  constructor(t11, i9, r9) {
    super(t11, i9, r9);
    this.type = "video";
    this.sinkCount = 0;
    if (i9.kind !== "video") throw new Error("Expected 'track' kind = 'video'");
  }
  setVideoHandler(t11) {
    this.videoHandler = t11;
  }
  hasSinks() {
    return this.sinkCount > 0;
  }
  getSinks() {
    return this.videoHandler.getVideoElements() || [];
  }
  attach(t11) {
    this.videoHandler.addVideoElement(t11);
  }
  detach(t11) {
    this.videoHandler.removeVideoElement(t11);
  }
  addSink(t11) {
    this.addSinkInternal(t11, this.nativeTrack);
  }
  removeSink(t11) {
    t11.srcObject !== null && (t11.srcObject = null, this.reduceSinkCount());
  }
  cleanup() {
    super.cleanup(), this.videoHandler.cleanup();
  }
  addSinkInternal(t11, i9) {
    let r9 = t11.srcObject;
    if (r9 !== null && r9 instanceof MediaStream) {
      let s9 = r9.getVideoTracks()[0];
      if ((s9 == null ? void 0 : s9.id) === i9.id) {
        if (!s9.muted && s9.readyState === "live") return;
        this.reduceSinkCount();
      } else this.reduceSinkCount();
    }
    t11.srcObject = new MediaStream([i9]), this.sinkCount++;
  }
  reduceSinkCount() {
    this.sinkCount > 0 && this.sinkCount--;
  }
};
var dt = { none: -1, low: 0, medium: 1, high: 2 };
var oo = 0.5;
var Us = (a12, e16) => {
  let t11 = "high", i9 = e16.width > e16.height ? "width" : "height", r9 = [...a12].sort((o14, n9) => dt[o14.layer] - dt[n9.layer]), s9 = e16[i9] * ((window == null ? void 0 : window.devicePixelRatio) || 1);
  for (let o14 = 0; o14 < r9.length; o14++) {
    let { resolution: n9, layer: l5 } = r9[o14], u3 = n9[i9];
    if (s9 <= u3) {
      t11 = l5;
      break;
    } else {
      let p2 = r9[o14 + 1], h2 = p2 ? p2.resolution[i9] : Number.POSITIVE_INFINITY;
      if ((s9 - u3) / (h2 - u3) < oo) {
        t11 = l5;
        break;
      }
    }
  }
  return t11;
};
var Tr = class {
  constructor() {
    this.TAG = "[HMSIntersectionObserverWrapper]";
    this.listeners = /* @__PURE__ */ new WeakMap();
    this.observe = (e16, t11) => {
      var i9;
      this.createObserver(), this.unobserve(e16), (i9 = this.intersectionObserver) == null || i9.observe(e16), this.listeners.set(e16, t11);
    };
    this.unobserve = (e16) => {
      var t11;
      (t11 = this.intersectionObserver) == null || t11.unobserve(e16), this.listeners.delete(e16);
    };
    this.createObserver = () => {
      this.isSupported() && !this.intersectionObserver && (this.intersectionObserver = new IntersectionObserver(this.handleIntersection));
    };
    this.handleIntersection = (e16) => {
      var t11;
      for (let i9 of e16) (t11 = this.listeners.get(i9.target)) == null || t11(i9);
    };
    this.createObserver();
  }
  isSupported() {
    let e16 = _ && typeof window.IntersectionObserver != "undefined";
    return e16 || d.w(this.TAG, "IntersectionObserver is not supported, fallback will be used instead"), e16;
  }
};
var Bs = new Tr();
var fr = class {
  constructor() {
    this.TAG = "[HMSResizeObserverWrapper]";
    this.listeners = /* @__PURE__ */ new WeakMap();
    this.observe = (e16, t11, i9 = { box: "border-box" }) => {
      var r9;
      this.createObserver(), this.unobserve(e16), (r9 = this.resizeObserver) == null || r9.observe(e16, i9), this.listeners.set(e16, t11);
    };
    this.unobserve = (e16) => {
      var t11;
      (t11 = this.resizeObserver) == null || t11.unobserve(e16), this.listeners.delete(e16);
    };
    this.createObserver = () => {
      this.isSupported() && !this.resizeObserver && (this.resizeObserver = new ResizeObserver(Qt(this.handleResize, 300)));
    };
    this.handleResize = (e16) => {
      var t11;
      for (let i9 of e16) (t11 = this.listeners.get(i9.target)) == null || t11(i9);
    };
    this.createObserver();
  }
  isSupported() {
    let e16 = _ && typeof window.ResizeObserver != "undefined";
    return e16 || d.w(this.TAG, "Resize Observer is not supported"), e16;
  }
};
var Vs = new fr();
var $e = class {
  constructor(e16) {
    this.track = e16;
    this.TAG = "[VideoElementManager]";
    this.videoElements = /* @__PURE__ */ new Set();
    this.entries = /* @__PURE__ */ new WeakMap();
    this.handleIntersection = (e17) => c(this, null, function* () {
      let t11 = getComputedStyle(e17.target).visibility === "visible";
      this.track.enabled && (e17.isIntersecting && t11 || !document.contains(e17.target)) ? (d.d(this.TAG, "add sink intersection", `${this.track}`, this.id), this.entries.set(e17.target, e17.boundingClientRect), yield this.selectMaxLayer(), yield this.track.addSink(e17.target)) : (d.d(this.TAG, "remove sink intersection", `${this.track}`, this.id), yield this.track.removeSink(e17.target));
    });
    this.handleResize = (e17) => c(this, null, function* () {
      !this.track.enabled || !(this.track instanceof O) || (this.entries.set(e17.target, e17.contentRect), yield this.selectMaxLayer());
    });
    this.cleanup = () => {
      this.videoElements.forEach((e17) => {
        var t11, i9;
        e17.srcObject = null, (t11 = this.resizeObserver) == null || t11.unobserve(e17), (i9 = this.intersectionObserver) == null || i9.unobserve(e17);
      }), this.videoElements.clear(), this.resizeObserver = void 0, this.intersectionObserver = void 0;
    };
    this.init(), this.id = v4_default();
  }
  updateSinks(e16 = false) {
    for (let t11 of this.videoElements) this.track.enabled ? this.track.addSink(t11, e16) : this.track.removeSink(t11, e16);
  }
  addVideoElement(e16) {
    return c(this, null, function* () {
      var t11;
      this.videoElements.has(e16) || (this.init(), d.d(this.TAG, `Adding video element for ${this.track}`, this.id), this.videoElements.add(e16), this.videoElements.size >= 10 && d.w(this.TAG, `${this.track}`, `the track is added to ${this.videoElements.size} video elements, while this may be intentional, it's likely that there is a bug leading to unnecessary creation of video elements in the UI`), (t11 = this.intersectionObserver) != null && t11.isSupported() ? this.intersectionObserver.observe(e16, this.handleIntersection) : _ && (this.isElementInViewport(e16) ? this.track.addSink(e16) : this.track.removeSink(e16)), this.resizeObserver ? this.resizeObserver.observe(e16, this.handleResize) : this.track instanceof O && (yield this.track.setPreferredLayer(this.track.getPreferredLayer())));
    });
  }
  removeVideoElement(e16) {
    var t11, i9;
    this.track.removeSink(e16), this.videoElements.delete(e16), this.entries.delete(e16), (t11 = this.resizeObserver) == null || t11.unobserve(e16), (i9 = this.intersectionObserver) == null || i9.unobserve(e16), d.d(this.TAG, `Removing video element for ${this.track}`);
  }
  getVideoElements() {
    return Array.from(this.videoElements);
  }
  init() {
    _ && (this.resizeObserver = Vs, this.intersectionObserver = Bs);
  }
  isElementInViewport(e16) {
    let t11 = e16.offsetTop, i9 = e16.offsetLeft, r9 = e16.offsetWidth, s9 = e16.offsetHeight, { hidden: o14 } = e16, { opacity: n9, display: l5 } = getComputedStyle(e16);
    for (; e16.offsetParent; ) e16 = e16.offsetParent, t11 += e16.offsetTop, i9 += e16.offsetLeft;
    return t11 < window.pageYOffset + window.innerHeight && i9 < window.pageXOffset + window.innerWidth && t11 + s9 > window.pageYOffset && i9 + r9 > window.pageXOffset && !o14 && (n9 !== "" ? parseFloat(n9) > 0 : true) && l5 !== "none";
  }
  selectMaxLayer() {
    return c(this, null, function* () {
      if (!(this.track instanceof O) || this.videoElements.size === 0) return;
      let e16;
      for (let t11 of this.videoElements) {
        let i9 = this.entries.get(t11);
        if (!i9) continue;
        let { width: r9, height: s9 } = i9;
        if (r9 === 0 || s9 === 0) continue;
        let o14 = Us(this.track.getSimulcastDefinitions(), { width: r9, height: s9 });
        e16 ? e16 = dt[o14] > dt[e16] ? o14 : e16 : e16 = o14;
      }
      e16 && (d.d(this.TAG, `selecting max layer ${e16} for the track`, `${this.track}`), yield this.track.setPreferredLayer(e16));
    });
  }
};
var vr = ((t11) => (t11.TRANSFORM = "TRANSFORM", t11.ANALYZE = "ANALYZE", t11))(vr || {});
var Mr = ((t11) => (t11["2D"] = "2d", t11.WEBGL = "webgl", t11.WEBGL2 = "webgl2", t11))(Mr || {});
var lt = class {
  constructor() {
    this.total = 0;
    this.count = 0;
  }
  add(e16) {
    this.count++, this.total += e16;
  }
  getAvg() {
    return Math.floor(this.total / this.count);
  }
  reset() {
    this.total = 0, this.count = 0;
  }
};
var Ke = class {
  constructor(e16) {
    this.eventBus = e16;
    this.TAG = "[VideoPluginsAnalytics]";
    this.initTime = {}, this.preProcessingAvgs = new lt(), this.addedTimestamps = {}, this.processingAvgs = {}, this.pluginAdded = {}, this.pluginInputFrameRate = {}, this.pluginFrameRate = {};
  }
  added(e16, t11, i9) {
    this.pluginAdded[e16] = true, this.addedTimestamps[e16] = Date.now(), this.initTime[e16] = 0, this.processingAvgs[e16] = new lt(), t11 && (this.pluginInputFrameRate[e16] = t11, this.pluginFrameRate[e16] = i9 || t11), this.eventBus.analytics.publish(re.added(e16, this.addedTimestamps[e16]));
  }
  removed(e16) {
    var t11;
    if (this.pluginAdded[e16]) {
      let i9 = { pluginName: e16, duration: Math.floor((Date.now() - this.addedTimestamps[e16]) / 1e3), loadTime: this.initTime[e16], avgPreProcessingTime: this.preProcessingAvgs.getAvg(), avgProcessingTime: (t11 = this.processingAvgs[e16]) == null ? void 0 : t11.getAvg(), inputFrameRate: this.pluginInputFrameRate[e16], pluginFrameRate: this.pluginFrameRate[e16] };
      this.eventBus.analytics.publish(re.stats(i9)), this.clean(e16);
    }
  }
  failure(e16, t11) {
    this.pluginAdded[e16] && (this.eventBus.analytics.publish(re.failure(e16, t11)), this.clean(e16));
  }
  initWithTime(e16, t11) {
    return c(this, null, function* () {
      if (this.initTime[e16]) {
        d.i(this.TAG, `Plugin Already loaded ${e16}, time it took: ${this.initTime[e16]}`);
        return;
      }
      let i9;
      try {
        i9 = yield this.timeInMs(t11), d.i(this.TAG, `Time taken for Plugin ${e16} initialization : ${i9}`);
      } catch (r9) {
        let s9 = S.MediaPluginErrors.InitFailed("VIDEO_PLUGINS", `failed during initialization of plugin${r9.message || r9}`);
        throw d.e(this.TAG, s9), this.failure(e16, s9), s9;
      }
      i9 && (this.initTime[e16] = i9);
    });
  }
  preProcessWithTime(e16) {
    return c(this, null, function* () {
      let t11 = yield this.timeInMs(e16);
      this.preProcessingAvgs.add(t11);
    });
  }
  processWithTime(e16, t11) {
    return c(this, null, function* () {
      var r9;
      let i9;
      try {
        i9 = yield this.timeInMs(t11);
      } catch (s9) {
        let o14 = S.MediaPluginErrors.ProcessingFailed("VIDEO_PLUGINS", `Failed during processing of plugin${s9.message || s9}`);
        throw d.e(this.TAG, o14), this.failure(e16, o14), o14;
      }
      i9 && ((r9 = this.processingAvgs[e16]) == null || r9.add(i9));
    });
  }
  timeInMs(e16) {
    return c(this, null, function* () {
      let t11 = Date.now();
      return yield e16(), Math.floor(Date.now() - t11);
    });
  }
  clean(e16) {
    delete this.addedTimestamps[e16], delete this.initTime[e16], delete this.processingAvgs[e16], delete this.pluginAdded[e16], delete this.pluginInputFrameRate[e16], delete this.pluginFrameRate[e16];
  }
};
var Fs = 24;
var co = 320;
var lo = 240;
var ut = class {
  constructor(e16, t11) {
    this.TAG = "[VideoPluginsManager]";
    this.pluginsLoopRunning = false;
    this.pluginsLoopState = "paused";
    this.pluginAddInProgress = false;
    this.reusableWorker = Ls();
    this.hmsTrack = e16, this.pluginsMap = /* @__PURE__ */ new Map(), this.pluginNumFramesToSkip = {}, this.pluginNumFramesSkipped = {}, this.analytics = new Ke(t11), this.canvases = new Array();
  }
  getPlugins() {
    return Array.from(this.pluginsMap.keys());
  }
  addPlugin(e16, t11) {
    return c(this, null, function* () {
      var i9;
      if (this.pluginAddInProgress) {
        let r9 = (i9 = e16.getName) == null ? void 0 : i9.call(e16);
        if (!r9 || r9 === "") {
          d.w("no name provided by the plugin");
          return;
        }
        let s9 = S.MediaPluginErrors.AddAlreadyInProgress("VIDEO_PLUGINS", "Add Plugin is already in Progress");
        throw this.analytics.failure(r9, s9), d.w("can't add another plugin when previous add is in progress"), s9;
      }
      this.pluginAddInProgress = true;
      try {
        yield this.addPluginInternal(e16, t11);
      } finally {
        this.pluginAddInProgress = false;
      }
    });
  }
  addPluginInternal(e16, t11) {
    return c(this, null, function* () {
      var o14, n9;
      let i9 = (o14 = e16.getName) == null ? void 0 : o14.call(e16);
      if (!i9 || i9 === "") {
        d.w("no name provided by the plugin");
        return;
      }
      if (this.pluginsMap.has(i9)) {
        d.w(this.TAG, `plugin - ${e16.getName()} already added.`);
        return;
      }
      let r9 = this.hmsTrack.getMediaTrackSettings().frameRate || Fs, s9 = 0;
      t11 && t11 > 0 ? (d.i(this.TAG, `adding plugin ${e16.getName()} with framerate ${t11}`), t11 < r9 && (s9 = Math.ceil(r9 / t11) - 1), this.analytics.added(i9, r9, t11)) : (d.i(this.TAG, `adding plugin ${e16.getName()}`), this.analytics.added(i9, r9)), d.i(this.TAG, "numFrames to skip processing", s9), this.pluginNumFramesToSkip[i9] = s9, this.pluginNumFramesSkipped[i9] = s9, this.validateAndThrow(i9, e16);
      try {
        if (yield this.analytics.initWithTime(i9, () => c(this, null, function* () {
          return yield e16.init();
        })), this.pluginsMap.set(i9, e16), this.pluginsMap.size + 1 > this.canvases.length) for (let l5 = this.canvases.length; l5 <= this.pluginsMap.size; l5++) this.canvases[l5] = document.createElement("canvas");
        yield this.startPluginsLoop((n9 = e16.getContextType) == null ? void 0 : n9.call(e16));
      } catch (l5) {
        throw d.e(this.TAG, "failed to add plugin", l5), yield this.removePlugin(e16), l5;
      }
    });
  }
  validatePlugin(e16) {
    return e16.checkSupport();
  }
  validateAndThrow(e16, t11) {
    let i9 = this.validatePlugin(t11);
    if (i9.isSupported) d.i(this.TAG, `plugin is supported,- ${t11.getName()}`);
    else {
      let r9;
      switch (i9.errType) {
        case "PLATFORM_NOT_SUPPORTED":
          throw r9 = S.MediaPluginErrors.PlatformNotSupported("VIDEO_PLUGINS", "platform not supported, see docs"), this.analytics.failure(e16, r9), r9;
        case "DEVICE_NOT_SUPPORTED":
          throw r9 = S.MediaPluginErrors.DeviceNotSupported("VIDEO_PLUGINS", "video device not supported, see docs"), this.analytics.failure(e16, r9), r9;
      }
    }
  }
  removePlugin(e16) {
    return c(this, null, function* () {
      let t11 = e16.getName();
      if (!this.pluginsMap.get(t11)) {
        d.w(this.TAG, `plugin - ${t11} not found to remove.`);
        return;
      }
      d.i(this.TAG, `removing plugin ${t11}`), this.removePluginEntry(t11), this.pluginsMap.size === 0 && (d.i(this.TAG, "No plugins left, stopping plugins loop"), yield this.stopPluginsLoop()), e16.stop(), this.analytics.removed(t11);
    });
  }
  removePluginEntry(e16) {
    this.pluginsMap.delete(e16), this.pluginNumFramesToSkip[e16] && delete this.pluginNumFramesToSkip[e16], this.pluginNumFramesSkipped[e16] && delete this.pluginNumFramesSkipped[e16];
  }
  waitForRestart() {
    return c(this, null, function* () {
      if (!(!this.pluginsLoopRunning || this.pluginsLoopState === "running")) for (; this.pluginsLoopState === "paused"; ) yield Ae(100);
    });
  }
  cleanup() {
    return c(this, null, function* () {
      var e16;
      for (let t11 of this.pluginsMap.values()) yield this.removePlugin(t11);
      (e16 = this.outputTrack) == null || e16.stop();
    });
  }
  initElementsAndStream(e16) {
    this.inputCanvas || (this.inputCanvas = document.createElement("canvas")), this.outputCanvas = document.createElement("canvas"), this.inputVideo || (this.inputVideo = document.createElement("video")), this.inputCanvas.getContext("2d"), this.outputCanvas.getContext(e16 || "2d");
    let t11 = this.outputCanvas.captureStream();
    this.outputTrack = t11.getVideoTracks()[0];
  }
  startPluginsLoop(e16) {
    return c(this, null, function* () {
      if (!this.pluginsLoopRunning) {
        this.initElementsAndStream(e16), this.pluginsLoopRunning = true;
        try {
          yield this.hmsTrack.setProcessedTrack(this.outputTrack);
        } catch (t11) {
          throw this.pluginsLoopRunning = false, d.e(this.TAG, "error in setting processed track", t11), t11;
        }
        this.pluginsLoop().then(() => {
          d.d(this.TAG, "processLoop stopped");
        });
      }
    });
  }
  stopPluginsLoop() {
    return c(this, null, function* () {
      var e16;
      this.pluginsLoopRunning = false, yield this.hmsTrack.setProcessedTrack(void 0), this.resetCanvases(), (e16 = this.outputTrack) == null || e16.stop(), this.inputVideo && (this.inputVideo.srcObject = null, this.inputVideo = void 0);
    });
  }
  pluginsLoop() {
    return c(this, null, function* () {
      for (; this.pluginsLoopRunning; ) {
        let e16 = this.hmsTrack.getMediaTrackSettings().frameRate || Fs, t11 = Math.floor(1e3 / e16);
        if (!this.hmsTrack.enabled || this.hmsTrack.nativeTrack.readyState === "ended") {
          this.pluginsLoopState === "running" && this.resetCanvases(), this.pluginsLoopState = "paused", yield this.reusableWorker.sleep(t11);
          continue;
        }
        let i9 = 0;
        try {
          yield this.analytics.preProcessWithTime(() => c(this, null, function* () {
            return yield this.doPreProcessing();
          }));
          let r9 = Date.now();
          yield this.processFramesThroughPlugins(), i9 = Math.floor(Date.now() - r9), i9 > t11 && (i9 = t11);
        } catch (r9) {
          d.e(this.TAG, "error in plugins loop", r9);
        }
        this.pluginsLoopState = "running", yield this.reusableWorker.sleep(t11 - i9);
      }
    });
  }
  doPreProcessing() {
    return c(this, null, function* () {
      yield this.addTrackToVideo(), yield this.updateInputCanvas();
    });
  }
  processFramesThroughPlugins() {
    return c(this, null, function* () {
      this.canvases[0] = this.inputCanvas;
      let e16 = 0;
      for (let t11 of this.pluginsMap.values()) {
        let i9 = t11.getName();
        if (t11) {
          try {
            let r9 = this.checkIfSkipRequired(i9);
            if (t11.getPluginType() === "TRANSFORM") {
              let s9 = (o14, n9) => c(this, null, function* () {
                try {
                  yield t11.processVideoFrame(o14, n9, r9);
                } catch (l5) {
                  d.e(this.TAG, `error in processing plugin ${i9}`, l5);
                }
              });
              if (r9) e16 === this.pluginsMap.size - 1 ? yield s9(this.canvases[e16], this.outputCanvas) : yield s9(this.canvases[e16], this.canvases[e16 + 1]);
              else {
                let o14 = this.canvases[e16], n9 = this.canvases[e16 + 1];
                e16 === this.pluginsMap.size - 1 ? yield this.analytics.processWithTime(i9, () => c(this, null, function* () {
                  return s9(o14, this.outputCanvas);
                })) : yield this.analytics.processWithTime(i9, () => c(this, null, function* () {
                  return s9(o14, n9);
                }));
              }
            } else t11.getPluginType() === "ANALYZE" && !r9 && (yield this.analytics.processWithTime(i9, () => c(this, null, function* () {
              return yield t11.processVideoFrame(this.inputCanvas);
            })));
          } catch (r9) {
            d.e(this.TAG, `error in processing plugin ${i9}`, r9), yield this.removePlugin(t11);
          }
          e16++;
        }
      }
    });
  }
  addTrackToVideo() {
    return c(this, null, function* () {
      var t11;
      if (!this.inputVideo) return;
      let e16 = this.inputVideo.srcObject;
      e16 !== null && e16 instanceof MediaStream && ((t11 = e16.getVideoTracks()[0]) == null ? void 0 : t11.id) === this.hmsTrack.nativeTrack.id || (this.inputVideo.pause(), this.inputVideo.srcObject = new MediaStream([this.hmsTrack.nativeTrack]), this.inputVideo.muted = true, this.inputVideo.playsInline = true, yield this.inputVideo.play());
    });
  }
  updateInputCanvas() {
    return c(this, null, function* () {
      if (!this.inputCanvas || !this.inputVideo) return;
      let { width: e16 = co, height: t11 = lo } = this.hmsTrack.getMediaTrackSettings();
      this.inputCanvas.height !== t11 && (this.inputCanvas.height = t11), this.inputCanvas.width !== e16 && (this.inputCanvas.width = e16), this.inputCanvas.getContext("2d").drawImage(this.inputVideo, 0, 0, e16, t11);
    });
  }
  resetCanvases() {
    if (!this.outputCanvas || !this.inputCanvas) return;
    let e16 = this.inputCanvas.getContext("2d");
    e16 && (e16.fillStyle = "rgb(0, 0, 0)", e16.fillRect(0, 0, this.outputCanvas.width, this.outputCanvas.height)), this.canvases = [];
  }
  checkIfSkipRequired(e16) {
    let t11 = false;
    return this.pluginNumFramesSkipped[e16] < this.pluginNumFramesToSkip[e16] ? (this.pluginNumFramesSkipped[e16]++, t11 = true) : (t11 = false, this.pluginNumFramesSkipped[e16] = 0), t11;
  }
};
var Yt = class {
  constructor(e16) {
    this.plugins = /* @__PURE__ */ new Set(), this.analytics = new Ke(e16);
  }
  addPlugins(e16) {
    e16.forEach((t11) => this.plugins.add(t11));
  }
  removePlugins(e16) {
    e16.forEach((t11) => {
      t11.stop(), this.analytics.removed(t11.getName()), this.plugins.delete(t11);
    });
  }
  applyPlugins(e16) {
    let t11 = e16;
    for (let i9 of this.plugins) {
      let r9 = i9.getName();
      try {
        t11 = i9.apply(t11), this.analytics.added(r9);
      } catch (s9) {
        this.analytics.failure(r9, s9), d.e("Could not apply plugin", s9, r9);
      }
    }
    return t11;
  }
  getPlugins() {
    return Array.from(this.plugins).map((e16) => e16.getName());
  }
};
var uo = ["init_response_time", "ws_connect_time", "on_policy_change_time", "local_audio_track_time", "local_video_track_time", "peer_list_time", "room_state_time", "join_response_time"];
var Xt = class {
  constructor() {
    this.eventPerformanceMeasures = {};
  }
  start(e16) {
    performance.mark(e16);
  }
  end(e16) {
    var t11;
    try {
      this.eventPerformanceMeasures[e16] = performance.measure(e16, e16), d.d("[HMSPerformanceTiming]", e16, (t11 = this.eventPerformanceMeasures[e16]) == null ? void 0 : t11.duration);
    } catch (i9) {
      d.w("[AnalyticsTimer]", `Error in measuring performance for event ${e16}`, { error: i9 });
    }
  }
  getTimeTaken(e16) {
    var t11;
    return (t11 = this.eventPerformanceMeasures[e16]) == null ? void 0 : t11.duration;
  }
  getTimes(...e16) {
    return [...uo, ...e16].reduce((t11, i9) => v(m({}, t11), { [i9]: this.getTimeTaken(i9) }), {});
  }
  cleanup() {
    this.eventPerformanceMeasures = {};
  }
};
var yr = { isAudioMuted: false, isVideoMuted: false, audioInputDeviceId: "default", audioOutputDeviceId: "default", videoDeviceId: "default" };
var le;
var Zt;
var me = class a4 {
  constructor(e16, t11, i9, r9, s9) {
    this.store = e16;
    this.observer = t11;
    this.deviceManager = i9;
    this.eventBus = r9;
    this.analyticsTimer = s9;
    this.TAG = "[LocalTrackManager]";
    this.setScreenCaptureHandleConfig();
  }
  getTracksToPublish() {
    return c(this, arguments, function* (e16 = yr) {
      let t11 = this.getAVTrackSettings(e16);
      if (!t11) return [];
      let i9 = !!t11.audio, r9 = !!t11.video, s9 = [], { videoTrack: o14, audioTrack: n9 } = yield this.updateCurrentLocalTrackSettings(t11), l5 = (o14 == null ? void 0 : o14.stream) || (n9 == null ? void 0 : n9.stream), u3 = !!(o14 && this.store.getTrackById(o14.trackId)), p2 = !!(n9 && this.store.getTrackById(n9.trackId));
      if (u3 && p2) return [];
      let h2 = { audio: i9 && !n9 && (e16.isAudioMuted ? "empty" : true), video: r9 && !o14 && (e16.isVideoMuted ? "empty" : true) };
      h2.audio && this.analyticsTimer.start("local_audio_track_time"), h2.video && this.analyticsTimer.start("local_video_track_time");
      try {
        d.d(this.TAG, "Init Local Tracks", { fetchTrackOptions: h2 }), s9 = yield this.getLocalTracks(h2, t11, l5);
      } catch (g2) {
        s9 = yield this.retryGetLocalTracks(g2, t11, h2, l5);
      }
      return h2.audio && this.analyticsTimer.end("local_audio_track_time"), h2.video && this.analyticsTimer.end("local_video_track_time"), o14 && r9 && !u3 && s9.push(o14), n9 && i9 && !p2 && s9.push(n9), s9;
    });
  }
  getLocalTracks() {
    return c(this, arguments, function* (e16 = { audio: true, video: true }, t11, i9) {
      try {
        let r9 = yield this.getNativeLocalTracks(e16, t11);
        return this.createHMSLocalTracks(r9, t11, i9);
      } catch (r9) {
        throw this.eventBus.analytics.publish(y.publish({ devices: this.deviceManager.getDevices(), error: r9, settings: t11 })), r9;
      }
    });
  }
  getNativeLocalTracks() {
    return c(this, arguments, function* (e16 = { audio: false, video: false }, t11) {
      let i9 = new Ge(e16.video === true ? t11.video : null, e16.audio === true ? t11.audio : null, t11.simulcast), r9 = [];
      return (i9.audio || i9.video) && r9.push(...yield this.getAVTracks(i9)), r9.push(...this.getEmptyTracks(e16)), r9;
    });
  }
  optimizeScreenShareConstraint(e16, t11) {
    return c(this, null, function* () {
      var s9, o14, n9;
      if (typeof t11.video == "boolean" || !((s9 = t11.video) != null && s9.width) || !((o14 = t11.video) != null && o14.height)) return;
      let i9 = this.store.getPublishParams();
      if (!i9 || !((n9 = i9.allowed) != null && n9.includes("screen"))) return;
      let r9 = document.createElement("video");
      r9.srcObject = e16, r9.addEventListener("loadedmetadata", () => c(this, null, function* () {
        let { videoWidth: l5, videoHeight: u3 } = r9, p2 = i9.screen, h2 = p2.width * p2.height, g2 = l5 / u3, T = p2.width / p2.height;
        if (g2 > T) {
          let E2 = t11.video, A = g2 / T, w = Math.sqrt(A);
          l5 * u3 > h2 ? (E2.width = l5 / w, E2.height = u3 / w) : (E2.height = u3 * w, E2.width = l5 * w), yield e16.getVideoTracks()[0].applyConstraints(E2);
        }
      }));
    });
  }
  getLocalScreen(e16, t11 = false) {
    return c(this, null, function* () {
      var g2;
      let i9 = yield this.getOrDefaultScreenshareConfig(e16), r9 = this.getScreenshareSettings(i9.videoOnly), s9 = { video: v(m({}, r9 == null ? void 0 : r9.video.toConstraints(true)), { displaySurface: i9.displaySurface }), preferCurrentTab: i9.preferCurrentTab, selfBrowserSurface: i9.selfBrowserSurface, surfaceSwitching: i9.surfaceSwitching, systemAudio: i9.systemAudio };
      if (r9 != null && r9.audio) {
        let T = (g2 = r9 == null ? void 0 : r9.audio) == null ? void 0 : g2.toConstraints();
        delete T.advanced, s9.audio = v(m({}, T), { autoGainControl: false, noiseSuppression: false, googAutoGainControl: false, echoCancellation: false });
      }
      let o14;
      try {
        d.d("retrieving screenshare with ", { config: i9 }, { constraints: s9 }), o14 = yield navigator.mediaDevices.getDisplayMedia(s9), t11 && (yield this.optimizeScreenShareConstraint(o14, s9));
      } catch (T) {
        d.w(this.TAG, "error in getting screenshare - ", T);
        let E2 = Fe(T, "screen");
        throw this.eventBus.analytics.publish(y.publish({ error: E2, devices: this.deviceManager.getDevices(), settings: new Ge(r9 == null ? void 0 : r9.video, r9 == null ? void 0 : r9.audio, false) })), E2;
      }
      let n9 = [], l5 = new Ne(o14), u3 = o14.getVideoTracks()[0], p2 = new U(l5, u3, "screen", this.eventBus, r9 == null ? void 0 : r9.video);
      p2.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(), "screen"));
      try {
        let T = this.validateCurrentTabCapture(p2, i9.forceCurrentTab);
        p2.isCurrentTab = T, yield p2.cropTo(i9.cropTarget);
      } catch (T) {
        throw o14.getTracks().forEach((E2) => E2.stop()), T;
      }
      n9.push(p2);
      let h2 = o14.getAudioTracks()[0];
      if (h2) {
        let T = new ae(l5, h2, "screen", this.eventBus, r9 == null ? void 0 : r9.audio);
        n9.push(T);
      }
      return d.v(this.TAG, "getLocalScreen", n9), n9;
    });
  }
  setScreenCaptureHandleConfig(e16) {
    var t11;
    !((t11 = navigator.mediaDevices) != null && t11.setCaptureHandleConfig) || this.isInIframe() || (e16 = e16 || {}, Object.assign(e16, { handle: v4_default(), exposeOrigin: false, permittedOrigins: [window.location.origin] }), d.d("setting capture handle - ", e16.handle), navigator.mediaDevices.setCaptureHandleConfig(e16), this.captureHandleIdentifier = e16.handle);
  }
  validateCurrentTabCapture(e16, t11) {
    let i9 = e16.getCaptureHandle(), r9 = !!(this.captureHandleIdentifier && (i9 == null ? void 0 : i9.handle) === this.captureHandleIdentifier);
    if (t11 && !r9) throw d.e(this.TAG, "current tab was not shared with forceCurrentTab as true"), S.TracksErrors.CurrentTabNotShared();
    return r9;
  }
  requestPermissions() {
    return c(this, null, function* () {
      try {
        (yield navigator.mediaDevices.getUserMedia({ audio: true, video: true })).getTracks().forEach((t11) => t11.stop());
      } catch (e16) {
        d.e(this.TAG, e16);
      }
    });
  }
  static getEmptyVideoTrack(e16) {
    var n9, l5, u3;
    let t11 = ((n9 = e16 == null ? void 0 : e16.getSettings()) == null ? void 0 : n9.width) || 320, i9 = ((l5 = e16 == null ? void 0 : e16.getSettings()) == null ? void 0 : l5.height) || 240, r9 = 1;
    le || (le = document.createElement("canvas"), le.width = t11, le.height = i9, (u3 = le.getContext("2d")) == null || u3.fillRect(0, 0, t11, i9)), Zt || (Zt = setInterval(() => {
      let p2 = le == null ? void 0 : le.getContext("2d");
      p2 && p2.fillRect(0, 0, 1, 1);
    }, 1e3 / r9));
    let o14 = le.captureStream(r9).getVideoTracks()[0];
    return o14.enabled = false, o14;
  }
  static getEmptyAudioTrack() {
    let e16 = Pe.getAudioContext(), t11 = e16.createOscillator(), i9 = e16.createMediaStreamDestination();
    t11.connect(i9), t11.start();
    let r9 = i9.stream.getAudioTracks()[0];
    return r9.enabled = false, r9;
  }
  static cleanup() {
    clearInterval(Zt), Zt = void 0, le = void 0;
  }
  getAVTracks(e16) {
    return c(this, null, function* () {
      try {
        let t11 = yield navigator.mediaDevices.getUserMedia({ audio: e16.audio ? e16.audio.toConstraints() : false, video: e16.video ? e16.video.toConstraints() : false });
        return t11.getVideoTracks().concat(t11.getAudioTracks());
      } catch (t11) {
        yield this.deviceManager.init();
        let i9 = !!(!this.deviceManager.hasWebcamPermission && e16.video), r9 = !!(!this.deviceManager.hasMicrophonePermission && e16.audio), s9 = this.getErrorType(i9, r9);
        throw Fe(t11, s9);
      }
    });
  }
  getAVTrackSettings(e16) {
    let t11 = this.getAudioSettings(e16), i9 = this.getVideoSettings(e16);
    return !t11 && !i9 ? null : new ct().video(i9).audio(t11).build();
  }
  isInIframe() {
    try {
      return window.self !== window.top;
    } catch (e16) {
      return true;
    }
  }
  retryGetLocalTracks(e16, t11, i9, r9) {
    return c(this, null, function* () {
      if (e16 instanceof f && e16.action === "TRACK") {
        this.observer.onFailure(e16);
        let s9 = e16.code === M.TracksErrors.OVER_CONSTRAINED, o14 = e16.message.includes("audio"), n9 = e16.message.includes("video");
        if (s9) {
          let l5 = new ct().video(new _e()).audio(new De()).build();
          d.w(this.TAG, "Fetch AV Tracks failed with overconstrained error", { fetchTrackOptions: i9 }, { error: e16 });
          try {
            return yield this.getLocalTracks(i9, l5, r9);
          } catch (u3) {
            let p2 = u3 instanceof f ? u3.nativeError : u3, h2 = u3;
            if ((p2 == null ? void 0 : p2.name) === "OverconstrainedError") {
              let g2 = S.TracksErrors.GenericTrack("TRACK", "Overconstrained error after dropping all constraints");
              g2.addNativeError(p2), h2 = g2;
            }
            return yield this.retryGetLocalTracks(h2, t11, i9, r9);
          }
        }
        i9.audio = o14 ? "empty" : i9.audio, i9.video = n9 ? "empty" : i9.video, d.w(this.TAG, "Fetch AV Tracks failed", { fetchTrackOptions: i9 }, e16);
        try {
          return yield this.getLocalTracks(i9, t11, r9);
        } catch (l5) {
          return d.w(this.TAG, "Fetch empty tacks failed", l5), i9.audio = i9.audio && "empty", i9.video = i9.video && "empty", this.observer.onFailure(l5), yield this.getLocalTracks(i9, t11, r9);
        }
      } else return d.w(this.TAG, "Fetch AV Tracks failed - unknown exception", e16), this.observer.onFailure(e16), [];
    });
  }
  getErrorType(e16, t11) {
    return e16 && t11 ? "audio, video" : e16 ? "video" : t11 ? "audio" : "unknown(video or audio)";
  }
  getEmptyTracks(e16) {
    let t11 = [];
    return e16.audio === "empty" && t11.push(a4.getEmptyAudioTrack()), e16.video === "empty" && t11.push(a4.getEmptyVideoTrack()), t11;
  }
  updateCurrentLocalTrackSettings(e16) {
    return c(this, null, function* () {
      let t11 = this.store.getLocalPeerTracks(), i9 = t11.find((n9) => n9.type === "video" && n9.source === "regular"), r9 = t11.find((n9) => n9.type === "audio" && n9.source === "regular"), s9 = t11.find((n9) => n9.type === "video" && n9.source === "screen");
      e16 != null && e16.video && (yield i9 == null ? void 0 : i9.setSettings(e16.video)), e16 != null && e16.audio && (yield r9 == null ? void 0 : r9.setSettings(e16.audio));
      let o14 = this.getScreenshareSettings(true);
      return o14 != null && o14.video && (yield s9 == null ? void 0 : s9.setSettings(o14 == null ? void 0 : o14.video)), { videoTrack: i9, audioTrack: r9 };
    });
  }
  getAudioSettings(e16) {
    var o14;
    let t11 = this.store.getPublishParams();
    if (!t11 || !((o14 = t11.allowed) != null && o14.includes("audio"))) return null;
    let i9 = this.store.getLocalPeer(), r9 = i9 == null ? void 0 : i9.audioTrack, s9 = (r9 == null ? void 0 : r9.settings.deviceId) || e16.audioInputDeviceId;
    return new se().codec(t11.audio.codec).maxBitrate(t11.audio.bitRate).deviceId(s9 || yr.audioInputDeviceId).build();
  }
  getVideoSettings(e16) {
    var n9;
    let t11 = this.store.getPublishParams();
    if (!t11 || !((n9 = t11.allowed) != null && n9.includes("video"))) return null;
    let i9 = this.store.getLocalPeer(), r9 = i9 == null ? void 0 : i9.videoTrack, s9 = (r9 == null ? void 0 : r9.settings.deviceId) || e16.videoDeviceId, o14 = t11.video;
    return new ee().codec(o14.codec).maxBitrate(o14.bitRate).maxFramerate(o14.frameRate).setWidth(o14.width).setHeight(o14.height).deviceId(s9 || yr.videoDeviceId).build();
  }
  getScreenshareSettings(e16 = false) {
    var r9;
    let t11 = this.store.getPublishParams();
    if (!t11 || !((r9 = t11.allowed) != null && r9.includes("screen"))) return null;
    let i9 = t11.screen;
    return { video: new ee().maxBitrate(i9.bitRate, false).codec(i9.codec).maxFramerate(i9.frameRate).setWidth(i9.width).setHeight(i9.height).build(), audio: e16 ? void 0 : new se().build() };
  }
  getOrDefaultScreenshareConfig(e16) {
    return c(this, null, function* () {
      var i9;
      let t11 = Object.assign({ videoOnly: false, audioOnly: false, forceCurrentTab: false, preferCurrentTab: false, selfBrowserSurface: "exclude", surfaceSwitching: "include", systemAudio: "exclude", displaySurface: "monitor" }, e16 || {});
      return t11.forceCurrentTab && (t11.videoOnly = true, t11.preferCurrentTab = true, t11.selfBrowserSurface = "include", t11.surfaceSwitching = "exclude"), t11.preferCurrentTab && (t11.selfBrowserSurface = "include", t11.displaySurface = void 0), t11.cropElement && ((i9 = window.CropTarget) != null && i9.fromElement) && (t11.cropTarget = yield window.CropTarget.fromElement(t11.cropElement)), t11;
    });
  }
  createHMSLocalTracks(e16, t11, i9) {
    let r9 = e16.find((n9) => n9.kind === "video"), s9 = e16.find((n9) => n9.kind === "audio");
    i9 ? e16.forEach((n9) => i9 == null ? void 0 : i9.nativeStream.addTrack(n9)) : i9 = new Ne(new MediaStream(e16));
    let o14 = [];
    if (s9 && (t11 != null && t11.audio)) {
      let n9 = new ae(i9, s9, "regular", this.eventBus, t11.audio);
      o14.push(n9);
    }
    if (r9 && (t11 != null && t11.video)) {
      let n9 = new U(i9, r9, "regular", this.eventBus, t11.video);
      n9.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(), "regular")), o14.push(n9);
    }
    return o14;
  }
};
function Gs(a12, e16) {
  return function(i9) {
    return !(0, import_lodash2.default)(a12[i9], e16[i9]);
  };
}
var U = class a5 extends We {
  constructor(t11, i9, r9, s9, o14 = new ee().build()) {
    super(t11, i9, r9);
    this.eventBus = s9;
    this._layerDefinitions = [];
    this.TAG = "[HMSLocalVideoTrack]";
    this.enabledStateBeforeBackground = false;
    this.isCurrentTab = false;
    this.isPublished = false;
    this.replaceSenderTrack = (t12) => c(this, null, function* () {
      if (!this.transceiver || this.transceiver.direction !== "sendonly") {
        d.d(this.TAG, `transceiver for ${this.trackId} not available or not connected yet`);
        return;
      }
      yield this.transceiver.sender.replaceTrack(t12);
    });
    this.buildNewSettings = (t12) => {
      let { width: i10, height: r10, codec: s10, maxFramerate: o15, maxBitrate: n9, deviceId: l5, advanced: u3, facingMode: p2 } = m(m({}, this.settings), t12);
      return new _e(i10, r10, s10, o15, l5, u3, n9, p2);
    };
    this.handleSettingsChange = (t12) => c(this, null, function* () {
      let i10 = this.stream, r10 = Gs(t12, this.settings);
      if (r10("maxBitrate") && t12.maxBitrate && (yield i10.setMaxBitrateAndFramerate(this)), r10("width") || r10("height") || r10("advanced")) if (this.source === "video") {
        let s10 = yield this.replaceTrackWith(t12);
        yield this.replaceSender(s10, this.enabled), this.nativeTrack = s10, yield this.processPlugins(), this.videoHandler.updateSinks();
      } else yield this.nativeTrack.applyConstraints(t12.toConstraints());
    });
    this.handleDeviceChange = (t12, i10 = false) => c(this, null, function* () {
      if (Gs(t12, this.settings)("deviceId") && this.source === "regular") {
        if (this.enabled) {
          delete t12.facingMode;
          let o15 = yield this.replaceTrackWith(t12);
          yield this.replaceSender(o15, this.enabled), this.nativeTrack = o15, yield this.processPlugins(), this.videoHandler.updateSinks();
        }
        let s10 = this.nativeTrack.getSettings().groupId;
        !i10 && t12.deviceId && (j.updateSelection("videoInput", { deviceId: t12.deviceId, groupId: s10 }), this.eventBus.deviceChange.publish({ isUserSelection: true, type: "video", selection: { deviceId: t12.deviceId, groupId: s10 } }));
      }
    });
    this.removeOrReplaceProcessedTrack = (t12) => c(this, null, function* () {
      t12 ? t12 !== this.processedTrack && (this.processedTrack = t12) : this.processedTrack = void 0, yield this.replaceSenderTrack(this.processedTrack || this.nativeTrack);
    });
    this.handleVisibilityChange = () => c(this, null, function* () {
      document.visibilityState === "hidden" && this.source === "regular" ? (this.enabledStateBeforeBackground = this.enabled, this.nativeTrack.enabled = false, this.replaceSenderTrack(this.nativeTrack)) : (this.nativeTrack.enabled = this.enabledStateBeforeBackground, this.replaceSenderTrack(this.nativeTrack)), this.eventBus.localVideoEnabled.publish({ enabled: this.nativeTrack.enabled, track: this });
    });
    t11.tracks.push(this), this.setVideoHandler(new $e(this)), this.settings = o14, o14.deviceId !== i9.getSettings().deviceId && i9.enabled && (this.settings = this.buildNewSettings({ deviceId: i9.getSettings().deviceId })), this.pluginsManager = new ut(this, s9), this.mediaStreamPluginsManager = new Yt(s9), this.setFirstTrackId(this.trackId), _ && Le() && document.addEventListener("visibilitychange", this.handleVisibilityChange);
  }
  setSimulcastDefinitons(t11) {
    this._layerDefinitions = t11;
  }
  getSimulcastDefinitions() {
    return this._layerDefinitions;
  }
  setEnabled(t11) {
    return c(this, null, function* () {
      var i9;
      if (t11 !== this.enabled) {
        if (this.source === "regular") {
          let r9;
          t11 ? r9 = yield this.replaceTrackWith(this.settings) : r9 = yield this.replaceTrackWithBlank(), yield this.replaceSender(r9, t11), (i9 = this.nativeTrack) == null || i9.stop(), this.nativeTrack = r9, yield K(a5.prototype, this, "setEnabled").call(this, t11), t11 && (yield this.pluginsManager.waitForRestart(), yield this.processPlugins(), this.settings = this.buildNewSettings({ deviceId: r9.getSettings().deviceId })), this.videoHandler.updateSinks();
        }
        this.eventBus.localVideoEnabled.publish({ enabled: t11, track: this });
      }
    });
  }
  processPlugins() {
    return c(this, null, function* () {
      try {
        if (this.pluginsManager.getPlugins().length > 0) return;
        if (this.mediaStreamPluginsManager.getPlugins().length > 0) {
          let r9 = this.mediaStreamPluginsManager.applyPlugins(new MediaStream([this.nativeTrack])).getVideoTracks()[0];
          yield this.setProcessedTrack(r9);
        } else yield this.setProcessedTrack();
      } catch (t11) {
        console.error("error in processing plugin(s)", t11);
      }
    });
  }
  addStreamPlugins(t11) {
    return c(this, null, function* () {
      if (this.pluginsManager.getPlugins().length > 0) throw Error("Plugins of type HMSMediaStreamPlugin and HMSVideoPlugin cannot be used together");
      this.mediaStreamPluginsManager.addPlugins(t11), yield this.processPlugins();
    });
  }
  removeStreamPlugins(t11) {
    return c(this, null, function* () {
      this.mediaStreamPluginsManager.removePlugins(t11), yield this.processPlugins();
    });
  }
  isPublishedTrackId(t11) {
    return this.publishedTrackId === t11;
  }
  addSink(t11) {
    this.addSinkInternal(t11, this.processedTrack || this.nativeTrack);
  }
  setSettings(t11, i9 = false) {
    return c(this, null, function* () {
      let r9 = this.buildNewSettings(t11);
      if (yield this.handleDeviceChange(r9, i9), !this.enabled || de(this.nativeTrack)) {
        this.settings = r9;
        return;
      } else yield this.pluginsManager.waitForRestart();
      yield this.handleSettingsChange(r9), this.settings = r9;
    });
  }
  getPlugins() {
    return this.mediaStreamPluginsManager.getPlugins().length > 0 ? this.mediaStreamPluginsManager.getPlugins() : this.pluginsManager.getPlugins();
  }
  addPlugin(t11, i9) {
    return c(this, null, function* () {
      if (this.mediaStreamPluginsManager.getPlugins().length > 0) throw Error("Plugins of type HMSVideoPlugin and HMSMediaStreamPlugin cannot be used together");
      return this.pluginsManager.addPlugin(t11, i9);
    });
  }
  removePlugin(t11) {
    return c(this, null, function* () {
      return this.pluginsManager.removePlugin(t11);
    });
  }
  validatePlugin(t11) {
    return this.pluginsManager.validatePlugin(t11);
  }
  cleanup() {
    return c(this, null, function* () {
      var t11;
      K(a5.prototype, this, "cleanup").call(this), this.transceiver = void 0, yield this.pluginsManager.cleanup(), (t11 = this.processedTrack) == null || t11.stop(), this.isPublished = false, _ && Le() && document.removeEventListener("visibilitychange", this.handleVisibilityChange);
    });
  }
  cropTo(t11) {
    return c(this, null, function* () {
      if (t11 && this.source === "screen") try {
        this.nativeTrack.cropTo && (yield this.nativeTrack.cropTo(t11));
      } catch (i9) {
        throw d.e(this.TAG, "failed to crop screenshare capture - ", i9), S.TracksErrors.GenericTrack("TRACK", "failed to crop screenshare capture");
      }
    });
  }
  getCaptureHandle() {
    if (this.nativeTrack.getCaptureHandle) return this.nativeTrack.getCaptureHandle();
  }
  setProcessedTrack(t11) {
    return c(this, null, function* () {
      if (!this.nativeTrack.enabled) {
        this.processedTrack = t11;
        return;
      }
      yield this.removeOrReplaceProcessedTrack(t11), this.videoHandler.updateSinks();
    });
  }
  getTrackIDBeingSent() {
    return this.getTrackBeingSent().id;
  }
  getTrackBeingSent() {
    return this.enabled ? this.processedTrack || this.nativeTrack : this.nativeTrack;
  }
  switchCamera() {
    return c(this, null, function* () {
      var s9;
      let t11 = this.getMediaTrackSettings().facingMode;
      if (!t11 || this.source !== "regular") {
        d.d(this.TAG, "facingMode not supported");
        return;
      }
      let i9 = t11 === "environment" ? "user" : "environment";
      (s9 = this.nativeTrack) == null || s9.stop();
      let r9 = yield this.replaceTrackWith(this.buildNewSettings({ facingMode: i9, deviceId: void 0 }));
      yield this.replaceSender(r9, this.enabled), this.nativeTrack = r9, yield this.processPlugins(), this.videoHandler.updateSinks(), this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId, facingMode: i9 }), j.updateSelection("videoInput", { deviceId: this.settings.deviceId, groupId: this.nativeTrack.getSettings().groupId });
    });
  }
  replaceTrackWith(t11) {
    return c(this, null, function* () {
      let i9 = this.nativeTrack;
      i9 == null || i9.stop();
      try {
        let r9 = yield Hs(t11);
        return d.d(this.TAG, "replaceTrack, Previous track stopped", i9, "newTrack", r9), this.settings.deviceId === "default" && (this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId })), r9;
      } catch (r9) {
        throw this.isPublished && this.eventBus.analytics.publish(y.publish({ error: r9 })), r9;
      }
    });
  }
  replaceTrackWithBlank() {
    return c(this, null, function* () {
      let t11 = this.nativeTrack, i9 = me.getEmptyVideoTrack(t11);
      return t11 == null || t11.stop(), d.d(this.TAG, "replaceTrackWithBlank, Previous track stopped", t11, "newTrack", i9), i9;
    });
  }
  replaceSender(t11, i9) {
    return c(this, null, function* () {
      i9 ? yield this.replaceSenderTrack(this.processedTrack || t11) : yield this.replaceSenderTrack(t11), this.stream.replaceStreamTrack(this.nativeTrack, t11);
    });
  }
};
var qe = "renegotiation-callback-id";
var ei = "ion-sfu";
var je = "SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID";
var Ws = "https://event.100ms.live/v2/client/report";
var $s = "https://event-nonprod.100ms.live/v2/client/report";
var pt = Math.pow(2, 31) - 1;
var V = { DEVICE_CHANGE: "device-change", LOCAL_AUDIO_ENABLED: "local-audio-enabled", LOCAL_VIDEO_ENABLED: "local-video-enabled", STATS_UPDATE: "stats-update", RTC_STATS_UPDATE: "rtc-stats-update", TRACK_DEGRADED: "track-degraded", TRACK_RESTORED: "track-restored", TRACK_AUDIO_LEVEL_UPDATE: "track-audio-level-update", LOCAL_AUDIO_SILENCE: "local-audio-silence", ANALYTICS: "analytics", AUDIO_PLUGIN_FAILED: "audio-plugin-failed", POLICY_CHANGE: "policy-change", LOCAL_ROLE_UPDATE: "local-role-update", AUDIO_TRACK_UPDATE: "audio-track-update", AUDIO_TRACK_ADDED: "audio-track-added", AUDIO_TRACK_REMOVED: "audio-track-removed", AUTOPLAY_ERROR: "autoplay-error", LEAVE: "leave" };
var Ks = "2.5";
var qs = "20240406";
var Se = "_handraise";
var Er = 1e3;
var Pr = 64;
var js = "https://whiteboard.100ms.live";
var Js = "https://whiteboard-qa.100ms.live";
var O = class a6 extends We {
  constructor(t11, i9, r9) {
    super(t11, i9, r9);
    this._degraded = false;
    this._degradedAt = null;
    this._layerDefinitions = [];
    this.history = new br();
    this.preferredLayer = "high";
    this.setVideoHandler(new $e(this));
  }
  setTrackId(t11) {
    this.bizTrackId = t11;
  }
  get trackId() {
    return this.bizTrackId || super.trackId;
  }
  get degraded() {
    return this._degraded;
  }
  get degradedAt() {
    return this._degradedAt;
  }
  setEnabled(t11) {
    return c(this, null, function* () {
      t11 !== this.enabled && (K(a6.prototype, this, "setEnabled").call(this, t11), this.videoHandler.updateSinks(true));
    });
  }
  setPreferredLayer(t11) {
    return c(this, null, function* () {
      if (t11 === "none") {
        d.w("layer none will be ignored");
        return;
      }
      if (this.preferredLayer = t11, !!this.shouldSendVideoLayer(t11, "preferLayer")) {
        if (!this.hasSinks()) {
          d.d(`[Remote Track] ${this.logIdentifier}
        streamId=${this.stream.id} 
        trackId=${this.trackId}
        saving ${t11}, source=${this.source}
        Track does not have any sink`);
          return;
        }
        yield this.requestLayer(t11, "preferLayer"), this.pushInHistory(`uiPreferLayer-${t11}`);
      }
    });
  }
  getSimulcastLayer() {
    return this.stream.getSimulcastLayer();
  }
  getLayer() {
    return this.stream.getVideoLayer();
  }
  getPreferredLayer() {
    return this.preferredLayer;
  }
  replaceTrack(t11) {
    this.nativeTrack = t11.nativeTrack, t11.transceiver && (this.transceiver = t11.transceiver, this.stream.updateId(t11.stream.id)), this.videoHandler.updateSinks();
  }
  addSink(t11, i9 = true) {
    return c(this, null, function* () {
      de(this.nativeTrack) ? yield this.requestLayer(this.preferredLayer, "addSink") : (K(a6.prototype, this, "addSink").call(this, t11), i9 && (yield this.updateLayer("addSink"))), this.pushInHistory("uiSetLayer-high");
    });
  }
  removeSink(t11, i9 = true) {
    return c(this, null, function* () {
      K(a6.prototype, this, "removeSink").call(this, t11), i9 && (yield this.updateLayer("removeSink")), this._degraded = false, this.pushInHistory("uiSetLayer-none");
    });
  }
  getSimulcastDefinitions() {
    return [...this._layerDefinitions];
  }
  setSimulcastDefinitons(t11) {
    this._layerDefinitions = t11;
  }
  setLayerFromServer(t11) {
    this._degraded = this.enabled && (t11.publisher_degraded || t11.subscriber_degraded) && t11.current_layer === "none", this._degradedAt = this._degraded ? /* @__PURE__ */ new Date() : this._degradedAt;
    let i9 = t11.current_layer;
    return d.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id} 
      trackId=${this.trackId}
      layer update from sfu
      currLayer=${t11.current_layer}
      preferredLayer=${t11.expected_layer}
      sub_degraded=${t11.subscriber_degraded}
      pub_degraded=${t11.publisher_degraded}
      isDegraded=${this._degraded}`), this.stream.setVideoLayerLocally(i9, this.logIdentifier, "setLayerFromServer"), this.pushInHistory(`sfuLayerUpdate-${i9}`), this._degraded;
  }
  updateLayer(t11) {
    return c(this, null, function* () {
      let i9 = this.degraded || !this.enabled || !this.hasSinks() ? "none" : this.preferredLayer;
      this.shouldSendVideoLayer(i9, t11) && (yield this.requestLayer(i9, t11));
    });
  }
  pushInHistory(t11) {
  }
  requestLayer(t11, i9) {
    return c(this, null, function* () {
      try {
        let r9 = yield this.stream.setVideoLayer(t11, this.trackId, this.logIdentifier, i9);
        return d.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id}
      trackId=${this.trackId}
      Requested layer ${t11}, source=${i9}`), r9;
      } catch (r9) {
        throw d.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id}
      trackId=${this.trackId}
      Failed to set layer ${t11}, source=${i9}
      error=${r9.message}`), r9;
      }
    });
  }
  shouldSendVideoLayer(t11, i9) {
    let r9 = this.getLayer();
    return this.degraded && t11 === "none" ? true : r9 === t11 ? (d.d(`[Remote Track] ${this.logIdentifier}`, `Not sending update, already on layer ${t11}, source=${i9}`), false) : true;
  }
};
var br = class {
  constructor() {
    this.history = [];
  }
  push(e16) {
    e16.time = (/* @__PURE__ */ new Date()).toISOString().split("T")[1], this.history.push(e16);
  }
};
var Ne = class extends Be {
  constructor() {
    super(...arguments);
    this.TAG = "[HMSLocalStream]";
    this.connection = null;
  }
  setConnection(t11) {
    this.connection = t11;
  }
  addTransceiver(t11, i9) {
    let r9 = this.connection.addTransceiver(t11.getTrackBeingSent(), { streams: [this.nativeStream], direction: "sendonly", sendEncodings: this.getTrackEncodings(t11, i9) });
    return this.setPreferredCodec(r9, t11.nativeTrack.kind), t11.transceiver = r9, r9;
  }
  setMaxBitrateAndFramerate(t11) {
    return c(this, null, function* () {
      var i9;
      yield (i9 = this.connection) == null ? void 0 : i9.setMaxBitrateAndFramerate(t11);
    });
  }
  setPreferredCodec(t11, i9) {
  }
  replaceStreamTrack(t11, i9) {
    this.nativeStream.addTrack(i9), this.nativeStream.removeTrack(t11);
  }
  removeSender(t11) {
    var s9, o14;
    if (!this.connection || this.connection.connectionState === "closed") {
      d.d(this.TAG, "publish connection is not initialised or closed");
      return;
    }
    let i9 = (s9 = t11.transceiver) == null ? void 0 : s9.sender;
    if (!i9) {
      d.w(this.TAG, `No sender found for trackId=${t11.trackId}`);
      return;
    }
    (o14 = this.connection) == null || o14.removeTrack(i9);
    let r9 = this.tracks.indexOf(t11);
    r9 !== -1 ? this.tracks.splice(r9, 1) : d.w(this.TAG, `Cannot find ${t11.trackId} in locally stored tracks`);
  }
  getTrackEncodings(t11, i9) {
    let r9 = [];
    if (t11 instanceof U) if (i9.length > 0) d.d(this.TAG, "Simulcast enabled with layers", i9), r9.push(...i9);
    else {
      let s9 = { active: this.nativeStream.active };
      t11.settings.maxBitrate && !Ce && (s9.maxBitrate = t11.settings.maxBitrate), r9.push(s9);
    }
    return r9;
  }
};
var he = class extends Be {
  constructor(t11, i9) {
    super(t11);
    this.audio = true;
    this.video = "none";
    this.connection = i9;
  }
  setAudio(t11, i9, r9) {
    return c(this, null, function* () {
      this.audio !== t11 && (this.audio = t11, d.d(`[Remote stream] ${r9 || ""} 
    streamId=${this.id}
    trackId=${i9}
    subscribing audio - ${this.audio}`), yield this.connection.sendOverApiDataChannelWithResponse({ params: { subscribed: this.audio, track_id: i9 }, method: "prefer-audio-track-state" }));
    });
  }
  setVideoLayerLocally(t11, i9, r9) {
    this.video = t11, d.d(`[Remote stream] ${i9}
    streamId=${this.id}
    source: ${r9}
    Setting layer field to=${t11}`);
  }
  setVideoLayer(t11, i9, r9, s9) {
    return d.d(`[Remote stream] ${r9} 
      streamId=${this.id}
      trackId=${i9} 
      source: ${s9} request ${t11} layer`), this.setVideoLayerLocally(t11, r9, s9), this.connection.sendOverApiDataChannelWithResponse({ params: { max_spatial_layer: this.video, track_id: i9 }, method: "prefer-video-track-state" });
  }
  getSimulcastLayer() {
    return this.video;
  }
  getVideoLayer() {
    return this.video;
  }
  isAudioSubscribed() {
    return this.audio;
  }
};
var Qs = (a12, e16, t11, i9) => c(void 0, null, function* () {
  var o14;
  let r9, s9 = {};
  if ((o14 = e16.transceiver) != null && o14.sender.track) {
    try {
      r9 = yield e16.transceiver.sender.getStats();
      let n9 = {}, l5 = {}, u3 = {};
      r9 == null || r9.forEach((p2) => {
        switch (p2.type) {
          case "outbound-rtp":
            l5[p2.id] = p2;
            break;
          case "remote-inbound-rtp":
            u3[p2.ssrc] = p2;
            break;
          case "codec":
            n9[p2.id] = p2.mimeType;
            break;
          default:
            break;
        }
      }), Object.keys(m({}, l5)).forEach((p2) => {
        var w, Me;
        let h2 = (w = l5[p2]) == null ? void 0 : w.codecId, g2 = h2 ? n9[h2] : void 0, T;
        g2 && (T = g2.substring(g2.indexOf("/") + 1));
        let E2 = v(m({}, l5[p2]), { rid: (Me = l5[p2]) == null ? void 0 : Me.rid }), A = u3[E2.ssrc];
        s9[p2] = v(m({}, E2), { bitrate: Ir("bytesSent", E2, i9 == null ? void 0 : i9[p2]), packetsLost: A == null ? void 0 : A.packetsLost, jitter: A == null ? void 0 : A.jitter, roundTripTime: A == null ? void 0 : A.roundTripTime, totalRoundTripTime: A == null ? void 0 : A.totalRoundTripTime, peerName: t11, peerID: e16.peerId, enabled: e16.enabled, codec: T });
      });
    } catch (n9) {
      a12.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed("TRACK", `Error getting local track stats ${e16.trackId} - ${n9.message}`))), d.w("[HMSWebrtcStats]", "Error in getting local track stats", e16, n9, n9.name);
    }
    return s9;
  }
});
var zs = (a12, e16, t11, i9) => c(void 0, null, function* () {
  var l5;
  let r9;
  try {
    r9 = yield (l5 = e16.transceiver) == null ? void 0 : l5.receiver.getStats();
  } catch (u3) {
    a12.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed("TRACK", `Error getting remote track stats ${e16.trackId} - ${u3.message}`))), d.w("[HMSWebrtcStats]", "Error in getting remote track stats", e16, u3);
  }
  let s9 = mo(r9), o14 = Ir("bytesReceived", s9, i9), n9 = Ar("packetsLost", s9, i9);
  return s9 != null && s9.remote && Object.assign(s9.remote, { packetsLostRate: Ar("packetsLost", s9.remote, i9 == null ? void 0 : i9.remote) }), s9 && v(m({}, s9), { bitrate: o14, packetsLostRate: n9, peerID: e16.peerId, enabled: e16.enabled, peerName: t11, codec: s9.codec });
});
var mo = (a12) => {
  let e16, t11, i9 = {};
  a12 == null || a12.forEach((o14) => {
    switch (o14.type) {
      case "inbound-rtp":
        e16 = o14;
        break;
      case "outbound-rtp":
        e16 = o14;
        break;
      case "remote-inbound-rtp":
        t11 = o14;
        break;
      case "codec":
        i9[o14.id] = o14.mimeType;
        break;
      default:
        break;
    }
  });
  let r9 = e16 != null && e16.codecId ? i9[e16.codecId] : void 0, s9;
  return r9 && (s9 = r9.substring(r9.indexOf("/") + 1)), e16 && Object.assign(e16, { remote: t11, codec: s9 });
};
var Rr = (a12, e16, t11) => {
  let i9 = So(e16), r9 = Ir(a12 === "publish" ? "bytesSent" : "bytesReceived", i9, t11 && t11[a12]);
  return i9 && Object.assign(i9, { bitrate: r9 });
};
var So = (a12) => {
  let e16;
  return a12 == null || a12.forEach((t11) => {
    t11.type === "transport" && (e16 = a12 == null ? void 0 : a12.get(t11.selectedCandidatePairId));
  }), e16 || a12 == null || a12.forEach((t11) => {
    t11.type === "candidate-pair" && t11.selected && (e16 = t11);
  }), e16;
};
var Ys = (a12) => {
  let e16 = { packetsLost: 0, jitter: 0 };
  return a12 == null || a12.forEach((t11) => {
    t11.packetsLost && (e16.packetsLost += t11.packetsLost), t11.jitter > e16.jitter && (e16.jitter = t11.jitter);
  }), e16;
};
var Xs = (a12, e16) => Array.from(new Set(a12.concat(e16)));
var Ir = (a12, e16, t11) => Ar(a12, e16, t11) * 8;
var Ar = (a12, e16, t11) => {
  let i9 = e16 && e16[a12], r9 = t11 ? t11[a12] : null;
  return [e16, t11, ie(i9), ie(r9)].every((o14) => !!o14) ? Hr(i9, r9, e16 == null ? void 0 : e16.timestamp, t11 == null ? void 0 : t11.timestamp) * 1e3 : 0;
};
var Hr = (a12, e16, t11, i9) => ie(a12) && ie(e16) && t11 && i9 ? (a12 - e16) / (t11 - i9) : 0;
var ti = class {
  constructor(e16, t11, i9) {
    this.getStats = e16;
    this.store = t11;
    this.eventBus = i9;
    this.TAG = "[HMSWebrtcStats]";
    this.peerStats = {};
    this.remoteTrackStats = {};
    this.localTrackStats = {};
    this.getLocalPeerStats = () => this.peerStats[this.localPeerID];
    this.getRemoteTrackStats = (e17) => this.remoteTrackStats[e17];
    this.getAllRemoteTracksStats = () => this.remoteTrackStats;
    this.getLocalTrackStats = () => this.localTrackStats;
    this.updateStats = () => c(this, null, function* () {
      yield this.updateLocalPeerStats(), yield this.updateLocalTrackStats(), yield this.updateRemoteTrackStats();
    });
    this.updateLocalPeerStats = () => c(this, null, function* () {
      var p2, h2, g2, T, E2, A;
      let e17 = this.getLocalPeerStats(), t12;
      try {
        t12 = yield (h2 = (p2 = this.getStats).publish) == null ? void 0 : h2.call(p2);
      } catch (w) {
        this.eventBus.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed("PUBLISH", w.message))), d.w(this.TAG, "Error in getting publish stats", w);
      }
      let i10 = t12 && Rr("publish", t12, e17), r10;
      try {
        r10 = yield (T = (g2 = this.getStats).subscribe) == null ? void 0 : T.call(g2);
      } catch (w) {
        this.eventBus.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed("SUBSCRIBE", w.message))), d.w(this.TAG, "Error in getting subscribe stats", w);
      }
      let s9 = r10 && Rr("subscribe", r10, e17), { packetsLost: o14, jitter: n9 } = Ys(r10), l5 = Hr(o14, (E2 = e17 == null ? void 0 : e17.subscribe) == null ? void 0 : E2.packetsLost, s9 == null ? void 0 : s9.timestamp, (A = e17 == null ? void 0 : e17.subscribe) == null ? void 0 : A.timestamp), u3 = s9 && Object.assign(s9, { packetsLostRate: l5, jitter: n9, packetsLost: o14 });
      this.peerStats[this.localPeerID] = { publish: i10, subscribe: u3 };
    });
    this.updateRemoteTrackStats = () => c(this, null, function* () {
      var i10;
      let e17 = Array.from(this.store.getTracksMap().values()).filter((r10) => r10 instanceof O || r10 instanceof te), t12 = e17.map((r10) => r10.trackId);
      Object.keys(this.remoteTrackStats).forEach((r10) => {
        t12.includes(r10) || delete this.remoteTrackStats[r10];
      });
      for (let r10 of e17) {
        let s9 = r10.peerId && ((i10 = this.store.getPeerById(r10.peerId)) == null ? void 0 : i10.name), o14 = this.getRemoteTrackStats(r10.trackId), n9 = yield zs(this.eventBus, r10, s9, o14);
        n9 && (this.remoteTrackStats[r10.trackId] = n9);
      }
    });
    this.updateLocalTrackStats = () => c(this, null, function* () {
      var i10;
      let e17 = this.store.getLocalPeerTracks().reduce((r10, s9) => (r10[s9.getTrackIDBeingSent()] = s9, r10), {}), t12 = Xs(Object.keys(this.localTrackStats), Object.keys(e17));
      for (let r10 of t12) {
        let s9 = e17[r10];
        if (s9) {
          let o14 = (i10 = this.store.getLocalPeer()) == null ? void 0 : i10.name, n9 = yield Qs(this.eventBus, s9, o14, this.localTrackStats[r10]);
          n9 && (this.localTrackStats[r10] = n9);
        } else delete this.localTrackStats[r10];
      }
    });
    var r9;
    this.localPeerID = (r9 = this.store.getLocalPeer()) == null ? void 0 : r9.peerId;
  }
};
var ii = class {
  constructor(e16, t11, i9, r9) {
    this.store = e16;
    this.eventBus = t11;
    this.publishConnection = i9;
    this.subscribeConnection = r9;
    this.TAG = "[HMSWebrtcInternals]";
    this.interval = 1e3;
    this.isMonitored = false;
    this.handleStatsUpdate = () => c(this, null, function* () {
      var e17;
      yield (e17 = this.hmsStats) == null ? void 0 : e17.updateStats(), this.eventBus.statsUpdate.publish(this.hmsStats);
    });
  }
  getPublishPeerConnection() {
    return this.publishConnection;
  }
  getSubscribePeerConnection() {
    return this.subscribeConnection;
  }
  getCurrentStats() {
    return this.hmsStats;
  }
  onStatsChange(e16) {
    return this.eventBus.statsUpdate.subscribe(e16), () => {
      this.eventBus.statsUpdate.unsubscribe(e16);
    };
  }
  setPeerConnections({ publish: e16, subscribe: t11 }) {
    var i9, r9;
    this.publishConnection = e16, this.subscribeConnection = t11, this.hmsStats = new ti({ publish: (i9 = this.publishConnection) == null ? void 0 : i9.getStats.bind(this.publishConnection), subscribe: (r9 = this.subscribeConnection) == null ? void 0 : r9.getStats.bind(this.subscribeConnection) }, this.store, this.eventBus);
  }
  start() {
    return c(this, null, function* () {
      if (this.isMonitored) {
        d.d(this.TAG, "Already started");
        return;
      }
      this.stop(), this.isMonitored = true, d.d(this.TAG, "Starting Webrtc Stats Monitor"), this.startLoop().then(() => d.d(this.TAG, "Stopping Webrtc Stats Monitor")).catch((e16) => {
        this.eventBus.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed("PUBLISH", e16.message))), d.e(this.TAG, e16.message);
      });
    });
  }
  stop() {
    this.isMonitored = false;
  }
  startLoop() {
    return c(this, null, function* () {
      for (; this.isMonitored; ) yield this.handleStatsUpdate(), yield J(this.interval);
    });
  }
  cleanup() {
    this.stop(), this.eventBus.statsUpdate.removeAllListeners();
  }
};
var Je = class {
  constructor({ peerId: e16, name: t11, isLocal: i9, customerUserId: r9, metadata: s9, role: o14, joinedAt: n9, groups: l5, realtime: u3, type: p2 }) {
    this.customerUserId = "";
    this.metadata = "";
    this.auxiliaryTracks = [];
    this.name = t11, this.peerId = e16, this.isLocal = i9, this.customerUserId = r9, this.metadata = s9, this.joinedAt = n9, this.groups = l5, this.realtime = u3, this.type = p2, o14 && (this.role = o14);
  }
  get isHandRaised() {
    var e16;
    return !!((e16 = this.groups) != null && e16.includes(Se));
  }
  updateRole(e16) {
    this.role = e16;
  }
  updateName(e16) {
    this.name = e16;
  }
  updateNetworkQuality(e16) {
    this.networkQuality = e16;
  }
  updateMetadata(e16) {
    this.metadata = e16;
  }
  updateGroups(e16) {
    this.groups = e16;
  }
  toString() {
    var e16, t11, i9, r9;
    return `{
      name: ${this.name};
      role: ${(e16 = this.role) == null ? void 0 : e16.name};
      peerId: ${this.peerId};
      customerUserId: ${this.customerUserId};
      ${this.audioTrack ? `audioTrack: ${(t11 = this.audioTrack) == null ? void 0 : t11.trackId};` : ""}
      ${this.videoTrack ? `videoTrack: ${(i9 = this.videoTrack) == null ? void 0 : i9.trackId};` : ""}
      groups: ${(r9 = this.groups) == null ? void 0 : r9.join()}
    }`;
  }
};
var Qe = class {
};
Qe.makePeerId = () => v4_default();
var ht = class extends Je {
  constructor(t11) {
    super(v(m({}, t11), { peerId: Qe.makePeerId(), isLocal: true }));
    this.isLocal = true;
    this.auxiliaryTracks = [];
    this.asRole = t11.asRole;
  }
  isInPreview() {
    return !!this.asRole;
  }
  toString() {
    var t11, i9, r9;
    return `{
      name: ${this.name};
      role: ${(t11 = this.role) == null ? void 0 : t11.name};
      peerId: ${this.peerId};
      customerUserId: ${this.customerUserId};
      ${this.asRole ? `asRole: ${this.asRole.name};` : ""}
      ${this.audioTrack ? `audioTrack: ${(i9 = this.audioTrack) == null ? void 0 : i9.trackId};` : ""}
      ${this.videoTrack ? `videoTrack: ${(r9 = this.videoTrack) == null ? void 0 : r9.trackId};` : ""}
    }`;
  }
};
var mt = class extends Je {
  constructor(t11) {
    super(v(m({}, t11), { isLocal: false }));
    this.isLocal = false;
    this.auxiliaryTracks = [];
    this.fromRoomState = false;
    this.fromRoomState = !!t11.fromRoomState;
  }
};
var Re = (a12, e16) => new mt({ peerId: a12.peer_id, name: a12.info.name, role: e16.getPolicyForRole(a12.role), customerUserId: a12.info.user_id, metadata: a12.info.data, groups: a12.groups, type: a12.info.type });
var ri = class {
  constructor(e16, t11, i9) {
    this.transport = e16;
    this.store = t11;
    this.options = i9;
    this.isEnd = false;
    this.iterator = null;
    this.total = 0;
    this.defaultPaginationLimit = 10;
  }
  validateConnection() {
    if (!this.transport || !this.store) throw Error("Use usePaginatedParticipants or hmsActions.getPeerListIterator after preview or join has happened");
  }
  hasNext() {
    return !this.isEnd;
  }
  getTotal() {
    return this.total;
  }
  findPeers() {
    return c(this, null, function* () {
      var t11;
      this.validateConnection();
      let e16 = yield this.transport.signal.findPeers(v(m({}, this.options || {}), { limit: ((t11 = this.options) == null ? void 0 : t11.limit) || this.defaultPaginationLimit }));
      return this.updateState(e16), this.processPeers(e16.peers);
    });
  }
  next() {
    return c(this, null, function* () {
      var t11;
      this.validateConnection();
      let e16;
      return !this.iterator && !this.isEnd ? yield this.findPeers() : this.iterator ? (e16 = yield this.transport.signal.peerIterNext({ iterator: this.iterator, limit: ((t11 = this.options) == null ? void 0 : t11.limit) || this.defaultPaginationLimit }), this.updateState(e16), this.processPeers(e16.peers)) : [];
    });
  }
  processPeers(e16) {
    let t11 = [];
    return e16.forEach((i9) => {
      let r9 = Re(i9, this.store);
      t11.push(r9);
    }), t11;
  }
  updateState(e16) {
    this.isEnd = e16.eof, this.total = e16.total, e16.iterator && (this.iterator = e16.iterator);
  }
};
var ze = class {
  constructor(e16) {
    this.TAG = "[AudioContextManager]";
    this.audioContext = new AudioContext(), this.source = this.audioContext.createMediaElementSource(e16), this.source.connect(this.audioContext.destination);
  }
  resumeContext() {
    return c(this, null, function* () {
      this.audioContext.state === "suspended" && (yield this.audioContext.resume(), d.d(this.TAG, "AudioContext is resumed"));
    });
  }
  getAudioTrack() {
    return this.destinationNode && this.source.disconnect(this.destinationNode), this.destinationNode = this.audioContext.createMediaStreamDestination(), this.source.connect(this.destinationNode), this.destinationNode.stream.getAudioTracks()[0];
  }
  cleanup() {
    this.audioContext.state !== "closed" && this.audioContext.close().catch((e16) => {
      d.d(this.TAG, "AudioContext close error", e16.message);
    });
  }
};
var Ie = class extends import_eventemitter2.EventEmitter2 {
  on(e16, t11) {
    return super.on(e16, t11);
  }
  off(e16, t11) {
    return super.off(e16, t11);
  }
  emit(e16, t11) {
    return super.emit(e16, t11);
  }
  listeners(e16) {
    return super.listeners(e16);
  }
};
var si = class extends Ie {
  constructor() {
    super(...arguments);
    this.audioElement = null;
    this.TAG = "[PlaylistAudioManager]";
    this.seeked = false;
  }
  play(t11) {
    return c(this, null, function* () {
      return this.audioElement = this.getAudioElement(), new Promise((i9, r9) => {
        this.audioElement = this.getAudioElement(), this.audioElement.src = t11, this.seeked = false, this.audioElement.onerror = () => {
          let s9 = `Error loading ${t11}`;
          d.e(this.TAG, s9), this.stop(), r9(s9);
        }, this.audioElement.oncanplaythrough = () => c(this, null, function* () {
          try {
            if (!this.audioElement) return;
            if (this.audioContextManager.resumeContext(), this.track) this.seeked ? this.seeked = false : (yield this.audioElement.play(), i9([this.track]));
            else {
              yield this.audioElement.play();
              let s9 = this.audioContextManager.getAudioTrack();
              this.track = s9, i9([s9]);
            }
          } catch (s9) {
            d.e(this.TAG, "Error playing audio", t11, s9.message), r9(s9);
          }
        }), this.audioElement.onseeked = () => {
          this.seeked = true;
        };
      });
    });
  }
  getTracks() {
    return this.track ? [this.track.id] : [];
  }
  getElement() {
    return this.audioElement || (this.audioElement = this.getAudioElement()), this.audioElement;
  }
  stop() {
    var t11, i9, r9;
    (t11 = this.audioElement) == null || t11.pause(), (i9 = this.audioElement) == null || i9.removeAttribute("src"), this.audioElement = null, (r9 = this.audioContextManager) == null || r9.cleanup(), this.track = void 0;
  }
  getAudioElement() {
    if (this.audioElement) return this.audioElement;
    let t11 = document.createElement("audio");
    return t11.crossOrigin = "anonymous", t11.addEventListener("timeupdate", (i9) => this.emit("progress", i9)), t11.addEventListener("ended", () => {
      this.emit("ended", null);
    }), this.audioContextManager = new ze(t11), t11;
  }
};
var ai = class extends Ie {
  constructor() {
    super(...arguments);
    this.TAG = "[PlaylistVideoManager]";
    this.videoElement = null;
    this.canvasContext = null;
    this.tracks = [];
    this.DEFAUL_FPS = 24;
    this.seeked = false;
    this.drawImage = () => {
      var t11, i9, r9;
      this.videoElement && !this.videoElement.paused && !this.videoElement.ended && ((r9 = this.canvasContext) == null || r9.drawImage(this.videoElement, 0, 0, (t11 = this.canvas) == null ? void 0 : t11.width, (i9 = this.canvas) == null ? void 0 : i9.height), this.timer = setTimeout(() => {
        this.drawImage();
      }, 1e3 / this.DEFAUL_FPS));
    };
  }
  play(t11) {
    return this.videoElement = this.getVideoElement(), this.createCanvas(), new Promise((i9, r9) => {
      this.videoElement = this.getVideoElement(), this.videoElement.src = t11, this.seeked = false, this.videoElement.onerror = () => {
        let s9 = `Error loading ${t11}`;
        d.e(this.TAG, s9), this.stop(), r9(s9);
      }, this.videoElement.oncanplaythrough = () => c(this, null, function* () {
        var s9, o14, n9;
        try {
          if (!this.videoElement) return;
          if (this.canvas.width = this.videoElement.videoWidth, this.canvas.height = this.videoElement.videoHeight, this.tracks.length === 0) {
            this.clearCanvasAndTracks();
            let l5 = this.canvas.captureStream();
            if (!l5) {
              d.e(this.TAG, "Browser does not support captureStream");
              return;
            }
            this.videoElement.onplay = this.drawImage, yield this.audioContextManager.resumeContext(), yield this.videoElement.play();
            let u3 = this.audioContextManager.getAudioTrack();
            l5.addTrack(u3), l5.getTracks().forEach((p2) => {
              this.tracks.push(p2);
            }), i9(this.tracks);
          } else this.seeked ? (this.seeked = false, (n9 = this.canvasContext) == null || n9.drawImage(this.videoElement, 0, 0, (s9 = this.canvas) == null ? void 0 : s9.width, (o14 = this.canvas) == null ? void 0 : o14.height)) : (yield this.videoElement.play(), i9(this.tracks));
        } catch (l5) {
          d.e(this.TAG, "Error playing video", t11, l5.message), r9(l5);
        }
      }), this.videoElement.onseeked = () => {
        this.seeked = true;
      };
    });
  }
  getTracks() {
    return this.tracks.map((t11) => t11.id);
  }
  getElement() {
    return this.videoElement || (this.videoElement = this.getVideoElement()), this.videoElement;
  }
  stop() {
    var t11, i9, r9;
    (t11 = this.videoElement) == null || t11.pause(), (i9 = this.videoElement) == null || i9.removeAttribute("src"), this.videoElement = null, (r9 = this.audioContextManager) == null || r9.cleanup(), this.clearCanvasAndTracks();
  }
  clearCanvasAndTracks() {
    var t11;
    this.tracks = [], (t11 = this.canvasContext) == null || t11.clearRect(0, 0, this.canvas.width, this.canvas.height), clearTimeout(this.timer);
  }
  getVideoElement() {
    if (this.videoElement) return this.videoElement;
    let t11 = document.createElement("video");
    return t11.crossOrigin = "anonymous", t11.addEventListener("timeupdate", (i9) => this.emit("progress", i9)), t11.addEventListener("ended", () => {
      this.emit("ended", null);
    }), this.audioContextManager = new ze(t11), t11;
  }
  createCanvas() {
    this.canvas || (this.canvas = document.createElement("canvas"), this.canvasContext = this.canvas.getContext("2d"));
  }
};
var oi = { audio: { list: [], currentIndex: -1, isAutoplayOn: true }, video: { list: [], currentIndex: -1, isAutoplayOn: true } };
var St = class extends Ie {
  constructor(t11, i9) {
    super();
    this.sdk = t11;
    this.eventBus = i9;
    this.state = { audio: m({}, oi.audio), video: m({}, oi.video) };
    this.TAG = "[PlaylistManager]";
    this.handlePausePlaylist = (r9) => c(this, [r9], function* ({ enabled: t12, track: i10 }) {
      var o14;
      if (t12) return;
      let s9;
      i10.source === "audioplaylist" && (s9 = "audio"), i10.source === "videoplaylist" && (s9 = "video"), s9 && ((o14 = this.getElement(s9)) == null || o14.pause());
    });
    this.addTrack = (t12, i10) => c(this, null, function* () {
      yield this.sdk.addTrack(t12, i10), d.d(this.TAG, "Playlist track added", jt(t12));
    });
    this.removeTrack = (t12) => c(this, null, function* () {
      yield this.sdk.removeTrack(t12, true), d.d(this.TAG, "Playlist track removed", t12);
    });
    this.audioManager = new si(), this.videoManager = new ai(), this.addListeners();
  }
  getList(t11 = "audio") {
    return this.state[t11].list;
  }
  setList(t11) {
    if (!t11 || t11.length === 0) {
      d.w(this.TAG, "Please pass in a list of HMSPlaylistItem's");
      return;
    }
    t11.forEach((i9) => {
      this.state[i9.type].list.find((r9) => r9.id === i9.id) || this.state[i9.type].list.push(i9);
    });
  }
  clearList(t11) {
    return c(this, null, function* () {
      this.isPlaying(t11) && (yield this.stop(t11)), this.state[t11].list = [];
    });
  }
  removeItem(t11, i9) {
    return c(this, null, function* () {
      let { list: r9, currentIndex: s9 } = this.state[i9], o14 = r9.findIndex((n9) => t11 === n9.id);
      return o14 > -1 ? (s9 === o14 && this.isPlaying(i9) && (yield this.stop(i9)), r9.splice(o14, 1), true) : false;
    });
  }
  seek(t11, i9 = "audio") {
    let { currentIndex: r9 } = this.state[i9];
    if (r9 === -1) throw S.PlaylistErrors.NoEntryToPlay("PLAYLIST", "No item is currently playing");
    let s9 = this.getElement(i9);
    if (s9) {
      let o14 = Math.max(s9.currentTime + t11, 0);
      s9.currentTime = Math.min(o14, s9.duration);
    }
  }
  seekTo(t11, i9 = "audio") {
    let { currentIndex: r9 } = this.state[i9];
    if (r9 === -1) throw S.PlaylistErrors.NoEntryToPlay("PLAYLIST", "No item is currently playing");
    if (t11 < 0) throw Error("value cannot be negative");
    let s9 = this.getElement(i9);
    s9 && (s9.currentTime = Math.min(t11, s9.duration));
  }
  setVolume(t11, i9 = "audio") {
    if (t11 < 0 || t11 > 100) throw Error("Please pass a valid number between 0-100");
    let r9 = this.getElement(i9);
    r9 && (r9.volume = t11 * 0.01);
  }
  getVolume(t11 = "audio") {
    let i9 = this.getElement(t11);
    return i9 ? Math.floor(i9.volume * 100) : 0;
  }
  getCurrentTime(t11 = "audio") {
    let i9 = this.getElement(t11);
    return (i9 == null ? void 0 : i9.currentTime) || 0;
  }
  getCurrentIndex(t11 = "audio") {
    return this.state[t11].currentIndex;
  }
  getCurrentProgress(t11 = "audio") {
    var n9;
    let { list: i9, currentIndex: r9 } = this.state[t11], s9 = (n9 = i9[r9]) == null ? void 0 : n9.url, o14 = this.getElement(t11);
    return !s9 || !o14 ? 0 : Math.floor(100 * (o14.currentTime / o14.duration));
  }
  getCurrentSelection(t11 = "audio") {
    let { list: i9, currentIndex: r9 } = this.state[t11];
    if (r9 !== -1) return i9[r9];
  }
  isPlaying(t11 = "audio") {
    let i9 = this.getElement(t11);
    return !!i9 && !i9.paused;
  }
  setIsAutoplayOn(t11 = "audio", i9) {
    this.state[t11].isAutoplayOn = i9;
  }
  getPlaybackRate(t11 = "audio") {
    let i9 = this.getElement(t11);
    return i9 ? i9.playbackRate : 1;
  }
  setPlaybackRate(t11 = "audio", i9) {
    if (i9 < 0.25 || i9 > 2) throw Error("Please pass a value between 0.25 and 2.0");
    let r9 = this.getElement(t11);
    r9 && (r9.playbackRate = i9);
  }
  setEnabled(s9, o14) {
    return c(this, arguments, function* (t11, { id: i9, type: r9 = "audio" }) {
      let l5 = this.state[r9].list.findIndex((p2) => p2.id === i9);
      if (!i9 || l5 === -1) {
        d.w(this.TAG, "Pass a valid id");
        return;
      }
      let u3 = this.state[r9].list[l5].url;
      t11 ? yield this.play(u3, r9) : yield this.pause(u3, r9), this.state[r9].currentIndex = l5, this.setDuration(r9);
    });
  }
  playNext() {
    return c(this, arguments, function* (t11 = "audio") {
      let { list: i9, currentIndex: r9 } = this.state[t11];
      if (r9 >= i9.length - 1) throw S.PlaylistErrors.NoEntryToPlay("PLAYLIST", "Reached end of playlist");
      yield this.play(i9[r9 + 1].url, t11), this.state[t11].currentIndex = r9 + 1, this.setDuration(t11);
    });
  }
  playPrevious() {
    return c(this, arguments, function* (t11 = "audio") {
      let { list: i9, currentIndex: r9 } = this.state[t11];
      if (r9 <= 0) throw S.PlaylistErrors.NoEntryToPlay("PLAYLIST", "Reached start of playlist");
      yield this.play(i9[r9 - 1].url, t11), this.state[t11].currentIndex = r9 - 1, this.setDuration(t11);
    });
  }
  stop() {
    return c(this, arguments, function* (t11 = "audio") {
      var r9;
      let i9 = t11 === "audio" ? this.audioManager : this.videoManager;
      (r9 = i9.getElement()) == null || r9.pause(), yield this.removeTracks(t11), i9.stop(), this.state[t11].currentIndex = -1;
    });
  }
  cleanup() {
    this.state = { audio: m({}, oi.audio), video: m({}, oi.video) }, this.eventBus.localAudioEnabled.unsubscribe(this.handlePausePlaylist), this.eventBus.localVideoEnabled.unsubscribe(this.handlePausePlaylist), this.audioManager.stop(), this.videoManager.stop();
  }
  onProgress(t11) {
    this.videoManager.on("progress", () => {
      try {
        t11({ type: "video", progress: this.getCurrentProgress("video") });
      } catch (i9) {
        d.e(this.TAG, "Error in onProgress callback");
      }
    }), this.audioManager.on("progress", () => {
      try {
        t11({ type: "audio", progress: this.getCurrentProgress("audio") });
      } catch (i9) {
        d.e(this.TAG, "Error in onProgress callback");
      }
    });
  }
  onNewTrackStart(t11) {
    this.on("newTrackStart", t11);
  }
  onPlaylistEnded(t11) {
    this.on("playlistEnded", t11);
  }
  onCurrentTrackEnded(t11) {
    this.on("currentTrackEnded", t11);
  }
  getElement(t11 = "audio") {
    return t11 === "audio" ? this.audioManager.getElement() : this.videoManager.getElement();
  }
  removeTracks() {
    return c(this, arguments, function* (t11 = "audio") {
      let r9 = (t11 === "audio" ? this.audioManager : this.videoManager).getTracks();
      for (let s9 of r9) yield this.removeTrack(s9);
    });
  }
  play(r9) {
    return c(this, arguments, function* (t11, i9 = "audio") {
      let s9 = i9 === "audio" ? this.audioManager : this.videoManager, o14 = s9.getElement();
      if (this.isItemCurrentlyPlaying(t11, i9)) {
        d.w(this.TAG, `The ${i9} is currently playing`);
        return;
      }
      if (o14 != null && o14.src.includes(t11)) yield o14.play();
      else {
        o14 == null || o14.pause();
        let n9 = yield s9.play(t11);
        for (let l5 of n9) yield this.addTrack(l5, i9 === "audio" ? "audioplaylist" : "videoplaylist");
      }
    });
  }
  isItemCurrentlyPlaying(t11, i9) {
    let r9 = this.getElement(i9);
    return !!(r9 && !r9.paused && r9.src.includes(t11));
  }
  setDuration(t11 = "audio") {
    let i9 = this.getElement(t11), { list: r9, currentIndex: s9 } = this.state[t11];
    r9[s9] && (r9[s9].duration = (i9 == null ? void 0 : i9.duration) || 0), this.emit("newTrackStart", r9[s9]);
  }
  pause(r9) {
    return c(this, arguments, function* (t11, i9 = "audio") {
      let s9 = this.getElement(i9);
      s9 && !s9.paused && s9.src.includes(t11) ? (s9.pause(), d.d(this.TAG, "paused url", t11)) : d.w(this.TAG, "The passed in url is not currently playing");
    });
  }
  addListeners() {
    this.audioManager.on("ended", () => this.handleEnded("audio")), this.videoManager.on("ended", () => this.handleEnded("video")), this.eventBus.localAudioEnabled.subscribe(this.handlePausePlaylist), this.eventBus.localVideoEnabled.subscribe(this.handlePausePlaylist);
  }
  handleEnded() {
    return c(this, arguments, function* (t11 = "audio") {
      let { list: i9, currentIndex: r9, isAutoplayOn: s9 } = this.state[t11];
      r9 === i9.length - 1 ? (yield this.stop(t11), this.emit("playlistEnded", t11)) : s9 ? this.playNext(t11) : yield this.pause(i9[r9].url, t11), this.emit("currentTrackEnded", i9[r9]);
    });
  }
};
var gt = "HMS-Store:";
var k = class {
  static v(e16, ...t11) {
    this.log(0, e16, ...t11);
  }
  static d(...e16) {
    this.log(1, ...e16);
  }
  static i(...e16) {
    this.log(2, ...e16);
  }
  static w(...e16) {
    this.log(3, ...e16);
  }
  static e(...e16) {
    this.log(6, ...e16);
  }
  static time(e16) {
    this.log(4, "[HMSPerformanceTiming]", e16);
  }
  static timeEnd(e16) {
    this.log(5, "[HMSPerformanceTiming]", e16, e16);
  }
  static cleanup() {
    performance.clearMarks(), performance.clearMeasures();
  }
  static log(e16, ...t11) {
    if (!(this.level.valueOf() > e16.valueOf())) switch (e16) {
      case 0: {
        console.log(gt, ...t11);
        break;
      }
      case 1: {
        console.debug(gt, ...t11);
        break;
      }
      case 2: {
        console.info(gt, ...t11);
        break;
      }
      case 3: {
        console.warn(gt, ...t11);
        break;
      }
      case 6: {
        console.error(gt, ...t11);
        break;
      }
      case 4: {
        performance.mark(t11[1]);
        break;
      }
      case 5: {
        let i9 = t11[0], r9 = t11[1];
        try {
          let s9 = performance.measure(r9, r9);
          this.log(1, i9, r9, s9 == null ? void 0 : s9.duration), performance.clearMarks(r9), performance.clearMeasures(r9);
        } catch (s9) {
          this.log(1, i9, r9, s9);
        }
        break;
      }
    }
  }
};
k.level = 0;
var Cr = (a12, e16) => e16;
var Tt = (a12, e16) => e16;
var Zs = (a12, e16) => e16;
var fo = (a12, e16) => e16;
var vo = (a12, e16) => e16;
var W = createSelector([G, Cr], (a12, e16) => e16 ? a12[e16] : null);
var Lr = createSelector([D, Tt], (a12, e16) => e16 ? a12[e16] : null);
var Mo = createSelector([D, Tt], (a12, e16) => {
  if (!e16) return null;
  let t11 = a12[e16];
  return (t11 == null ? void 0 : t11.type) === "video" ? t11 : null;
});
var yo = createSelector([D, Tt], (a12, e16) => {
  if (!e16) return null;
  let t11 = a12[e16];
  return (t11 == null ? void 0 : t11.type) === "audio" ? t11 : null;
});
var ko = createSelector([D, Tt], (a12, e16) => {
  if (!e16) return null;
  let t11 = a12[e16];
  return (t11 == null ? void 0 : t11.type) === "audio" && (t11 == null ? void 0 : t11.source) === "screen" ? t11 : null;
});
var Eo = createSelector([D, Tt], (a12, e16) => {
  if (!e16) return null;
  let t11 = a12[e16];
  return (t11 == null ? void 0 : t11.type) === "video" && (t11 == null ? void 0 : t11.source) === "screen" ? t11 : null;
});
var Po = createSelector([ss, vo], (a12, e16) => e16 ? a12[e16] : null);
var Q = R(W);
var um = R(createSelector([ir, fo], (a12, e16) => {
  if (a12) return e16 ? a12[e16] : a12;
}));
function pm(a12) {
  return (e16) => {
    if (e16.sessionStore) return a12 ? e16.sessionStore[a12] : e16.sessionStore;
  };
}
var hm = (...a12) => createSelector([ir], (e16) => {
  if (e16) {
    if (a12 && a12.length > 0) {
      let t11 = e16;
      for (let i9 of a12) {
        if (!i9) return t11;
        t11 = t11 == null ? void 0 : t11[i9];
      }
      return t11;
    }
    return e16;
  }
});
var mm = R(createSelector(W, (a12) => a12 == null ? void 0 : a12.name));
var Sm = R(createSelector(W, (a12) => a12 == null ? void 0 : a12.type));
var ni = R(Lr);
var ea = R(Mo);
var gm = R(yo);
var Tm = R(ko);
var fm = R(Eo);
var bo = R((a12, e16) => {
  let t11 = W(a12, e16);
  if (t11 && t11.videoTrack && t11.videoTrack !== "") return a12.tracks[t11.videoTrack];
});
var Ao = R((a12, e16) => {
  let t11 = W(a12, e16);
  if (t11 && t11.audioTrack && t11.audioTrack !== "") return a12.tracks[t11.audioTrack];
});
var vm = bo;
var Mm = R((a12, e16) => {
  let t11 = W(a12, e16);
  return (t11 == null ? void 0 : t11.auxiliaryTracks.map((i9) => a12.tracks[i9])) || [];
});
var ta = (a12, e16) => e16 ? a12.speakers[e16] : null;
var ym = R(createSelector(ta, (a12) => (a12 == null ? void 0 : a12.audioLevel) || 0));
var Ro = (a12, e16) => {
  let t11 = Ao(e16)(a12);
  return ta(a12, t11 == null ? void 0 : t11.id);
};
var km = R(createSelector(Ro, (a12) => (a12 == null ? void 0 : a12.audioLevel) || 0));
var Em = R((a12, e16) => {
  if (e16) return a12.connectionQualities[e16];
});
var Pm = R((a12, e16) => {
  let t11 = W(a12, e16);
  if (t11) {
    let i9 = t11 == null ? void 0 : t11.auxiliaryTracks.find((r9) => tt(a12.tracks[r9]));
    return i9 ? a12.tracks[i9] : void 0;
  }
});
var bm = R(createSelector(D, W, (a12, e16) => {
  let t11 = e16 == null ? void 0 : e16.auxiliaryTracks.find((i9) => {
    let r9 = a12[i9];
    return rt(r9) && it(r9);
  });
  return t11 ? a12[t11] : void 0;
}));
var Am = R(createSelector(D, W, (a12, e16) => {
  let t11 = e16 == null ? void 0 : e16.auxiliaryTracks.find((i9) => {
    let r9 = a12[i9];
    return rt(r9) && tt(r9);
  });
  return t11 ? a12[t11] : void 0;
}));
var Rm = R(createSelector(D, W, (a12, e16) => {
  let t11 = e16 == null ? void 0 : e16.auxiliaryTracks.find((i9) => {
    let r9 = a12[i9];
    return $t(r9) && tt(r9);
  });
  return t11 ? a12[t11] : void 0;
}));
var ia = R(createSelector(D, W, (a12, e16) => He(a12, e16)));
var Im = (a12) => createSelector(ia(a12), (e16) => e16.video);
var ra = (a12) => createSelector(ia(a12), (e16) => e16.audio);
var Hm = R((a12, e16) => {
  let t11 = W(a12, e16);
  return Ue(a12, t11 == null ? void 0 : t11.audioTrack);
});
var Cm = R((a12, e16) => {
  let t11 = W(a12, e16);
  return Ue(a12, t11 == null ? void 0 : t11.videoTrack);
});
var sa = R((a12, e16) => {
  if (e16 && a12.tracks[e16]) return a12.tracks[e16].volume === 0;
});
var Lm = R((a12, e16) => {
  let t11 = W(a12, e16);
  return sa(t11 == null ? void 0 : t11.audioTrack)(a12);
});
var wm = R((a12, e16) => {
  let t11 = ra(e16)(a12);
  return sa(t11 == null ? void 0 : t11.id)(a12);
});
var aa = R((a12, e16) => {
  let t11 = Lr(a12, e16);
  if (t11) {
    if (t11.type !== "audio") {
      k.w("Please pass audio track here");
      return;
    }
    return t11.volume;
  }
});
var Dm = R((a12, e16) => {
  let t11 = W(a12, e16);
  return aa(t11 == null ? void 0 : t11.audioTrack)(a12);
});
var _m = R((a12, e16) => {
  let t11 = ra(e16)(a12);
  return aa(t11 == null ? void 0 : t11.id)(a12);
});
var Nm = R((a12, e16) => {
  let t11 = Lr(a12, e16);
  if (t11) {
    if (t11.type !== "video") {
      k.w("Please pass video track here");
      return;
    }
    return t11.layer;
  }
});
var oa = createSelector([at, ue, Cr], (a12, e16, t11) => {
  if (t11) return a12.filter((i9) => {
    var r9;
    return !i9.recipientPeer && !((r9 = i9.recipientRoles) != null && r9.length) || i9.sender && ![e16, t11].includes(i9.sender) ? false : [e16, t11].includes(i9.recipientPeer);
  });
});
var na = createSelector([at, Zs], (a12, e16) => {
  if (e16) return a12.filter((t11) => {
    var i9, r9;
    return (i9 = t11.recipientRoles) != null && i9.length ? (r9 = t11.recipientRoles) == null ? void 0 : r9.includes(e16) : false;
  });
});
var Io = createSelector(at, (a12) => a12.filter((e16) => {
  var t11;
  return !e16.recipientPeer && !((t11 = e16.recipientRoles) != null && t11.length);
}));
var Ho = createSelector([na, Zs], (a12) => a12 ? a12.filter((e16) => !e16.read).length : 0);
var Co = createSelector([oa, Cr], (a12) => a12 ? a12.filter((e16) => !e16.read).length : 0);
var Om = createSelector(Io, (a12) => a12.filter((e16) => !e16.read).length);
var xm = R(oa);
var Um = R(na);
var Bm = R(Ho);
var Vm = R(Co);
var Fm = (a12) => createSelector([oe], (e16) => e16.filter((t11) => t11.roleName === a12));
var Gm = (a12) => createSelector([oe], (e16) => e16.filter((t11) => t11.roleName ? a12.includes(t11.roleName) : false));
var Wm = (a12) => createSelector(Q(a12), (e16) => {
  try {
    return e16 != null && e16.metadata && e16.metadata !== "" ? JSON.parse(e16.metadata) : {};
  } catch (t11) {
    return console.error("cannot parse peer metadata", t11), {};
  }
});
var $m = (a12) => createSelector(Q(a12), (e16) => !!(e16 != null && e16.isHandRaised));
var Km = (a12) => createSelector(Q(a12), (e16) => e16 == null ? void 0 : e16.name);
var ca = R(Po);
var qm = (a12) => createSelector(Kt, (e16) => e16[a12]);
var Ym = createSelector([G, D], (a12, e16) => Object.values(a12).map((i9) => {
  var r9;
  return { peer: i9, isAudioEnabled: i9.audioTrack ? (r9 = e16[i9.audioTrack]) == null ? void 0 : r9.enabled : false };
}));
var Lo = (a12) => a12.roleChangeRequests[0] || null;
var Xm = createSelector([Lo, G, ne], (a12, e16, t11) => a12 ? { requestedBy: a12.requestedBy ? e16[a12.requestedBy] : void 0, role: t11[a12.roleName], token: a12.token } : null);
var Zm = createSelector([qt], (a12) => st(a12));
var eS = createSelector([is], (a12) => st(a12));
var wo = (a12) => createSelector([ne], (e16) => e16[a12]);
var aS = (a12) => createSelector(wo(a12), (e16) => st(e16));
var Do = createSelector([q, D], (a12, e16) => {
  let t11 = null;
  return a12 && (t11 = e16[a12]), (t11 == null ? void 0 : t11.plugins) || [];
});
var _o = createSelector([Z, D], (a12, e16) => {
  let t11 = null;
  return a12 && (t11 = e16[a12]), (t11 == null ? void 0 : t11.plugins) || [];
});
var oS = (a12) => createSelector([Do], (e16) => e16.includes(a12));
var nS = (a12) => createSelector([_o], (e16) => e16.includes(a12));
var cS = (a12) => createSelector(oe, (e16) => e16.find(a12));
var dS = (a12) => createSelector(oe, (e16) => e16.filter(a12));
var lS = (a12) => createSelector(B, (e16) => e16.joinedAt && Date.now() - e16.joinedAt.getTime() <= a12);
var di = { 0: "PEER_JOINED", 1: "PEER_LEFT", 8: "ROLE_UPDATED", 10: "NAME_UPDATED", 11: "METADATA_UPDATED", 12: "HAND_RAISE_CHANGED" };
var ft = { 0: "TRACK_ADDED", 1: "TRACK_REMOVED", 2: "TRACK_MUTED", 3: "TRACK_UNMUTED", 5: "TRACK_DEGRADED", 6: "TRACK_RESTORED", 4: "TRACK_DESCRIPTION_CHANGED" };
var li = { 0: "POLL_CREATED", 1: "POLL_STARTED", 2: "POLL_STOPPED", 4: "POLL_VOTES_UPDATED", 3: "POLLS_LIST" };
var wr = "hmsNotification";
var ui = class {
  constructor(e16) {
    this.id = 0;
    this.onNotification = (e17, t11) => {
      let i9 = (r9) => {
        if (t11) {
          let s9;
          if (Array.isArray(t11) ? s9 = t11.includes(r9.type) : s9 = t11 === r9.type, !s9) return;
        }
        e17(r9);
      };
      return this.eventEmitter.addListener(wr, i9), () => {
        this.eventEmitter.removeListener(wr, i9);
      };
    };
    this.store = e16, this.eventEmitter = new import_eventemitter22.EventEmitter2({ maxListeners: Object.keys(tr).length });
  }
  sendPlaylistTrackEnded(e16) {
    let t11 = this.createNotification("PLAYLIST_TRACK_ENDED", e16, "info");
    this.emitEvent(t11);
  }
  sendDeviceChange(e16) {
    var i9;
    let t11 = this.createNotification("DEVICE_CHANGE_UPDATE", e16, e16.error ? "error" : "info", `Selected ${e16.type} device - ${(i9 = e16.selection) == null ? void 0 : i9.label}`);
    this.emitEvent(t11);
  }
  sendLeaveRoom(e16) {
    var r9;
    let t11 = (r9 = e16.requestedBy) == null ? void 0 : r9.name, i9 = this.createNotification(e16.roomEnded || !t11 ? "ROOM_ENDED" : "REMOVED_FROM_ROOM", e16, "info", `${e16.roomEnded ? "Room ended" : "Removed from room"} ${t11 ? `by ${t11}` : ""}`);
    this.emitEvent(i9);
  }
  sendPeerList(e16) {
    if (e16.length === 0) return;
    let t11 = this.createNotification("PEER_LIST", e16, "info");
    this.emitEvent(t11);
  }
  sendPeerUpdate(e16, t11) {
    let i9 = this.store.getState(Q(t11 == null ? void 0 : t11.id)) || t11, r9 = di[e16];
    if (r9 && i9) {
      let s9 = this.createNotification(r9, i9, "info");
      this.emitEvent(s9);
    }
  }
  sendTrackUpdate(e16, t11) {
    let i9 = this.store.getState(ni(t11)), r9 = ft[e16];
    if (r9) {
      let s9 = this.createNotification(r9, i9, "info");
      this.emitEvent(s9);
    }
  }
  sendMessageReceived(e16) {
    let t11 = this.createNotification("NEW_MESSAGE", e16, "info");
    this.emitEvent(t11);
  }
  sendError(e16) {
    let t11 = this.createNotification("ERROR", e16, "error");
    this.emitEvent(t11);
  }
  sendReconnecting(e16) {
    let t11 = this.createNotification("RECONNECTING", e16, "error");
    this.emitEvent(t11);
  }
  sendReconnected() {
    let e16 = this.createNotification("RECONNECTED", null, "info");
    this.emitEvent(e16);
  }
  sendChangeTrackStateRequest(e16) {
    let t11 = this.createNotification("CHANGE_TRACK_STATE_REQUEST", e16, "info");
    this.emitEvent(t11);
  }
  sendChangeMultiTrackStateRequest(e16) {
    let t11 = this.createNotification("CHANGE_MULTI_TRACK_STATE_REQUEST", e16, "info");
    this.emitEvent(t11);
  }
  sendPollUpdate(e16, t11) {
    let i9 = li[e16], r9 = this.store.getState(ca(t11));
    if (i9) {
      let s9 = this.createNotification(i9, r9, "info");
      this.emitEvent(s9);
    }
  }
  emitEvent(e16) {
    this.eventEmitter.emit(wr, e16);
  }
  createNotification(e16, t11, i9, r9 = "") {
    return this.id++, { id: this.id, type: e16, message: r9, data: t11, severity: i9 };
  }
};
var pi = class {
  constructor(e16) {
    this.queuedUpdates = {};
    this.timers = {};
    this.DEFAULT_INTERVAL_MS = 50;
    this.store = e16;
  }
  setState(e16, t11, i9 = this.DEFAULT_INTERVAL_MS) {
    this.queuedUpdates[t11] = this.queuedUpdates[t11] || [], this.queuedUpdates[t11].push(e16), !this.timers[t11] && (window ? this.timers[t11] = window.setTimeout(() => this.setStateBatched(t11), i9) : this.setStateBatched(t11));
  }
  setStateBatched(e16) {
    var t11;
    if (((t11 = this.queuedUpdates[e16]) == null ? void 0 : t11.length) > 0) {
      let i9 = (r9) => {
        this.queuedUpdates[e16].forEach((s9) => {
          try {
            s9(r9);
          } catch (o14) {
            k.w("failed to update store", o14);
          }
        });
      };
      console.time(`timed-${e16}`), this.store.namedSetState(i9, e16), console.timeEnd(`timed-${e16}`);
    }
    delete this.queuedUpdates[e16], window && this.timers[e16] && (window.clearTimeout(this.timers[e16]), delete this.timers[e16]);
  }
};
function da(a12) {
  return a12 instanceof te || a12 instanceof O;
}
var la = (a12, e16) => {
  let t11 = vt(Object.keys(a12), Object.keys(e16));
  for (let i9 of t11) {
    let r9 = a12[i9], s9 = e16[i9];
    Oe(r9, s9) ? (X(r9.auxiliaryTracks, s9.auxiliaryTracks) && (s9.auxiliaryTracks = r9.auxiliaryTracks), r9.groups && X(r9.groups, s9.groups) && (s9.groups = r9.groups), Object.assign(r9, s9)) : Nr(r9, s9) ? delete a12[i9] : hi(r9, s9) && (a12[i9] = s9);
  }
};
var ua = (a12, e16) => {
  let t11 = vt(Object.keys(a12), Object.keys(e16));
  for (let i9 of t11) {
    let r9 = a12[i9], s9 = e16[i9];
    Oe(r9, s9) ? (_r(r9, s9), Object.assign(r9, s9)) : Nr(r9, s9) ? delete a12[i9] : hi(r9, s9) && (a12[i9] = s9);
  }
};
var pa = (a12, e16) => {
  let t11 = vt(Object.keys(a12), Object.keys(e16));
  for (let i9 of t11) {
    let r9 = a12[i9], s9 = e16[i9];
    Oe(r9, s9) ? (r9.questions && X(r9.questions, s9.questions) && (s9.questions = r9.questions), Object.assign(r9, s9)) : hi(r9, s9) && (a12[i9] = s9);
  }
};
var Dr = (a12, e16) => {
  let t11 = vt(Object.keys(a12), Object.keys(e16));
  for (let i9 of t11) {
    let r9 = a12[i9], s9 = e16[i9];
    Oe(r9, s9) ? Object.assign(r9, s9) : Nr(r9, s9) ? delete a12[i9] : hi(r9, s9) && (a12[i9] = s9);
  }
};
var ha = (a12, e16, t11) => {
  let i9 = t11.reduce((s9, o14) => (s9[o14.firstTrackId] = Object.values(e16[o14.getTrackIDBeingSent()] || {}).sort((n9, l5) => !n9.rid || !l5.rid ? 0 : n9.rid < l5.rid ? -1 : 1), s9), {}), r9 = vt(Object.keys(a12), Object.keys(i9));
  for (let s9 of r9) {
    if (!i9[s9]) {
      delete a12[s9];
      continue;
    }
    a12[s9] = i9[s9];
  }
};
var _r = (a12, e16) => {
  a12.plugins && X(a12.plugins, e16.plugins) && (e16.plugins = a12.plugins), a12.type === "video" && a12.layerDefinitions && X(a12.layerDefinitions, e16.layerDefinitions) && (e16.layerDefinitions = a12.layerDefinitions);
};
var Oe = (a12, e16) => a12 && e16;
var Nr = (a12, e16) => a12 && !e16;
var hi = (a12, e16) => !a12 && e16;
var X = (a12, e16) => {
  if (a12 === e16 || a12.length === 0 && (e16 == null ? void 0 : e16.length) === 0) return true;
  if (!a12 || !e16 || a12.length !== e16.length) return false;
  for (let t11 = 0; t11 < a12.length; t11++) if (a12[t11] !== e16[t11]) return false;
  return true;
};
var vt = (a12, e16) => {
  let t11 = /* @__PURE__ */ new Set();
  for (let i9 of a12) t11.add(i9);
  for (let i9 of e16) t11.add(i9);
  return Array.from(t11);
};
var N = class a7 {
  static convertPeer(e16) {
    var t11, i9, r9;
    return { id: e16.peerId, name: e16.name, roleName: (t11 = e16.role) == null ? void 0 : t11.name, isLocal: e16.isLocal, videoTrack: (i9 = e16.videoTrack) == null ? void 0 : i9.trackId, audioTrack: (r9 = e16.audioTrack) == null ? void 0 : r9.trackId, auxiliaryTracks: e16.auxiliaryTracks.map((s9) => s9.trackId), customerUserId: e16.customerUserId, metadata: e16.metadata, joinedAt: e16.joinedAt, groups: e16.groups, isHandRaised: e16.isHandRaised, type: e16.type };
  }
  static convertTrack(e16, t11) {
    let i9 = { id: e16.trackId, source: e16.source, type: e16.type, enabled: e16.enabled, displayEnabled: e16.enabled, peerId: e16.peerId || t11 };
    return this.enrichTrack(i9, e16), i9;
  }
  static enrichTrack(e16, t11) {
    let i9 = t11.getMediaTrackSettings();
    t11 instanceof te && (e16.volume = t11.getVolume() || 0), a7.updateDeviceID(e16, t11), a7.enrichLocalTrack(e16, t11), e16.type === "video" && (e16.source === "screen" ? (e16.displaySurface = i9.displaySurface, a7.enrichScreenTrack(e16, t11)) : e16.source === "regular" && (e16.facingMode = i9.facingMode), e16.height = i9.height, e16.width = i9.width, a7.enrichVideoTrack(e16, t11)), a7.enrichPluginsDetails(e16, t11);
  }
  static enrichLocalTrack(e16, t11) {
    (t11 instanceof U || t11 instanceof ae) && (e16.isPublished = t11.isPublished);
  }
  static updateDeviceID(e16, t11) {
    var i9;
    t11 instanceof U || t11 instanceof ae ? e16.deviceID = t11.settings.deviceId : e16.deviceID = (i9 = t11.getMediaTrackSettings()) == null ? void 0 : i9.deviceId;
  }
  static enrichVideoTrack(e16, t11) {
    t11 instanceof O && (e16.layer = t11.getLayer(), e16.preferredLayer = t11.getPreferredLayer(), e16.degraded = t11.degraded), (t11 instanceof O || t11 instanceof U) && (X(t11.getSimulcastDefinitions(), e16.layerDefinitions) || (e16.layerDefinitions = t11.getSimulcastDefinitions()));
  }
  static enrichScreenTrack(e16, t11) {
    var i9, r9;
    if (t11 instanceof U) {
      let s9 = (i9 = t11.getCaptureHandle) == null ? void 0 : i9.call(t11);
      (s9 == null ? void 0 : s9.handle) !== ((r9 = e16.captureHandle) == null ? void 0 : r9.handle) && (e16.captureHandle = s9), t11.isCurrentTab && (e16.displaySurface = "selfBrowser");
    }
  }
  static enrichPluginsDetails(e16, t11) {
    (t11 instanceof U || t11 instanceof ae) && (X(t11.getPlugins(), e16.plugins) || (e16.plugins = t11.getPlugins()));
  }
  static convertRoom(e16, t11) {
    let { recording: i9, rtmp: r9, hls: s9 } = a7.convertRecordingStreamingState(e16 == null ? void 0 : e16.recording, e16 == null ? void 0 : e16.rtmp, e16 == null ? void 0 : e16.hls);
    return { id: e16.id, name: e16.name, localPeer: t11, recording: i9, rtmp: r9, hls: s9, sessionId: e16.sessionId, startedAt: e16.startedAt, joinedAt: e16.joinedAt, peerCount: e16.peerCount, isLargeRoom: e16.large_room_optimization, isEffectsEnabled: e16.isEffectsEnabled, effectsKey: e16.effectsKey, isHipaaEnabled: e16.isHipaaEnabled, isNoiseCancellationEnabled: e16.isNoiseCancellationEnabled };
  }
  static convertMessage(e16, t11) {
    var i9, r9, s9, o14;
    return { sender: (i9 = e16.peer) == null ? void 0 : i9.peer_id, senderName: (r9 = e16.peer) == null ? void 0 : r9.info.name, senderRole: (s9 = e16.peer) == null ? void 0 : s9.role, senderUserId: (o14 = e16.peer) == null ? void 0 : o14.info.user_id, recipientPeer: e16.private ? t11 : void 0, recipientRoles: e16.roles, time: new Date(e16.timestamp), type: e16.info.type, message: e16.info.message, id: e16.message_id };
  }
  static convertRoles(e16) {
    let t11 = {};
    return e16 && e16.forEach((i9) => {
      t11[i9.name] = i9;
    }), t11;
  }
  static convertRoleChangeRequest(e16) {
    var t11;
    return { requestedBy: (t11 = e16.requestedBy) == null ? void 0 : t11.peerId, roleName: e16.role.name, token: e16.token };
  }
  static convertException(e16) {
    return { code: e16.code, action: e16.action, name: e16.name, message: e16.message, description: e16.description, isTerminal: e16.isTerminal, nativeError: e16.nativeError, timestamp: /* @__PURE__ */ new Date() };
  }
  static convertDeviceChangeUpdate(e16) {
    let t11 = { devices: e16.devices, selection: e16.selection, type: e16.type };
    return e16.error && (t11.error = this.convertException(e16.error)), t11;
  }
  static convertPlaylist(e16) {
    let t11 = this.getConvertedPlaylistType(e16, "audio"), i9 = this.getConvertedPlaylistType(e16, "video");
    return { audio: t11, video: i9 };
  }
  static convertPlaylistItem(e16, t11) {
    let i9 = t11.type, r9 = e16.getCurrentSelection(i9), s9 = e16.isPlaying(i9), o14 = t11.url === (r9 == null ? void 0 : r9.url);
    return v(m({}, t11), { type: t11.type, selected: o14, playing: o14 && s9 });
  }
  static getConvertedPlaylistType(e16, t11) {
    let i9 = {}, r9 = e16.getCurrentSelection(t11), s9 = e16.getCurrentProgress(t11), o14 = e16.getVolume(t11), n9 = e16.getList(t11), l5 = e16.getCurrentIndex(t11);
    return e16.getList(t11).forEach((u3) => {
      i9[u3.id] = a7.convertPlaylistItem(e16, u3);
    }), { list: i9, selection: { id: r9 == null ? void 0 : r9.id, hasPrevious: l5 > 0, hasNext: l5 < n9.length - 1 }, progress: s9, volume: o14, currentTime: e16.getCurrentTime(t11), playbackRate: e16.getPlaybackRate(t11) };
  }
  static convertRecordingStreamingState(e16, t11, i9) {
    var r9;
    return { recording: { browser: m({ running: false }, e16 == null ? void 0 : e16.browser), server: m({ running: false }, e16 == null ? void 0 : e16.server), hls: m({ running: false }, e16 == null ? void 0 : e16.hls) }, rtmp: m({ running: false }, t11), hls: { variants: ((r9 = i9 == null ? void 0 : i9.variants) == null ? void 0 : r9.map((s9) => s9)) || [], running: !!(i9 != null && i9.running), error: i9 == null ? void 0 : i9.error } };
  }
};
var Mt = class {
  constructor(e16, t11, i9, r9) {
    this.playlistManager = e16;
    this.syncPlaylistState = i9;
    this.store = r9;
    this.type = t11;
  }
  play(e16) {
    return c(this, null, function* () {
      if (!e16) {
        k.w("Please pass id to play");
        return;
      }
      yield this.playlistManager.setEnabled(true, { id: e16, type: this.type });
    });
  }
  pause() {
    return c(this, null, function* () {
      let e16 = this.type === "audio" ? hs : ms, t11 = this.store.getState(e16.selection);
      if (!t11.id) {
        k.w("No item is currently playing to pause");
        return;
      }
      yield this.playlistManager.setEnabled(false, { id: t11.id, type: this.type });
    });
  }
  playNext() {
    return c(this, null, function* () {
      yield this.playlistManager.playNext(this.type);
    });
  }
  playPrevious() {
    return c(this, null, function* () {
      yield this.playlistManager.playPrevious(this.type);
    });
  }
  seek(e16) {
    this.playlistManager.seek(e16, this.type), this.syncPlaylistState(`seekOn${this.type}Playlist`);
  }
  seekTo(e16) {
    this.playlistManager.seekTo(e16, this.type), this.syncPlaylistState(`seekToOn${this.type}Playlist`);
  }
  setVolume(e16) {
    this.playlistManager.setVolume(e16, this.type), this.syncPlaylistState(`setVolumeOn${this.type}Playlist`);
  }
  setList(e16) {
    this.playlistManager.setList(e16), this.syncPlaylistState(`setListOn${this.type}Playlist`);
  }
  stop() {
    return c(this, null, function* () {
      yield this.playlistManager.stop(this.type), this.syncPlaylistState(`stop${this.type}Playlist`);
    });
  }
  setIsAutoplayOn(e16) {
    this.playlistManager.setIsAutoplayOn(this.type, e16);
  }
  setPlaybackRate(e16) {
    this.playlistManager.setPlaybackRate(this.type, e16), this.syncPlaylistState(`set${this.type}PlaybackRate`);
  }
  removeItem(e16) {
    return c(this, null, function* () {
      let t11 = yield this.playlistManager.removeItem(e16, this.type);
      return t11 && this.syncPlaylistState(`remove${this.type}PlaylistItem`), t11;
    });
  }
  clearList() {
    return c(this, null, function* () {
      yield this.playlistManager.clearList(this.type), this.syncPlaylistState(`clear${this.type}Playlist`);
    });
  }
};
var mi = class {
  constructor(e16, t11) {
    this.sdk = e16;
    this.setLocally = t11;
  }
  get sdkSessionStore() {
    return this.sdk.getSessionStore();
  }
  set(e16, t11) {
    return c(this, null, function* () {
      let { value: i9 } = yield this.sdkSessionStore.set(String(e16), t11);
      this.setLocally({ key: e16, value: i9 });
    });
  }
  observe(e16) {
    return c(this, null, function* () {
      let t11 = Array.isArray(e16) ? e16.map((i9) => String(i9)) : [String(e16)];
      yield this.sdkSessionStore.observe(t11);
    });
  }
  unobserve(e16) {
    return c(this, null, function* () {
      let t11 = Array.isArray(e16) ? e16.map((i9) => String(i9)) : [String(e16)];
      yield this.sdkSessionStore.unobserve(t11);
    });
  }
};
var Si = class {
  constructor(e16, t11) {
    this.intervalMs = 100, this.shouldMonitor = false, this.hasStarted = false, this.unsubs = [], this.analysers = {}, this.store = e16, this.actions = t11;
  }
  start() {
    return c(this, null, function* () {
      if (this.hasStarted) return;
      this.hasStarted = true, k.d("starting audio level monitor for remote peers", this.store);
      let e16 = this.store.getState(ye);
      k.d("starting audio levels is connected to room", e16), e16 && (yield this.monitorAudioLevels());
      let t11 = this.store.subscribe(this.monitorAudioLevels.bind(this), ye);
      this.unsubs.push(t11);
    });
  }
  stop() {
    return c(this, null, function* () {
      this.hasStarted && (this.hasStarted = false, this.shouldMonitor = false, this.unsubs.forEach((e16) => e16()), k.d("stopped audio level monitor for remote peers"));
    });
  }
  monitorAudioLevels() {
    return c(this, null, function* () {
      if (!this.store.getState(ye)) {
        this.shouldMonitor && (k.i("room no longer connected, stopping audio level monitoring for remote"), this.shouldMonitor = false);
        return;
      }
      if (this.shouldMonitor) return;
      k.i("monitoring audio levels"), this.shouldMonitor = true;
      let t11 = () => {
        this.shouldMonitor ? (this.logAllPeersAudioLevels(), setTimeout(t11, this.intervalMs)) : k.i("stopped monitoring audio levels");
      };
      setTimeout(t11, 1e3);
    });
  }
  logAllPeersAudioLevels() {
    return c(this, null, function* () {
      var r9;
      if (!window.__triggerBeamEvent__) return;
      let t11 = this.store.getState(oe).filter((s9) => !!s9.audioTrack), i9 = [];
      for (let s9 of t11) {
        let o14 = this.actions.getTrackById(s9.audioTrack || ""), n9 = (r9 = o14 == null ? void 0 : o14.stream) == null ? void 0 : r9.nativeStream;
        if (s9.joinedAt && n9) {
          let l5 = yield this.getAudioLevel(s9, n9);
          l5.level > 0 && i9.push(l5);
        }
      }
      if (i9.length > 0) {
        let s9 = { event: "app-audio-level", data: i9 };
        k.d("logging audio levels", i9), window.__triggerBeamEvent__(JSON.stringify(s9));
      }
    });
  }
  getAudioLevel(e16, t11) {
    return c(this, null, function* () {
      this.analysers[t11.id] || (this.analysers[t11.id] = this.createAnalyserNode(t11));
      let i9 = this.analysers[t11.id], r9 = this.calculateAudioLevel(i9);
      return { peerId: e16.id, peerName: e16.name, level: r9 };
    });
  }
  createAnalyserNode(e16) {
    this.audioContext || (this.audioContext = new AudioContext());
    let t11 = this.audioContext.createAnalyser();
    return this.audioContext.createMediaStreamSource(e16).connect(t11), t11;
  }
  calculateAudioLevel(e16) {
    let t11 = new Uint8Array(e16.fftSize);
    e16.getByteTimeDomainData(t11);
    let i9 = 9e-3, r9 = i9;
    for (let n9 of t11) r9 = Math.max(r9, (n9 - 128) / 128);
    let s9 = (Math.log(i9) - Math.log(r9)) / Math.log(i9);
    return Math.ceil(Math.min(Math.max(s9 * 100, 0), 100));
  }
};
var gi = class {
  constructor(e16, t11, i9) {
    this.isRoomJoinCalled = false;
    this.ignoredMessageTypes = [];
    this.setProgress = ({ type: e17, progress: t12 }) => {
      this.setState((i10) => {
        i10.playlist[e17].progress = t12, i10.playlist[e17].currentTime = this.sdk.getPlaylistManager().getCurrentTime(e17);
      }, "playlistProgress");
    };
    this.syncPlaylistState = (e17) => {
      this.setState((t12) => {
        Object.assign(t12.playlist, N.convertPlaylist(this.sdk.getPlaylistManager()));
      }, e17);
    };
    this.sendPeerUpdateNotification = (e17, t12) => {
      let i10 = this.store.getState(Q(t12.peerId)), r9 = di[e17] || "peerUpdate";
      if (e17 === 8) this.syncRoomState(r9), this.updateMidCallPreviewRoomState(e17, t12);
      else if ([0, 1].includes(e17)) this.syncRoomState(r9), i10 || (i10 = this.store.getState(Q(t12.peerId)));
      else if ([12, 13, 14].includes(e17)) this.syncRoomState(r9), i10 || (i10 = this.store.getState(Q(t12.peerId)));
      else {
        let s9 = N.convertPeer(t12);
        this.setState((o14) => {
          let n9 = o14.peers[s9.id];
          Oe(n9, s9) && (X(n9.auxiliaryTracks, s9.auxiliaryTracks) && (n9.auxiliaryTracks = s9.auxiliaryTracks), Object.assign(n9, s9)), i10 = s9;
        }, r9);
      }
      this.hmsNotifications.sendPeerUpdate(e17, i10);
    };
    this.getSDKHMSPeer = (e17) => this.sdk.getPeerMap()[e17];
    this.setState = (e17, t12) => this.store.namedSetState(e17, t12);
    this.store = e16, this.sdk = t11, this.hmsNotifications = i9, this.sessionStore = new mi(this.sdk, this.setSessionStoreValueLocally.bind(this)), this.actionBatcher = new pi(e16);
  }
  getLocalTrack(e16) {
    return this.sdk.store.getLocalPeerTracks().find((t11) => t11.trackId === e16);
  }
  get interactivityCenter() {
    return this.sdk.getInteractivityCenter();
  }
  setPlaylistSettings(e16) {
    this.sdk.updatePlaylistSettings(e16);
  }
  refreshDevices() {
    return c(this, null, function* () {
      yield this.sdk.refreshDevices();
    });
  }
  unblockAudio() {
    return c(this, null, function* () {
      yield this.sdk.getAudioOutput().unblockAutoplay();
    });
  }
  setVolume(e16, t11) {
    return c(this, null, function* () {
      t11 ? yield this.setTrackVolume(e16, t11) : (yield this.sdk.getAudioOutput().setVolume(e16), this.syncRoomState("setOutputVolume"));
    });
  }
  setAudioOutputDevice(e16) {
    return c(this, null, function* () {
      (yield this.sdk.getAudioOutput().setDevice(e16)) && this.setState((i9) => {
        i9.settings.audioOutputDeviceId = e16;
      }, "setAudioOutputDevice");
    });
  }
  setPreferredLayer(e16, t11) {
    return c(this, null, function* () {
      var r9;
      let i9 = this.getTrackById(e16);
      if (i9) if (i9 instanceof O) {
        if (t11 === "none") {
          k.d("layer none will be ignored");
          return;
        }
        if (((r9 = this.store.getState(ea(e16))) == null ? void 0 : r9.preferredLayer) === t11) {
          k.d(`preferred layer is already ${t11}`);
          return;
        }
        this.setState((o14) => {
          let n9 = o14.tracks[e16];
          n9 && (n9.preferredLayer = t11);
        }, "setPreferredLayer"), yield i9.setPreferredLayer(t11);
      } else k.d(`track ${e16} is not a remote video track`);
      else this.logPossibleInconsistency(`track ${e16} not present, unable to set preffer layer`);
    });
  }
  getNativeTrackById(e16) {
    var t11;
    return (t11 = this.sdk.store.getTrackById(e16)) == null ? void 0 : t11.nativeTrack;
  }
  getTrackById(e16) {
    return this.sdk.store.getTrackById(e16);
  }
  getAuthTokenByRoomCode(e16, t11) {
    return this.sdk.getAuthTokenByRoomCode(e16, t11);
  }
  preview(e16) {
    return c(this, null, function* () {
      let t11 = this.store.getState(Y);
      if (t11 === "Preview" || t11 === "Connecting") {
        this.logPossibleInconsistency("attempting to call preview while room is in preview/connecting");
        return;
      }
      try {
        t11 !== "Connected" && this.setState((i9) => {
          i9.room.roomState = "Connecting";
        }, "connecting"), yield this.sdkPreviewWithListeners(e16);
      } catch (i9) {
        throw k.e("Cannot show preview. Failed to connect to room - ", i9), i9;
      }
    });
  }
  cancelMidCallPreview() {
    return c(this, null, function* () {
      return this.sdk.cancelMidCallPreview();
    });
  }
  join(e16) {
    return c(this, null, function* () {
      if (this.isRoomJoinCalled) {
        this.logPossibleInconsistency("room join is called again");
        return;
      }
      try {
        this.isRoomJoinCalled = true, this.setState((t11) => {
          t11.room.roomState = "Connecting";
        }, "join"), yield this.sdkJoinWithListeners(e16);
      } catch (t11) {
        throw this.isRoomJoinCalled = false, k.e("Failed to connect to room - ", t11), t11;
      }
    });
  }
  leave() {
    return c(this, null, function* () {
      let e16 = this.store.getState(ye), t11 = true;
      e16 || (t11 = false, this.logPossibleInconsistency("room leave is called when no room is connected"));
      let i9 = this.store.getState(Y);
      return this.setState((r9) => {
        r9.room.roomState = "Disconnecting";
      }, "leaving"), this.sdk.leave(t11).then(() => {
        this.resetState("leave"), this.beamSpeakerLabelsLogger && this.beamSpeakerLabelsLogger.stop().catch(k.e), k.i("left room");
      }).catch((r9) => {
        k.e("error in leaving room - ", r9), this.setState((s9) => {
          s9.room.roomState = i9;
        }, "revertLeave");
      });
    });
  }
  setScreenShareEnabled(e16, t11) {
    return c(this, null, function* () {
      typeof t11 == "boolean" && (t11 = { audioOnly: t11 });
      try {
        e16 ? yield this.startScreenShare(t11) : yield this.stopScreenShare();
      } catch (i9) {
        throw this.hmsNotifications.sendError(N.convertException(i9)), i9;
      }
    });
  }
  addTrack(e16, t11 = "regular") {
    return c(this, null, function* () {
      yield this.sdk.addTrack(e16, t11), this.syncRoomState("addTrack");
    });
  }
  removeTrack(e16) {
    return c(this, null, function* () {
      yield this.sdk.removeTrack(e16), this.syncRoomState("removeTrack");
    });
  }
  setLocalAudioEnabled(e16) {
    return c(this, null, function* () {
      let t11 = this.store.getState(Z);
      t11 && (yield this.setEnabledTrack(t11, e16));
    });
  }
  setLocalVideoEnabled(e16) {
    return c(this, null, function* () {
      let t11 = this.store.getState(q);
      t11 && (yield this.setEnabledTrack(t11, e16));
    });
  }
  setEnabledTrack(e16, t11) {
    return c(this, null, function* () {
      var s9;
      if (((s9 = this.store.getState().tracks[e16]) == null ? void 0 : s9.enabled) === t11) {
        this.logPossibleInconsistency(`local track[${e16}] enabled state - ${t11}`);
        return;
      }
      this.setState((o14) => {
        o14.tracks[e16] ? o14.tracks[e16].displayEnabled = t11 : this.logPossibleInconsistency("track id not found for setEnabled");
      }, "displayEnabled");
      try {
        yield this.setEnabledSDKTrack(e16, t11), this.syncRoomState("setEnabled");
      } catch (o14) {
        throw this.setState((n9) => {
          n9.tracks[e16].displayEnabled = !t11;
        }, "rollbackDisplayEnabled"), this.hmsNotifications.sendError(N.convertException(o14)), o14;
      }
      let r9 = t11 ? 3 : 2;
      this.hmsNotifications.sendTrackUpdate(r9, e16);
    });
  }
  setAudioSettings(e16) {
    return c(this, null, function* () {
      let t11 = this.store.getState(Z);
      t11 && (yield this.setSDKLocalAudioTrackSettings(t11, e16), this.syncRoomState("setAudioSettings"));
    });
  }
  setVideoSettings(e16) {
    return c(this, null, function* () {
      let t11 = this.store.getState(q);
      t11 && (yield this.setSDKLocalVideoTrackSettings(t11, e16), this.syncRoomState("setVideoSettings"));
    });
  }
  switchCamera() {
    return c(this, null, function* () {
      let e16 = this.store.getState(q);
      if (e16) {
        let t11 = this.sdk.store.getLocalPeerTracks().find((i9) => i9.trackId === e16);
        t11 && (yield t11.switchCamera(), this.syncRoomState("switchCamera"));
      }
    });
  }
  sendMessage(e16) {
    this.sendBroadcastMessage(e16);
  }
  sendBroadcastMessage(e16, t11) {
    return c(this, null, function* () {
      let { message_id: i9, timestamp: r9 } = yield this.sdk.sendBroadcastMessage(e16, t11);
      this.updateMessageInStore({ message: e16, type: t11, id: i9, time: r9 });
    });
  }
  sendGroupMessage(e16, t11, i9) {
    return c(this, null, function* () {
      let r9 = this.store.getState(ne), s9 = t11.map((l5) => r9[l5]), { message_id: o14, timestamp: n9 } = yield this.sdk.sendGroupMessage(e16, s9, i9);
      this.updateMessageInStore({ message: e16, recipientRoles: t11, type: i9, id: o14, time: n9 });
    });
  }
  sendDirectMessage(e16, t11, i9) {
    return c(this, null, function* () {
      let { message_id: r9, timestamp: s9 } = yield this.sdk.sendDirectMessage(e16, t11, i9);
      this.updateMessageInStore({ message: e16, recipientPeer: t11, type: i9, id: r9, time: s9 });
    });
  }
  updateMessageInStore(e16) {
    var s9;
    if (!e16.message) throw k.w("sendMessage", "Failed to send message", e16), Error(`sendMessage Failed - ${JSON.stringify(e16)}`);
    if (!!e16.type && this.ignoredMessageTypes.includes(e16.type)) return;
    let i9 = this.sdk.getLocalPeer(), r9 = { read: true, id: e16.id, time: new Date(e16.time), message: e16.message, type: e16.type || "chat", recipientPeer: e16.recipientPeer, recipientRoles: e16.recipientRoles, senderName: i9 == null ? void 0 : i9.name, sender: i9 == null ? void 0 : i9.peerId, senderRole: (s9 = i9 == null ? void 0 : i9.role) == null ? void 0 : s9.name, ignored: false };
    this.setState((o14) => {
      o14.messages.byID[r9.id] = r9, o14.messages.allIDs.push(r9.id);
    }, "newMessage");
  }
  setMessageRead(e16, t11) {
    this.setState((i9) => {
      t11 ? i9.messages.byID[t11] ? i9.messages.byID[t11].read = e16 : this.logPossibleInconsistency("no message with id is found") : i9.messages.allIDs.forEach((r9) => {
        i9.messages.byID[r9].read = e16;
      });
    }, "setMessageRead");
  }
  attachVideo(e16, t11) {
    return c(this, null, function* () {
      if (this.localAndVideoUnmuting(e16)) return new Promise((i9) => {
        let r9 = this.store.subscribe((s9) => c(this, null, function* () {
          s9 && (yield this.attachVideoInternal(e16, t11), r9(), i9());
        }), rr);
      });
      yield this.attachVideoInternal(e16, t11);
    });
  }
  detachVideo(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.getTrackById(e16);
      (i9 == null ? void 0 : i9.type) === "video" ? yield this.sdk.detachVideo(i9, t11) : (t11 && (t11.srcObject = null), k.d("possible inconsistency detected - no video track found to remove sink"));
    });
  }
  addPluginToVideoTrack(e16, t11) {
    return c(this, null, function* () {
      return this.addRemoveVideoPlugin(e16, "add", t11);
    });
  }
  addPluginsToVideoStream(e16) {
    return c(this, null, function* () {
      return this.addRemoveMediaStreamVideoPlugins(e16, "add");
    });
  }
  removePluginsFromVideoStream(e16) {
    return c(this, null, function* () {
      return this.addRemoveMediaStreamVideoPlugins(e16, "remove");
    });
  }
  addPluginToAudioTrack(e16) {
    return c(this, null, function* () {
      return this.addRemoveAudioPlugin(e16, "add");
    });
  }
  validateVideoPluginSupport(e16) {
    let t11 = {};
    if (t11.isSupported = false, !e16) return k.w("no plugin passed in for checking support"), t11.errMsg = "no plugin passed in for checking support", t11;
    let i9 = this.store.getState(q);
    if (!i9) return k.w("video Track not added to local peer yet"), t11.errMsg = "call this function only after local peer has video track", t11;
    let r9 = this.getTrackById(i9);
    return r9 ? t11 = r9.validatePlugin(e16) : (k.w(`track ${i9} not present, unable to validate plugin`), t11.errMsg = `track ${i9} not present, unable to validate plugin`), t11;
  }
  validateAudioPluginSupport(e16) {
    let t11 = {};
    if (t11.isSupported = false, !e16) return k.w('no plugin passed in for checking support"'), t11.errMsg = 'no plugin passed in for checking support"', t11;
    let i9 = this.store.getState(Z);
    if (!i9) return k.w("audio track not added to local peer yet"), t11.errMsg = "call this function only after local peer has audio track", t11;
    let r9 = this.getTrackById(i9);
    return r9 ? t11 = r9.validatePlugin(e16) : (k.w(`track ${i9} not present, unable to validate plugin`), t11.errMsg = `track ${i9} not present, unable to validate plugin`), t11;
  }
  removePluginFromVideoTrack(e16) {
    return c(this, null, function* () {
      return this.addRemoveVideoPlugin(e16, "remove");
    });
  }
  removePluginFromAudioTrack(e16) {
    return c(this, null, function* () {
      return this.addRemoveAudioPlugin(e16, "remove");
    });
  }
  changeRole(e16, t11, i9 = false) {
    return c(this, null, function* () {
      yield this.sdk.changeRoleOfPeer(e16, t11, i9);
    });
  }
  changeRoleOfPeer(e16, t11, i9 = false) {
    return c(this, null, function* () {
      yield this.sdk.changeRoleOfPeer(e16, t11, i9);
    });
  }
  changeRoleOfPeersWithRoles(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.sdk.getRoles().filter((r9) => e16.includes(r9.name));
      yield this.sdk.changeRoleOfPeersWithRoles(i9, t11);
    });
  }
  acceptChangeRole(e16) {
    return c(this, null, function* () {
      let t11 = e16.requestedBy ? this.getSDKHMSPeer(e16.requestedBy.id) : void 0;
      t11 || k.w(`peer for which role change is requested no longer available - ${e16.requestedBy}`);
      let i9 = { requestedBy: t11, role: e16.role, token: e16.token };
      yield this.sdk.acceptChangeRole(i9), this.removeRoleChangeRequest(e16);
    });
  }
  raiseLocalPeerHand() {
    return c(this, null, function* () {
      yield this.sdk.raiseLocalPeerHand();
    });
  }
  lowerLocalPeerHand() {
    return c(this, null, function* () {
      yield this.sdk.lowerLocalPeerHand();
    });
  }
  raiseRemotePeerHand(e16) {
    return c(this, null, function* () {
      yield this.sdk.raiseRemotePeerHand(e16);
    });
  }
  lowerRemotePeerHand(e16) {
    return c(this, null, function* () {
      yield this.sdk.lowerRemotePeerHand(e16);
    });
  }
  getPeerListIterator(e16) {
    let t11 = this.sdk.getPeerListIterator(e16);
    return { hasNext: () => t11.hasNext(), next: () => c(this, null, function* () {
      return (yield t11.next()).map((r9) => N.convertPeer(r9));
    }), findPeers: () => c(this, null, function* () {
      return (yield t11.findPeers()).map((r9) => N.convertPeer(r9));
    }), getTotal: () => t11.getTotal() };
  }
  initAppData(e16) {
    this.setState((t11) => {
      t11.appData = e16;
    }, "initAppData");
  }
  setAppData(e16, t11, i9) {
    let r9 = (t11 == null ? void 0 : t11.constructor.name) === "Object";
    this.setState((s9) => {
      if (s9.appData) i9 && r9 ? Object.assign(s9.appData[e16], t11) : s9.appData[e16] = t11;
      else {
        let o14 = { [e16]: t11 };
        s9.appData = o14;
      }
    }, `setAppData-${e16}`);
  }
  rejectChangeRole(e16) {
    this.removeRoleChangeRequest(e16);
  }
  endRoom(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.store.getState(rs);
      if (!(i9 != null && i9.endRoom)) {
        k.w("You are not allowed to perform this action - endRoom");
        return;
      }
      let r9 = this.store.getState(Y);
      this.setState((s9) => {
        s9.room.roomState = "Disconnecting";
      }, "endingRoom");
      try {
        yield this.sdk.endRoom(e16, t11), this.resetState("endRoom");
      } catch (s9) {
        k.e("error in ending room - ", s9), this.setState((o14) => {
          o14.room.roomState = r9;
        }, "revertEndRoom");
      }
    });
  }
  removePeer(e16, t11) {
    return c(this, null, function* () {
      var r9;
      let i9 = (r9 = this.sdk.getLocalPeer()) == null ? void 0 : r9.peerId;
      e16 !== i9 && (yield this.sdk.removePeer(e16, t11));
    });
  }
  startRTMPOrRecording(e16) {
    return c(this, null, function* () {
      yield this.sdk.startRTMPOrRecording(e16);
    });
  }
  stopRTMPAndRecording() {
    return c(this, null, function* () {
      yield this.sdk.stopRTMPAndRecording();
    });
  }
  startHLSStreaming(e16) {
    return c(this, null, function* () {
      yield this.sdk.startHLSStreaming(e16);
    });
  }
  stopHLSStreaming(e16) {
    return c(this, null, function* () {
      yield this.sdk.stopHLSStreaming(e16);
    });
  }
  sendHLSTimedMetadata(e16) {
    return c(this, null, function* () {
      yield this.sdk.sendHLSTimedMetadata(e16);
    });
  }
  changeName(e16) {
    return c(this, null, function* () {
      yield this.sdk.changeName(e16);
    });
  }
  changeMetadata(e16) {
    return c(this, null, function* () {
      typeof e16 != "string" && (e16 = JSON.stringify(e16)), yield this.sdk.changeMetadata(e16);
    });
  }
  setSessionMetadata(e16) {
    return c(this, null, function* () {
      yield this.sdk.setSessionMetadata(e16), this.setState((t11) => {
        t11.sessionMetadata = e16;
      }, "setSessionMetadata"), this.setSessionStoreValueLocally({ key: "default", value: e16 }, "setSessionMetadata");
    });
  }
  populateSessionMetadata() {
    return c(this, null, function* () {
      let e16 = yield this.sdk.getSessionMetadata();
      this.setState((t11) => {
        t11.sessionMetadata = e16;
      }, "populateSessionMetadata"), this.setSessionStoreValueLocally({ key: "default", value: e16 }, "populateSessionmetadata");
    });
  }
  setRemoteTrackEnabled(e16, t11) {
    return c(this, null, function* () {
      if (typeof e16 == "string") {
        let i9 = this.getTrackById(e16);
        i9 && da(i9) ? yield this.sdk.changeTrackState(i9, t11) : this.logPossibleInconsistency(`No remote track with ID ${e16} found for change track state`);
      } else Array.isArray(e16) && e16.forEach((i9) => this.setRemoteTrackEnabled(i9, t11));
    });
  }
  setRemoteTracksEnabled(e16) {
    return c(this, null, function* () {
      let t11 = { enabled: e16.enabled, type: e16.type, source: e16.source };
      if (e16.roles) {
        let i9 = this.store.getState(ne);
        t11.roles = e16.roles.map((r9) => i9[r9]);
      }
      yield this.sdk.changeMultiTrackState(t11);
    });
  }
  setLogLevel(e16) {
    k.level = e16, this.sdk.setLogLevel(e16);
  }
  setFrameworkInfo(e16) {
    this.sdk.setFrameworkInfo(e16);
  }
  ignoreMessageTypes(e16, t11 = false) {
    if (t11) this.ignoredMessageTypes = e16;
    else for (let i9 of e16) this.ignoredMessageTypes.includes(i9) || this.ignoredMessageTypes.push(i9);
  }
  enableBeamSpeakerLabelsLogging() {
    return c(this, null, function* () {
      this.beamSpeakerLabelsLogger || (k.i("enabling beam speaker labels logging"), this.beamSpeakerLabelsLogger = new Si(this.store, this), yield this.beamSpeakerLabelsLogger.start());
    });
  }
  resetState(e16 = "resetState") {
    this.isRoomJoinCalled = false, k.cleanup(), this.setState((t11) => {
      Object.assign(t11, Gt());
    }, e16);
  }
  sdkJoinWithListeners(e16) {
    return c(this, null, function* () {
      yield this.sdk.join(e16, { onJoin: this.onJoin.bind(this), onPreview: this.onPreview.bind(this), onRoomUpdate: this.onRoomUpdate.bind(this), onPeerUpdate: this.onPeerUpdate.bind(this), onTrackUpdate: this.onTrackUpdate.bind(this), onMessageReceived: this.onMessageReceived.bind(this), onError: this.onError.bind(this), onReconnected: this.onReconnected.bind(this), onReconnecting: this.onReconnecting.bind(this), onRoleChangeRequest: this.onRoleChangeRequest.bind(this), onRoleUpdate: this.onRoleUpdate.bind(this), onDeviceChange: this.onDeviceChange.bind(this), onChangeTrackStateRequest: this.onChangeTrackStateRequest.bind(this), onChangeMultiTrackStateRequest: this.onChangeMultiTrackStateRequest.bind(this), onRemovedFromRoom: this.onRemovedFromRoom.bind(this), onNetworkQuality: this.onNetworkQuality.bind(this), onSessionStoreUpdate: this.onSessionStoreUpdate.bind(this), onPollsUpdate: this.onPollsUpdate.bind(this), onWhiteboardUpdate: this.onWhiteboardUpdate.bind(this) }), this.sdk.addAudioListener({ onAudioLevelUpdate: this.onAudioLevelUpdate.bind(this) }), this.sdk.addConnectionQualityListener({ onConnectionQualityUpdate: this.onConnectionQualityUpdate.bind(this) });
    });
  }
  onRemovedFromRoom(e16) {
    var r9;
    let t11 = this.store.getState(Q((r9 = e16.requestedBy) == null ? void 0 : r9.peerId));
    this.hmsNotifications.sendLeaveRoom(v(m({}, e16), { requestedBy: t11 || void 0 }));
    let i9 = e16.roomEnded || !t11 ? "roomEnded" : "removedFromRoom";
    k.i(`resetting state after peer removed ${i9}`, e16), this.resetState(i9);
  }
  onDeviceChange(e16) {
    let t11 = e16.devices;
    if (!t11) return;
    let i9 = this.store.getState(z);
    if (this.setState((r9) => {
      X(r9.devices.audioInput, t11.audioInput) || (r9.devices.audioInput = t11.audioInput), X(r9.devices.videoInput, t11.videoInput) || (r9.devices.videoInput = t11.videoInput), X(r9.devices.audioOutput, t11.audioOutput) || (r9.devices.audioOutput = t11.audioOutput);
      let s9 = this.sdk.getLocalPeer();
      i9 != null && i9.id && s9 && Object.assign(r9.settings, this.getMediaSettings(s9));
    }, "deviceChange"), e16.selection) {
      let r9 = N.convertDeviceChangeUpdate(e16);
      this.hmsNotifications.sendDeviceChange(r9);
    }
  }
  sdkPreviewWithListeners(e16) {
    return c(this, null, function* () {
      yield this.sdk.preview(e16, { onPreview: this.onPreview.bind(this), onError: this.onError.bind(this), onReconnected: this.onReconnected.bind(this), onReconnecting: this.onReconnecting.bind(this), onDeviceChange: this.onDeviceChange.bind(this), onRoomUpdate: this.onRoomUpdate.bind(this), onPeerUpdate: this.onPeerUpdate.bind(this), onNetworkQuality: this.onNetworkQuality.bind(this) }), this.sdk.addAudioListener({ onAudioLevelUpdate: this.onAudioLevelUpdate.bind(this) });
    });
  }
  onNetworkQuality(e16) {
    this.setState((t11) => {
      var r9;
      let i9 = t11.room.localPeer || ((r9 = this.sdk.getLocalPeer()) == null ? void 0 : r9.peerId);
      i9 && (t11.connectionQualities[i9] = { peerID: i9, downlinkQuality: e16 });
    }, "ConnectionQuality");
  }
  onSessionStoreUpdate(e16) {
    this.setSessionStoreValueLocally(e16, "sessionStoreUpdate");
  }
  onPollsUpdate(e16, t11) {
    let i9 = li[e16];
    this.setState((r9) => {
      let s9 = t11.reduce((o14, n9) => {
        var l5;
        return o14[n9.id] = v(m({}, n9), { questions: (l5 = n9.questions) == null ? void 0 : l5.map((u3) => {
          var p2, h2;
          return v(m({}, u3), { answer: u3.answer ? m({}, u3.answer) : void 0, options: (p2 = u3.options) == null ? void 0 : p2.map((g2) => m({}, g2)), responses: (h2 = u3.responses) == null ? void 0 : h2.map((g2) => m({}, g2)) });
        }) }), o14;
      }, {});
      pa(r9.polls, s9);
    }, i9), t11.forEach((r9) => this.hmsNotifications.sendPollUpdate(e16, r9.id));
  }
  onWhiteboardUpdate(e16) {
    this.setState((t11) => {
      t11.whiteboards[e16.id] = e16;
    }, "whiteboardUpdate");
  }
  startScreenShare(e16) {
    return c(this, null, function* () {
      this.store.getState(sr) ? this.logPossibleInconsistency("start screenshare is called while it's on") : (yield this.sdk.startScreenShare(() => this.syncRoomState("screenshareStopped"), e16), this.syncRoomState("startScreenShare"));
    });
  }
  stopScreenShare() {
    return c(this, null, function* () {
      this.store.getState(sr) ? (yield this.sdk.stopScreenShare(), this.syncRoomState("stopScreenShare")) : this.logPossibleInconsistency("stop screenshare is called while it's not on");
    });
  }
  attachVideoInternal(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.getTrackById(e16);
      i9 || (i9 = this.getLocalTrack(e16)), i9 && i9.type === "video" ? yield this.sdk.attachVideo(i9, t11) : this.logPossibleInconsistency("no video track found to add sink");
    });
  }
  syncRoomState(e16) {
    e16 = `${e16}_fullSync`, k.time(`store-sync-${e16}`);
    let t11 = {}, i9 = [], r9 = {}, s9 = {}, o14 = {}, n9, l5 = this.sdk.getPeers();
    for (let g2 of l5) {
      let T = N.convertPeer(g2);
      t11[T.id] = T, i9.push(T.id), o14[T.id] = { peerID: T.id, downlinkQuality: g2.networkQuality || -1 };
      let E2 = [g2.audioTrack, g2.videoTrack, ...g2.auxiliaryTracks];
      for (let A of E2) {
        if (!A) continue;
        let w = N.convertTrack(A);
        r9[w.id] = w;
      }
      if (g2.isLocal) {
        let A = g2;
        n9 = this.getPreviewFields(A), Object.assign(s9, this.getMediaSettings(A));
      }
    }
    let u3 = this.sdk.getRecordingState(), p2 = this.sdk.getRTMPState(), h2 = this.sdk.getHLSState();
    this.setState((g2) => {
      var A;
      g2.room.peers = i9;
      let T = g2.peers, E2 = g2.tracks;
      la(T, t11), ua(E2, r9), Object.assign(g2.settings, s9), g2.room.isConnected && Object.assign(g2.connectionQualities, o14), (A = g2.preview) != null && A.localPeer && (n9 != null && n9.localPeer) ? Object.assign(g2.preview, n9) : g2.preview = n9, Object.assign(g2.roles, N.convertRoles(this.sdk.getRoles())), Object.assign(g2.playlist, N.convertPlaylist(this.sdk.getPlaylistManager())), Object.assign(g2.room, N.convertRecordingStreamingState(u3, p2, h2)), Object.assign(g2.templateAppData, this.sdk.getTemplateAppData());
    }, e16), k.timeEnd(`store-sync-${e16}`);
  }
  onPreview(e16) {
    this.setState((t11) => {
      var i9;
      Object.assign(t11.room, N.convertRoom(e16, (i9 = this.sdk.getLocalPeer()) == null ? void 0 : i9.peerId)), t11.room.roomState = "Preview";
    }, "previewStart"), this.syncRoomState("previewSync");
  }
  onJoin(e16) {
    let t11 = this.sdk.getPlaylistManager();
    this.audioPlaylist = new Mt(t11, "audio", this.syncPlaylistState.bind(this), this.store), this.videoPlaylist = new Mt(t11, "video", this.syncRoomState.bind(this), this.store), this.syncRoomState("joinSync"), this.setState((i9) => {
      var r9;
      Object.assign(i9.room, N.convertRoom(e16, (r9 = this.sdk.getLocalPeer()) == null ? void 0 : r9.peerId)), i9.room.isConnected = true, i9.room.roomState = "Connected";
    }, "joined"), t11.onProgress(this.setProgress), t11.onNewTrackStart((i9) => {
      this.syncPlaylistState(`${i9.type}PlaylistUpdate`);
    }), t11.onPlaylistEnded((i9) => {
      this.syncPlaylistState(`${i9}PlaylistEnded`);
    }), t11.onCurrentTrackEnded((i9) => {
      this.hmsNotifications.sendPlaylistTrackEnded(N.convertPlaylistItem(t11, i9)), this.syncPlaylistState(`${i9.type}PlaylistItemEnded`);
    });
  }
  onRoomUpdate(e16, t11) {
    this.setState((i9) => {
      var r9;
      Object.assign(i9.room, N.convertRoom(t11, (r9 = this.sdk.getLocalPeer()) == null ? void 0 : r9.peerId));
    }, e16);
  }
  onPeerUpdate(e16, t11) {
    if (![4, 5].includes(e16)) {
      if (Array.isArray(t11)) {
        let i9 = this.store.getState(G), r9 = t11.filter((o14) => !i9[o14.peerId]);
        if (this.syncRoomState("peersJoined"), this.store.getState(ye)) {
          let o14 = [];
          for (let n9 of t11) {
            let l5 = this.store.getState(Q(n9.peerId));
            l5 && o14.push(l5);
          }
          this.hmsNotifications.sendPeerList(o14);
        } else r9.forEach((o14) => {
          let n9 = this.store.getState(Q(o14.peerId));
          n9 && this.hmsNotifications.sendPeerUpdate(0, n9);
        });
        return;
      }
      this.sendPeerUpdateNotification(e16, t11);
    }
  }
  onTrackUpdate(e16, t11, i9) {
    if (e16 === 1) this.hmsNotifications.sendTrackUpdate(e16, t11.trackId), this.handleTrackRemove(t11, i9);
    else if ([0, 1].includes(e16)) {
      let r9 = ft[e16];
      this.syncRoomState(r9), this.hmsNotifications.sendTrackUpdate(e16, t11.trackId);
    } else {
      let r9 = ft[e16] || "trackUpdate", s9 = N.convertTrack(t11);
      this.setState((o14) => {
        let n9 = o14.tracks[s9.id];
        Oe(n9, s9) && (_r(n9, s9), Object.assign(n9, s9));
      }, r9), this.hmsNotifications.sendTrackUpdate(e16, t11.trackId);
    }
  }
  onMessageReceived(e16) {
    let t11 = N.convertMessage(e16, this.store.getState(ue));
    t11.read = false, t11.ignored = this.ignoredMessageTypes.includes(t11.type), this.putMessageInStore(t11), this.hmsNotifications.sendMessageReceived(t11);
  }
  putMessageInStore(e16) {
    e16.ignored || this.actionBatcher.setState((t11) => {
      t11.messages.byID[e16.id] = e16, t11.messages.allIDs.push(e16.id);
    }, "newMessage", 150);
  }
  onAudioLevelUpdate(e16) {
    this.setState((t11) => {
      let i9 = {};
      e16.forEach((s9) => {
        if (!s9.track || !s9.peer) return;
        let o14 = s9.track.trackId;
        i9[o14] = s9.audioLevel, t11.speakers[o14] || (t11.speakers[o14] = { audioLevel: s9.audioLevel, peerID: s9.peer.peerId, trackID: o14 });
      });
      let r9 = Object.entries(t11.speakers);
      for (let [s9, o14] of r9) o14.audioLevel = i9[s9] || 0, o14.audioLevel === 0 && delete t11.speakers[s9];
    }, "audioLevel");
  }
  onConnectionQualityUpdate(e16) {
    this.setState((t11) => {
      e16.forEach((i9) => {
        let r9 = i9.peerID;
        r9 && (t11.connectionQualities[r9] ? Object.assign(t11.connectionQualities[r9], i9) : t11.connectionQualities[r9] = i9);
      });
    }, "connectionQuality");
  }
  onChangeTrackStateRequest(e16) {
    var s9;
    let t11 = this.store.getState(Q((s9 = e16.requestedBy) == null ? void 0 : s9.peerId)), i9 = this.getStoreLocalTrackIDfromSDKTrack(e16.track), r9 = this.store.getState(ni(i9));
    if (!r9) return this.logPossibleInconsistency(`Not found track for which track state change was requested, ${e16.track}`);
    e16.enabled || this.syncRoomState("changeTrackStateRequest"), this.hmsNotifications.sendChangeTrackStateRequest({ requestedBy: t11 || void 0, track: r9, enabled: e16.enabled });
  }
  onChangeMultiTrackStateRequest(e16) {
    var s9;
    let t11 = this.store.getState(Q((s9 = e16.requestedBy) == null ? void 0 : s9.peerId));
    e16.enabled || this.syncRoomState("changeMultiTrackStateRequest");
    let i9 = [], r9 = this.store.getState(D);
    for (let o14 of e16.tracks) {
      let n9 = this.getStoreLocalTrackIDfromSDKTrack(o14);
      n9 && r9[n9] && i9.push(r9[n9]);
    }
    this.hmsNotifications.sendChangeMultiTrackStateRequest({ requestedBy: t11 || void 0, tracks: i9, enabled: e16.enabled, type: e16.type, source: e16.source });
  }
  onReconnected() {
    this.syncRoomState("reconnectedSync"), this.hmsNotifications.sendReconnected(), this.setState((e16) => {
      e16.room.roomState = e16.room.isConnected ? "Connected" : "Preview";
    }, "reconnected");
  }
  onReconnecting(e16) {
    let t11 = N.convertException(e16);
    k.e("Reconnection: received error from sdk", t11), this.hmsNotifications.sendReconnecting(t11), this.setState((i9) => {
      i9.room.roomState = "Reconnecting", i9.errors.push(t11);
    }, "reconnecting");
  }
  onError(e16) {
    let t11 = N.convertException(e16);
    t11.isTerminal ? (this.leave().then(() => k.e("error from SDK, left room.")), this.setState((i9) => {
      i9.room.roomState = "Failed", i9.errors.push(t11);
    }, "errorTerminal")) : this.store.getState().errors.length < 50 && this.setState((r9) => {
      r9.errors.push(t11);
    }, "error"), this.syncRoomState("errorSync"), this.hmsNotifications.sendError(t11), k.e("received error from sdk", t11 instanceof f ? `${t11}` : t11);
  }
  handleTrackRemove(e16, t11) {
    this.setState((i9) => {
      let r9 = i9.peers[t11.peerId], s9 = i9.tracks, o14 = e16.trackId;
      if (r9) if (o14 === r9.audioTrack) delete r9.audioTrack;
      else if (o14 === r9.videoTrack) delete r9.videoTrack;
      else {
        let n9 = r9.auxiliaryTracks.indexOf(o14);
        n9 > -1 && r9.auxiliaryTracks.splice(n9, 1);
      }
      delete s9[o14];
    }, "trackRemoved");
  }
  setEnabledSDKTrack(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.getLocalTrack(e16);
      i9 ? yield i9.setEnabled(t11) : this.logPossibleInconsistency(`track ${e16} not present, unable to enabled/disable`);
    });
  }
  setSDKLocalVideoTrackSettings(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.getLocalTrack(e16);
      i9 ? yield i9.setSettings(t11) : this.logPossibleInconsistency(`local track ${e16} not present, unable to set settings`);
    });
  }
  setSDKLocalAudioTrackSettings(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.getLocalTrack(e16);
      i9 ? yield i9.setSettings(t11) : this.logPossibleInconsistency(`local track ${e16} not present, unable to set settings`);
    });
  }
  getMediaSettings(e16) {
    var s9;
    let t11 = this.store.getState(Xr), i9 = e16.audioTrack, r9 = e16.videoTrack;
    return { audioInputDeviceId: (i9 == null ? void 0 : i9.settings.deviceId) || t11.audioInputDeviceId, videoInputDeviceId: (r9 == null ? void 0 : r9.settings.deviceId) || t11.videoInputDeviceId, audioOutputDeviceId: (s9 = this.sdk.getAudioOutput().getDevice()) == null ? void 0 : s9.deviceId };
  }
  getPreviewFields(e16) {
    var i9, r9;
    if (!e16.isInPreview()) return;
    let t11 = N.convertPeer(e16);
    return { localPeer: t11.id, audioTrack: t11.audioTrack, videoTrack: t11.videoTrack, asRole: ((i9 = e16.asRole) == null ? void 0 : i9.name) || ((r9 = e16.role) == null ? void 0 : r9.name) };
  }
  setTrackVolume(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.getTrackById(t11);
      i9 ? i9 instanceof Ee ? (yield i9.setVolume(e16), this.setState((r9) => {
        let s9 = r9.tracks[t11];
        s9 && s9.type === "audio" && (s9.volume = e16);
      }, "trackVolume")) : k.w(`track ${t11} is not an audio track`) : this.logPossibleInconsistency(`track ${t11} not present, unable to set volume`);
    });
  }
  localAndVideoUnmuting(e16) {
    let t11 = this.store.getState(z);
    if ((t11 == null ? void 0 : t11.videoTrack) !== e16) return false;
    let i9 = this.store.getState(es), r9 = this.store.getState(rr);
    return i9 && !r9;
  }
  logPossibleInconsistency(e16) {
    k.w("possible inconsistency detected - ", e16);
  }
  addRemoveVideoPlugin(e16, t11, i9) {
    return c(this, null, function* () {
      if (!e16) {
        k.w("Invalid plugin received in store");
        return;
      }
      let r9 = this.store.getState(q);
      if (r9) {
        let s9 = this.getLocalTrack(r9);
        s9 ? (t11 === "add" ? yield s9.addPlugin(e16, i9) : t11 === "remove" && (yield s9.removePlugin(e16)), this.syncRoomState(`${t11}VideoPlugin`)) : this.logPossibleInconsistency(`track ${r9} not present, unable to ${t11} plugin`);
      }
    });
  }
  addRemoveMediaStreamVideoPlugins(e16, t11) {
    return c(this, null, function* () {
      if (e16.length === 0) {
        k.w("Invalid plugin received in store");
        return;
      }
      let i9 = this.store.getState(q);
      if (i9) {
        let r9 = this.getLocalTrack(i9);
        r9 ? (t11 === "add" ? yield r9.addStreamPlugins(e16) : t11 === "remove" && (yield r9.removeStreamPlugins(e16)), this.syncRoomState(`${t11}MediaStreamPlugin`)) : this.logPossibleInconsistency(`track ${i9} not present, unable to ${t11} plugin`);
      }
    });
  }
  addRemoveAudioPlugin(e16, t11) {
    return c(this, null, function* () {
      if (!e16) {
        k.w("Invalid plugin received in store");
        return;
      }
      let i9 = this.store.getState(Z);
      if (i9) {
        let r9 = this.getLocalTrack(i9);
        r9 ? (t11 === "add" ? yield r9.addPlugin(e16) : t11 === "remove" && (yield r9.removePlugin(e16)), this.syncRoomState(`${t11}AudioPlugin`)) : this.logPossibleInconsistency(`track ${i9} not present, unable to ${t11} plugin`);
      }
    });
  }
  onRoleChangeRequest(e16) {
    this.setState((t11) => {
      t11.roleChangeRequests.length === 0 && t11.roleChangeRequests.push(N.convertRoleChangeRequest(e16));
    }, "roleChangeRequest");
  }
  removeRoleChangeRequest(e16) {
    this.setState((t11) => {
      let i9 = t11.roleChangeRequests.findIndex((r9) => r9.token === e16.token);
      i9 !== -1 && t11.roleChangeRequests.splice(i9, 1);
    }, "removeRoleChangeRequest");
  }
  onRoleUpdate() {
    this.syncRoomState("roleUpdate");
  }
  getStoreLocalTrackIDfromSDKTrack(e16) {
    return this.store.getState(Zr).find((i9) => {
      var r9;
      return ((r9 = this.getTrackById(i9)) == null ? void 0 : r9.trackId) === e16.trackId;
    });
  }
  updateMidCallPreviewRoomState(e16, t11) {
    t11.isLocal && e16 === 8 && this.store.getState(ts) && this.setState((i9) => {
      i9.room.roomState = "Connected";
    }, "midCallPreviewCompleted");
  }
  setSessionStoreValueLocally(e16, t11 = "setSessionStore") {
    let i9 = Array.isArray(e16) ? e16 : [e16];
    this.setState((r9) => {
      i9.forEach((s9) => {
        r9.sessionStore[s9.key] = s9.value;
      });
    }, t11);
  }
};
var Ti = (a12) => _ ? `${a12} ${document.title}` : a12;
var yt = class {
  constructor(e16) {
    this.recording = { server: { running: false }, browser: { running: false }, hls: { running: false } };
    this.rtmp = { running: false };
    this.hls = { running: false, variants: [] };
    this.id = e16;
  }
};
var fi = class {
  constructor(e16, t11) {
    this.eventBus = e16;
    this.listener = t11;
    this.TAG = "[NetworkTestManager]";
    this.controller = new AbortController();
    this.start = (e17) => c(this, null, function* () {
      var u3;
      if (!e17) return;
      let { url: t12, timeout: i9, scoreMap: r9 } = e17, s9 = this.controller.signal, o14 = Date.now(), n9 = 0, l5 = J(i9).then(() => {
        this.controller.abort();
      });
      try {
        let h2 = (u3 = (yield fetch(`${t12}?${Date.now()}`, { signal: s9 })).body) == null ? void 0 : u3.getReader();
        if (!h2) throw Error("unable to process request");
        let g2 = () => c(this, null, function* () {
          if (h2) try {
            let T = false;
            for (; !T; ) {
              let { value: E2, done: A } = yield h2.read();
              T = A, E2 && (n9 += E2.byteLength, this.sendScore({ scoreMap: r9, downloadedSize: n9, startTime: o14 }));
            }
          } catch (T) {
            T.name !== "AbortError" && d.d(this.TAG, T);
          }
        });
        return Promise.race([g2(), l5]).then(() => {
          this.sendScore({ scoreMap: r9, downloadedSize: n9, startTime: o14, finished: true });
        }).catch((T) => {
          d.d(this.TAG, T), this.updateScoreToListener(0), this.eventBus.analytics.publish(y.previewNetworkQuality({ error: T.message }));
        });
      } catch (p2) {
        p2.name !== "AbortError" ? (d.d(this.TAG, p2), this.updateScoreToListener(0), this.eventBus.analytics.publish(y.previewNetworkQuality({ error: p2.message }))) : d.d(this.TAG, p2);
      }
    });
    this.stop = () => {
      this.controller.signal.aborted || this.controller.abort();
    };
    this.sendScore = ({ scoreMap: e17, downloadedSize: t12, startTime: i9, finished: r9 = false }) => {
      let s9 = (Date.now() - i9) / 1e3, n9 = t12 / 1024 / s9 * 8, l5 = -1;
      for (let u3 in e17) {
        let p2 = e17[u3];
        n9 >= p2.low && (!p2.high || n9 <= p2.high) && (l5 = Number(u3));
      }
      this.updateScoreToListener(l5), r9 && this.eventBus.analytics.publish(y.previewNetworkQuality({ score: l5, downLink: n9.toFixed(2) }));
    };
  }
  updateScoreToListener(e16) {
    var t11, i9;
    e16 !== this.score && (this.score = e16, (i9 = (t11 = this.listener) == null ? void 0 : t11.onNetworkQuality) == null || i9.call(t11, e16));
  }
};
var kt = class {
  constructor(e16, t11, i9, r9, s9, o14) {
    this.store = e16;
    this.transport = t11;
    this.deviceManager = i9;
    this.publish = r9;
    this.removeAuxiliaryTrack = s9;
    this.listener = o14;
    this.handleLocalPeerRoleUpdate = (i10) => c(this, [i10], function* ({ oldRole: e17, newRole: t12 }) {
      var s10;
      let r10 = this.store.getLocalPeer();
      r10 && (yield this.diffRolesAndPublishTracks({ oldRole: e17, newRole: t12 }), (s10 = this.listener) == null || s10.onPeerUpdate(8, r10));
    });
    this.diffRolesAndPublishTracks = (i10) => c(this, [i10], function* ({ oldRole: e17, newRole: t12 }) {
      var T, E2, A, w, Me, Wr;
      let r10 = new Set(e17.publishParams.allowed), s10 = new Set(t12.publishParams.allowed), o15 = this.removeTrack(r10, s10, "video"), n9 = this.removeTrack(r10, s10, "audio"), l5 = this.removeTrack(r10, s10, "screen"), u3 = this.hasSimulcastDifference((T = e17.publishParams.simulcast) == null ? void 0 : T.video, (E2 = t12.publishParams.simulcast) == null ? void 0 : E2.video), p2 = this.hasSimulcastDifference((A = e17.publishParams.simulcast) == null ? void 0 : A.screen, (w = t12.publishParams.simulcast) == null ? void 0 : w.screen), h2 = (Wr = (Me = this.store.getLocalPeer()) == null ? void 0 : Me.videoTrack) == null ? void 0 : Wr.enabled;
      yield this.removeAudioTrack(n9), yield this.removeVideoTracks(o15 || u3), yield this.removeScreenTracks(l5 || p2);
      let g2 = this.getSettings();
      u3 && (g2.isVideoMuted = !h2), yield this.publish(g2), yield this.syncDevices(g2, t12);
    });
  }
  syncDevices(e16, t11) {
    return c(this, null, function* () {
      (!e16.isAudioMuted || !e16.isVideoMuted) && t11.publishParams.allowed.length > 0 && (yield this.deviceManager.init(true));
    });
  }
  removeVideoTracks(e16) {
    return c(this, null, function* () {
      var i9;
      if (!e16) return;
      let t11 = this.store.getLocalPeer();
      t11 != null && t11.videoTrack && (t11.videoTrack.isPublished ? yield this.transport.unpublish([t11.videoTrack]) : yield t11.videoTrack.cleanup(), (i9 = this.listener) == null || i9.onTrackUpdate(1, t11.videoTrack, t11), t11.videoTrack = void 0), yield this.removeAuxTracks((r9) => r9.source !== "screen" && r9.type === "video");
    });
  }
  removeAudioTrack(e16) {
    return c(this, null, function* () {
      var i9;
      if (!e16) return;
      let t11 = this.store.getLocalPeer();
      t11 != null && t11.audioTrack && (t11.audioTrack.isPublished ? yield this.transport.unpublish([t11.audioTrack]) : yield t11.audioTrack.cleanup(), (i9 = this.listener) == null || i9.onTrackUpdate(1, t11.audioTrack, t11), t11.audioTrack = void 0), yield this.removeAuxTracks((r9) => r9.source !== "screen" && r9.type === "audio");
    });
  }
  removeScreenTracks(e16) {
    return c(this, null, function* () {
      e16 && (yield this.removeAuxTracks((t11) => t11.source === "screen"));
    });
  }
  removeAuxTracks(e16) {
    return c(this, null, function* () {
      let t11 = this.store.getLocalPeer();
      if (t11 != null && t11.auxiliaryTracks) {
        let i9 = [...t11.auxiliaryTracks];
        for (let r9 of i9) e16(r9) && (yield this.removeAuxiliaryTrack(r9.trackId));
      }
    });
  }
  removeTrack(e16, t11, i9) {
    return e16.has(i9) && !t11.has(i9);
  }
  hasSimulcastDifference(e16, t11) {
    var i9, r9, s9;
    return !e16 && !t11 ? false : ((i9 = e16 == null ? void 0 : e16.layers) == null ? void 0 : i9.length) !== ((r9 = t11 == null ? void 0 : t11.layers) == null ? void 0 : r9.length) ? true : !!((s9 = e16 == null ? void 0 : e16.layers) != null && s9.some((o14) => {
      var l5;
      let n9 = (l5 = t11 == null ? void 0 : t11.layers) == null ? void 0 : l5.find((u3) => u3.rid === o14.rid);
      return (n9 == null ? void 0 : n9.maxBitrate) !== o14.maxBitrate || (n9 == null ? void 0 : n9.maxFramerate) !== o14.maxFramerate;
    }));
  }
  getSettings() {
    var t11, i9, r9;
    let e16 = (t11 = this.store.getConfig()) == null ? void 0 : t11.settings;
    return { isAudioMuted: (i9 = e16 == null ? void 0 : e16.isAudioMuted) != null ? i9 : true, isVideoMuted: (r9 = e16 == null ? void 0 : e16.isVideoMuted) != null ? r9 : true, audioInputDeviceId: (e16 == null ? void 0 : e16.audioInputDeviceId) || "default", audioOutputDeviceId: (e16 == null ? void 0 : e16.audioOutputDeviceId) || "default", videoDeviceId: (e16 == null ? void 0 : e16.videoDeviceId) || "default" };
  }
};
var Or = class {
  constructor() {
    this.TAG = "[HTTPAnalyticsTransport]";
    this.failedEvents = new ce("client-events");
    this.isConnected = true;
    this.env = null;
    this.websocketURL = "";
  }
  setEnv(e16) {
    this.env = e16, this.flushFailedEvents();
  }
  setWebsocketEndpoint(e16) {
    this.websocketURL = e16;
  }
  sendEvent(e16) {
    if (!this.env) {
      this.addEventToStorage(e16);
      return;
    }
    let t11 = { event: e16.name, payload: e16.properties, event_id: String(e16.timestamp), peer: e16.metadata.peer, timestamp: e16.timestamp, device_id: e16.device_id, cluster: { websocket_url: this.websocketURL } }, i9 = this.env === "prod" ? Ws : $s;
    fetch(i9, { method: "POST", headers: { "Content-Type": "application/json", Authorization: `Bearer ${e16.metadata.token}`, user_agent_v2: e16.metadata.userAgent }, body: JSON.stringify(t11) }).then((r9) => {
      if (r9.status === 401) {
        this.removeFromStorage(e16);
        return;
      }
      if (r9.status !== 200) throw Error(r9.statusText);
      this.removeFromStorage(e16);
    }).catch((r9) => {
      d.v(this.TAG, "Failed to send event", r9, e16), this.addEventToStorage(e16);
    });
  }
  flushFailedEvents() {
    let e16 = this.failedEvents.get();
    e16 == null || e16.forEach((t11) => this.sendEvent(t11));
  }
  addEventToStorage(e16) {
    let t11 = this.failedEvents.get() || [];
    t11.find((i9) => i9.timestamp === e16.timestamp) || (t11.length === 100 && t11.shift(), t11.push(e16), this.failedEvents.set(t11));
  }
  removeFromStorage(e16) {
    let t11 = this.failedEvents.get() || [], i9 = t11.findIndex((r9) => r9.timestamp === e16.timestamp);
    i9 > -1 && (t11.splice(i9, 1), this.failedEvents.set(t11));
  }
};
var Te = new Or();
var Et = class {
  constructor() {
    this.TAG = "[Store]:";
    this.knownRoles = {};
    this.peers = {};
    this.tracks = /* @__PURE__ */ new Map();
    this.peerTrackStates = {};
    this.speakers = [];
    this.roleDetailsArrived = false;
    this.env = "prod";
    this.simulcastEnabled = false;
    this.userAgent = ot(this.env);
    this.polls = /* @__PURE__ */ new Map();
    this.whiteboards = /* @__PURE__ */ new Map();
  }
  getConfig() {
    return this.config;
  }
  setSimulcastEnabled(e16) {
    this.simulcastEnabled = e16;
  }
  getEnv() {
    return this.env;
  }
  getPublishParams() {
    let e16 = this.getLocalPeer(), t11 = (e16 == null ? void 0 : e16.asRole) || (e16 == null ? void 0 : e16.role);
    return t11 == null ? void 0 : t11.publishParams;
  }
  getRoom() {
    return this.room;
  }
  getPolicyForRole(e16) {
    return this.knownRoles[e16];
  }
  getKnownRoles() {
    return this.knownRoles;
  }
  getTemplateAppData() {
    return this.templateAppData;
  }
  getLocalPeer() {
    if (this.localPeerId && this.peers[this.localPeerId]) return this.peers[this.localPeerId];
  }
  getRemotePeers() {
    return Object.values(this.peers).filter((e16) => !e16.isLocal);
  }
  getPeers() {
    return Object.values(this.peers);
  }
  getPeerMap() {
    return this.peers;
  }
  getPeerById(e16) {
    if (this.peers[e16]) return this.peers[e16];
  }
  getTracksMap() {
    return this.tracks;
  }
  getTracks() {
    return Array.from(this.tracks.values());
  }
  getVideoTracks() {
    return this.getTracks().filter((e16) => e16.type === "video");
  }
  getRemoteVideoTracks() {
    return this.getTracks().filter((e16) => e16 instanceof O);
  }
  getAudioTracks() {
    return this.getTracks().filter((e16) => e16.type === "audio");
  }
  getPeerTracks(e16) {
    let t11 = e16 ? this.peers[e16] : void 0, i9 = [];
    return t11 != null && t11.videoTrack && i9.push(t11.videoTrack), t11 != null && t11.audioTrack && i9.push(t11.audioTrack), i9.concat((t11 == null ? void 0 : t11.auxiliaryTracks) || []);
  }
  getLocalPeerTracks() {
    return this.getPeerTracks(this.localPeerId);
  }
  hasTrack(e16) {
    return this.tracks.has(e16);
  }
  getTrackById(e16) {
    var r9, s9;
    let t11 = Array.from(this.tracks.values()).find((o14) => o14.trackId === e16);
    if (t11) return t11;
    let i9 = this.getLocalPeer();
    if (i9) {
      if ((r9 = i9.audioTrack) != null && r9.isPublishedTrackId(e16)) return i9.audioTrack;
      if ((s9 = i9.videoTrack) != null && s9.isPublishedTrackId(e16)) return i9.videoTrack;
    }
  }
  getPeerByTrackId(e16) {
    let t11 = Array.from(this.tracks.values()).find((i9) => i9.trackId === e16);
    return t11 != null && t11.peerId ? this.peers[t11.peerId] : void 0;
  }
  getSpeakers() {
    return this.speakers;
  }
  getSpeakerPeers() {
    return this.speakers.map((e16) => e16.peer);
  }
  getUserAgent() {
    return this.userAgent;
  }
  createAndSetUserAgent(e16) {
    this.userAgent = ot(this.env, e16);
  }
  setRoom(e16) {
    this.room = e16;
  }
  setKnownRoles(e16) {
    var i9, r9;
    if (this.knownRoles = e16.known_roles, this.addPluginsToRoles(e16.plugins), this.roleDetailsArrived = true, this.templateAppData = e16.app_data, !this.simulcastEnabled) return;
    let t11 = (i9 = this.knownRoles[e16.name]) == null ? void 0 : i9.publishParams;
    this.videoLayers = this.convertSimulcastLayers((r9 = t11.simulcast) == null ? void 0 : r9.video), this.updatePeersPolicy();
  }
  hasRoleDetailsArrived() {
    return this.roleDetailsArrived;
  }
  setConfig(e16) {
    var t11, i9, r9;
    if (j.rememberDevices(!!e16.rememberDeviceSelection), e16.rememberDeviceSelection) {
      let s9 = j.getSelection();
      s9 && (e16.settings || (e16.settings = {}), (t11 = s9.audioInput) != null && t11.deviceId && (e16.settings.audioInputDeviceId = e16.settings.audioInputDeviceId || s9.audioInput.deviceId), (i9 = s9.audioOutput) != null && i9.deviceId && (e16.settings.audioOutputDeviceId = e16.settings.audioOutputDeviceId || s9.audioOutput.deviceId), (r9 = s9.videoInput) != null && r9.deviceId && (e16.settings.videoDeviceId = e16.settings.videoDeviceId || s9.videoInput.deviceId));
    }
    e16.autoManageVideo = e16.autoManageVideo !== false, e16.autoManageWakeLock = e16.autoManageWakeLock !== false, this.config = e16, this.setEnv();
  }
  addPeer(e16) {
    this.peers[e16.peerId] = e16, e16.isLocal && (this.localPeerId = e16.peerId);
  }
  addTrack(e16) {
    this.tracks.set(e16, e16);
  }
  getTrackState(e16) {
    return this.peerTrackStates[e16];
  }
  setTrackState(e16) {
    this.peerTrackStates[e16.trackInfo.track_id] = e16;
  }
  removePeer(e16) {
    this.localPeerId === e16 && (this.localPeerId = void 0), delete this.peers[e16];
  }
  removeTrack(e16) {
    this.tracks.delete(e16);
  }
  updateSpeakers(e16) {
    this.speakers = e16;
  }
  updateAudioOutputVolume(e16) {
    return c(this, null, function* () {
      for (let t11 of this.getAudioTracks()) yield t11.setVolume(e16);
    });
  }
  updateAudioOutputDevice(e16) {
    return c(this, null, function* () {
      let t11 = [];
      this.getAudioTracks().forEach((i9) => {
        i9 instanceof te && t11.push(i9.setOutputDevice(e16));
      }), yield Promise.all(t11);
    });
  }
  getSimulcastLayers(e16) {
    var t11;
    return !this.simulcastEnabled || !["screen", "regular"].includes(e16) ? [] : e16 === "screen" ? [] : ((t11 = this.videoLayers) == null ? void 0 : t11.layers) || [];
  }
  convertSimulcastLayers(e16) {
    if (e16) return v(m({}, e16), { layers: (e16.layers || []).map((t11) => v(m({}, t11), { maxBitrate: t11.maxBitrate * 1e3 })) });
  }
  getSimulcastDefinitionsForPeer(e16, t11) {
    var n9, l5, u3;
    if ([!e16 || !e16.role, t11 === "screen", !this.simulcastEnabled].some((p2) => !!p2)) return [];
    let i9 = this.getPolicyForRole(e16.role.name).publishParams, r9, s9, o14;
    return t11 === "regular" ? (r9 = (n9 = i9.simulcast) == null ? void 0 : n9.video, s9 = i9.video.width, o14 = i9.video.height) : t11 === "screen" && (r9 = (l5 = i9.simulcast) == null ? void 0 : l5.screen, s9 = i9.screen.width, o14 = i9.screen.height), ((u3 = r9 == null ? void 0 : r9.layers) == null ? void 0 : u3.map((p2) => {
      let h2 = we[p2.rid], g2 = { width: Math.floor(s9 / p2.scaleResolutionDownBy), height: Math.floor(o14 / p2.scaleResolutionDownBy) };
      return { layer: h2, resolution: g2 };
    })) || [];
  }
  setPoll(e16) {
    this.polls.set(e16.id, e16);
  }
  getPoll(e16) {
    return this.polls.get(e16);
  }
  setWhiteboard(e16) {
    this.whiteboards.set(e16.id, e16);
  }
  getWhiteboards() {
    return this.whiteboards;
  }
  getWhiteboard(e16) {
    return e16 ? this.whiteboards.get(e16) : this.whiteboards.values().next().value;
  }
  getErrorListener() {
    return this.errorListener;
  }
  cleanup() {
    let e16 = this.getTracks();
    for (let t11 of e16) t11.cleanup();
    this.room = void 0, this.config = void 0, this.localPeerId = void 0, this.roleDetailsArrived = false;
  }
  setErrorListener(e16) {
    this.errorListener = e16;
  }
  updatePeersPolicy() {
    this.getPeers().forEach((e16) => {
      var t11;
      if (!e16.role) {
        (t11 = this.errorListener) == null || t11.onError(S.GenericErrors.InvalidRole("VALIDATION", ""));
        return;
      }
      e16.role = this.getPolicyForRole(e16.role.name);
    });
  }
  addPluginsToRoles(e16) {
    if (!e16) return;
    let t11 = (i9, r9, s9) => {
      var n9;
      if (!this.knownRoles[i9]) {
        d.d(this.TAG, `role ${i9} is not present in given roles`, this.knownRoles);
        return;
      }
      let o14 = this.knownRoles[i9].permissions;
      o14[r9] || (o14[r9] = []), (n9 = o14[r9]) == null || n9.push(s9);
    };
    Object.keys(e16).forEach((i9) => {
      var o14, n9, l5;
      let r9 = i9;
      if (!e16[r9]) return;
      let s9 = e16[r9].permissions;
      (o14 = s9 == null ? void 0 : s9.admin) == null || o14.forEach((u3) => t11(u3, r9, "admin")), (n9 = s9 == null ? void 0 : s9.reader) == null || n9.forEach((u3) => t11(u3, r9, "read")), (l5 = s9 == null ? void 0 : s9.writer) == null || l5.forEach((u3) => t11(u3, r9, "write"));
    });
  }
  setEnv() {
    var r9;
    let t11 = ((r9 = this.config) == null ? void 0 : r9.initEndpoint).split("https://")[1], i9 = "prod";
    t11.startsWith("prod") ? i9 = "prod" : t11.startsWith("qa") ? i9 = "qa" : t11.startsWith("dev") && (i9 = "dev"), this.env = i9, Te.setEnv(i9);
  }
};
var vi = class {
  constructor() {
    this.TAG = "[WakeLockManager]";
    this.wakeLock = null;
    this.acquireLock = () => c(this, null, function* () {
      yield this.requestWakeLock(), document == null || document.addEventListener("visibilitychange", this.visibilityHandler);
    });
    this.cleanup = () => c(this, null, function* () {
      if (this.wakeLock && !this.wakeLock.released) try {
        yield this.wakeLock.release(), d.d(this.TAG, "Wake lock released");
      } catch (e16) {
        let t11 = e16;
        d.w(this.TAG, "Error while releasing wake lock", `name=${t11.name}, message=${t11.message}`);
      }
      this.wakeLock = null;
    });
    this.visibilityHandler = () => c(this, null, function* () {
      (document == null ? void 0 : document.visibilityState) === "visible" && (!this.wakeLock || this.wakeLock.released) && (d.d(this.TAG, "Re-acquiring wake lock due to visibility change"), yield this.requestWakeLock());
    });
    this.requestWakeLock = () => c(this, null, function* () {
      try {
        if (!("wakeLock" in navigator)) {
          d.d(this.TAG, "Wake lock feature not supported");
          return;
        }
        this.wakeLock = yield navigator.wakeLock.request("screen"), d.d(this.TAG, "Wake lock acquired");
      } catch (e16) {
        let t11 = e16;
        d.w(this.TAG, "Error acquiring wake lock", `name=${t11.name}, message=${t11.message}`);
      }
    });
  }
};
var Mi = class {
  constructor(e16) {
    this.store = e16;
    this.bufferSize = 100;
    this.TAG = "[AnalyticsEventsService]";
    this.transport = null;
    this.pendingEvents = [];
    this.level = 1;
  }
  setTransport(e16) {
    this.transport = e16;
  }
  reset() {
    this.transport = null, this.pendingEvents = [];
  }
  queue(e16) {
    if (e16.level >= this.level && (this.pendingEvents.push(e16), this.pendingEvents.length > this.bufferSize)) {
      let t11 = this.pendingEvents.shift();
      d.d(this.TAG, "Max buffer size reached", "Removed event to accommodate new events", t11);
    }
    return this;
  }
  flushFailedClientEvents() {
    Te.flushFailedEvents();
  }
  flush() {
    var e16;
    try {
      for (; this.pendingEvents.length > 0; ) {
        let t11 = this.pendingEvents.shift();
        t11 && (t11.metadata.peer.peer_id = (e16 = this.store.getLocalPeer()) == null ? void 0 : e16.peerId, t11.metadata.userAgent = this.store.getUserAgent(), this.transport && this.transport.transportProvider.isConnected ? this.transport.sendEvent(t11) : this.sendClientEventOnHTTP(t11));
      }
    } catch (t11) {
      d.w(this.TAG, "Flush Failed", t11);
    }
  }
  sendClientEventOnHTTP(e16) {
    var r9, s9, o14, n9;
    let t11 = this.store.getRoom(), i9 = this.store.getLocalPeer();
    e16.metadata.token = (r9 = this.store.getConfig()) == null ? void 0 : r9.authToken, e16.metadata.peer = { session_id: t11 == null ? void 0 : t11.sessionId, room_id: t11 == null ? void 0 : t11.id, room_name: t11 == null ? void 0 : t11.name, template_id: t11 == null ? void 0 : t11.templateId, joined_at: (s9 = t11 == null ? void 0 : t11.joinedAt) == null ? void 0 : s9.getTime(), session_started_at: (o14 = t11 == null ? void 0 : t11.startedAt) == null ? void 0 : o14.getTime(), role: (n9 = i9 == null ? void 0 : i9.role) == null ? void 0 : n9.name, user_name: i9 == null ? void 0 : i9.name, user_data: i9 == null ? void 0 : i9.metadata, peer_id: i9 == null ? void 0 : i9.peerId }, Te.sendEvent(e16);
  }
};
var ma = { autoplayFailed: void 0, initialized: false, autoplayCheckPromise: void 0 };
var Pt = class {
  constructor(e16, t11, i9) {
    this.store = e16;
    this.deviceManager = t11;
    this.eventBus = i9;
    this.autoPausedTracks = /* @__PURE__ */ new Set();
    this.TAG = "[AudioSinkManager]:";
    this.volume = 100;
    this.state = m({}, ma);
    this.timer = null;
    this.earpieceSelected = false;
    this.handleAudioPaused = (e17) => c(this, null, function* () {
      var s9;
      let i10 = (s9 = e17.target.srcObject) == null ? void 0 : s9.getAudioTracks()[0];
      if (!(i10 != null && i10.enabled)) return;
      d.d(this.TAG, "Audio Paused", e17.target.id);
      let r9 = this.store.getTrackById(e17.target.id);
      r9 && (Le() ? (yield J(500), this.playAudioFor(r9)) : this.autoPausedTracks.add(r9));
    });
    this.handleTrackUpdate = ({ track: e17 }) => {
      d.d(this.TAG, "Track updated", `${e17}`);
    };
    this.handleTrackAdd = (r9) => c(this, [r9], function* ({ track: e17, peer: t12, callListener: i10 = true }) {
      var o14, n9;
      let s9 = document.createElement("audio");
      s9.style.display = "none", s9.id = e17.trackId, s9.addEventListener("pause", this.handleAudioPaused), s9.onerror = () => c(this, null, function* () {
        var u3, p2;
        d.e(this.TAG, "error on audio element", s9.error);
        let l5 = S.TracksErrors.AudioPlaybackError(`Audio playback error for track - ${e17.trackId} code - ${(u3 = s9 == null ? void 0 : s9.error) == null ? void 0 : u3.code}`);
        this.eventBus.analytics.publish(y.audioPlaybackError(l5)), ((p2 = s9 == null ? void 0 : s9.error) == null ? void 0 : p2.code) === MediaError.MEDIA_ERR_DECODE && (this.removeAudioElement(s9, e17), yield J(500), yield this.handleTrackAdd({ track: e17, peer: t12, callListener: false }));
      }), e17.setAudioElement(s9), e17.setVolume(this.volume), d.d(this.TAG, "Audio track added", `${e17}`), this.init(), yield this.autoSelectAudioOutput(), (o14 = this.audioSink) == null || o14.append(s9), this.outputDevice && (yield e17.setOutputDevice(this.outputDevice)), s9.srcObject = new MediaStream([e17.nativeTrack]), i10 && ((n9 = this.listener) == null || n9.onTrackUpdate(0, e17, t12)), yield this.handleAutoplayError(e17);
    });
    this.handleAutoplayError = (e17) => c(this, null, function* () {
      if (this.state.autoplayFailed === void 0 && (this.state.autoplayCheckPromise || (this.state.autoplayCheckPromise = new Promise((t12) => {
        this.playAudioFor(e17).then(t12);
      })), yield this.state.autoplayCheckPromise), this.state.autoplayFailed) {
        this.autoPausedTracks.add(e17);
        return;
      }
      yield this.playAudioFor(e17);
    });
    this.handleAudioDeviceChange = (e17) => {
      e17.isUserSelection || e17.error || !e17.selection || e17.type === "video" || this.unpauseAudioTracks();
    };
    this.handleTrackRemove = (e17) => {
      this.autoPausedTracks.delete(e17);
      let t12 = document.getElementById(e17.trackId);
      t12 && this.removeAudioElement(t12, e17), this.audioSink && this.audioSink.childElementCount === 0 && (this.state.autoplayCheckPromise = void 0, this.state.autoplayFailed = void 0), d.d(this.TAG, "Audio track removed", `${e17}`);
    };
    this.unpauseAudioTracks = () => c(this, null, function* () {
      let e17 = [];
      this.autoPausedTracks.forEach((t12) => {
        e17.push(this.playAudioFor(t12));
      }), yield Promise.all(e17);
    });
    this.removeAudioElement = (e17, t12) => {
      e17 && (d.d(this.TAG, "removing audio element", `${t12}`), e17.removeEventListener("pause", this.handleAudioPaused), e17.srcObject = null, e17.remove(), t12.setAudioElement(null));
    };
    this.startPollingForDevices = () => {
      "ondevicechange" in navigator.mediaDevices || (this.timer = setInterval(() => {
        c(this, null, function* () {
          yield this.deviceManager.init(true, false), yield this.autoSelectAudioOutput();
        });
      }, 5e3));
    };
    this.autoSelectAudioOutput = () => c(this, null, function* () {
      var o14, n9;
      if (!((o14 = this.audioSink) != null && o14.children.length)) {
        d.d(this.TAG, "No remote audio added yet");
        return;
      }
      let e17 = null, t12 = null, i10 = null, r9 = null;
      for (let l5 of this.deviceManager.audioInput) {
        let u3 = l5.label.toLowerCase();
        u3.includes("speakerphone") ? t12 = l5 : u3.includes("wired") ? i10 = l5 : u3.includes("bluetooth") ? e17 = l5 : u3.includes("earpiece") && (r9 = l5);
      }
      let s9 = (n9 = this.store.getLocalPeer()) == null ? void 0 : n9.audioTrack;
      if (s9 && r9) {
        let l5 = (e17 == null ? void 0 : e17.deviceId) || (i10 == null ? void 0 : i10.deviceId) || (t12 == null ? void 0 : t12.deviceId);
        if (d.d(this.TAG, "externalDeviceID", l5), s9.settings.deviceId === l5) return;
        this.earpieceSelected || (yield s9.setSettings({ deviceId: r9 == null ? void 0 : r9.deviceId }, true), this.earpieceSelected = true), yield s9.setSettings({ deviceId: l5 }, true);
      }
    });
    this.eventBus.audioTrackAdded.subscribe(this.handleTrackAdd), this.eventBus.audioTrackRemoved.subscribe(this.handleTrackRemove), this.eventBus.audioTrackUpdate.subscribe(this.handleTrackUpdate), this.eventBus.deviceChange.subscribe(this.handleAudioDeviceChange), this.startPollingForDevices();
  }
  setListener(e16) {
    this.listener = e16;
  }
  get outputDevice() {
    return this.deviceManager.outputDevice;
  }
  getVolume() {
    return this.volume;
  }
  setVolume(e16) {
    return c(this, null, function* () {
      yield this.store.updateAudioOutputVolume(e16), this.volume = e16;
    });
  }
  unblockAutoplay() {
    return c(this, null, function* () {
      this.autoPausedTracks.size > 0 && this.unpauseAudioTracks();
    });
  }
  init(e16) {
    if (this.state.initialized || this.audioSink) return;
    this.state.initialized = true;
    let t11 = document.createElement("div");
    t11.id = `HMS-SDK-audio-sink-${v4_default()}`, (e16 && document.getElementById(e16) || document.body).append(t11), this.audioSink = t11, d.d(this.TAG, "audio sink created", this.audioSink);
  }
  cleanup() {
    var e16;
    (e16 = this.audioSink) == null || e16.remove(), this.audioSink = void 0, this.timer && (clearInterval(this.timer), this.timer = null), this.eventBus.audioTrackAdded.unsubscribe(this.handleTrackAdd), this.eventBus.audioTrackRemoved.unsubscribe(this.handleTrackRemove), this.eventBus.audioTrackUpdate.unsubscribe(this.handleTrackUpdate), this.eventBus.deviceChange.unsubscribe(this.handleAudioDeviceChange), this.autoPausedTracks = /* @__PURE__ */ new Set(), this.state = m({}, ma);
  }
  playAudioFor(e16) {
    return c(this, null, function* () {
      let t11 = e16.getAudioElement();
      if (!t11) {
        d.w(this.TAG, "No audio element found on track", e16.trackId);
        return;
      }
      try {
        yield t11.play(), this.state.autoplayFailed = false, this.autoPausedTracks.delete(e16), d.d(this.TAG, "Played track", `${e16}`);
      } catch (i9) {
        this.autoPausedTracks.add(e16), d.w(this.TAG, "Failed to play track", `${e16}`, i9);
        let r9 = i9;
        if (!this.state.autoplayFailed && r9.name === "NotAllowedError") {
          this.state.autoplayFailed = true;
          let s9 = S.TracksErrors.AutoplayBlocked("AUTOPLAY", "");
          s9.addNativeError(r9), this.eventBus.analytics.publish(y.autoplayError()), this.eventBus.autoplayError.publish(s9);
        }
      }
    });
  }
};
var yi = class {
  constructor(e16) {
    this.eventBus = e16;
    this.pluginUsage = /* @__PURE__ */ new Map();
    this.pluginLastAddedAt = /* @__PURE__ */ new Map();
    this.getPluginUsage = (e17) => {
      if (this.pluginUsage.has(e17) || this.pluginUsage.set(e17, 0), this.pluginLastAddedAt.has(e17)) {
        let i9 = this.pluginLastAddedAt.get(e17) || 0, r9 = i9 ? Date.now() - i9 : 0;
        this.pluginUsage.set(e17, (this.pluginUsage.get(e17) || 0) + r9), this.pluginLastAddedAt.delete(e17);
      }
      return this.pluginUsage.get(e17);
    };
    this.updatePluginUsageData = (e17) => {
      var i9;
      let t11 = ((i9 = e17.properties) == null ? void 0 : i9.plugin_name) || "";
      switch (e17.name) {
        case "mediaPlugin.toggled.on":
        case "mediaPlugin.added": {
          let r9 = e17.properties.added_at || Date.now();
          this.pluginLastAddedAt.set(t11, r9);
          break;
        }
        case "mediaPlugin.toggled.off":
        case "mediaPlugin.stats": {
          if (this.pluginLastAddedAt.has(t11)) {
            let r9 = e17.properties.duration || (Date.now() - (this.pluginLastAddedAt.get(t11) || 0)) / 1e3;
            this.pluginUsage.set(t11, (this.pluginUsage.get(t11) || 0) + Math.max(r9, 0) * 1e3), this.pluginLastAddedAt.delete(t11);
          }
          break;
        }
        default:
      }
    };
    this.cleanup = () => {
      this.pluginLastAddedAt.clear(), this.pluginUsage.clear();
    };
    this.eventBus.analytics.subscribe((t11) => this.updatePluginUsageData(t11));
  }
};
var bt = class {
  constructor(e16, t11) {
    this.store = e16;
    this.eventBus = t11;
    this.audioInput = [];
    this.audioOutput = [];
    this.videoInput = [];
    this.hasWebcamPermission = false;
    this.hasMicrophonePermission = false;
    this.TAG = "[Device Manager]:";
    this.initialized = false;
    this.videoInputChanged = false;
    this.audioInputChanged = false;
    this.updateOutputDevice = (e17, t12) => c(this, null, function* () {
      let i10 = this.audioOutput.find((r9) => r9.deviceId === e17);
      return i10 && (this.outputDevice = i10, yield this.store.updateAudioOutputDevice(i10), this.eventBus.analytics.publish(y.deviceChange({ isUserSelection: t12, selection: { audioOutput: i10 }, devices: this.getDevices(), type: "audioOutput" })), j.updateSelection("audioOutput", { deviceId: i10.deviceId, groupId: i10.groupId })), i10;
    });
    this.getCurrentSelection = () => {
      var o14, n9;
      let e17 = this.store.getLocalPeer(), t12 = this.createIdentifier((o14 = e17 == null ? void 0 : e17.audioTrack) == null ? void 0 : o14.getMediaTrackSettings()), i10 = this.createIdentifier((n9 = e17 == null ? void 0 : e17.videoTrack) == null ? void 0 : n9.getMediaTrackSettings()), r9 = this.audioInput.find((l5) => this.createIdentifier(l5) === t12), s9 = this.videoInput.find((l5) => this.createIdentifier(l5) === i10);
      return { audioInput: r9, videoInput: s9, audioOutput: this.outputDevice };
    };
    this.computeChange = (e17, t12) => e17.length !== t12.length ? true : t12.some((i10) => !e17.includes(this.createIdentifier(i10)));
    this.enumerateDevices = () => c(this, null, function* () {
      try {
        let e17 = yield navigator.mediaDevices.enumerateDevices(), t12 = this.videoInput.map(this.createIdentifier), i10 = this.audioInput.map(this.createIdentifier);
        this.audioInput = [], this.audioOutput = [], this.videoInput = [], e17.forEach((r9) => {
          r9.kind === "audioinput" && r9.label ? (this.hasMicrophonePermission = true, this.audioInput.push(r9)) : r9.kind === "audiooutput" ? this.audioOutput.push(r9) : r9.kind === "videoinput" && r9.label && (this.hasWebcamPermission = true, this.videoInput.push(r9));
        }), this.videoInputChanged = this.computeChange(t12, this.videoInput), this.audioInputChanged = this.computeChange(i10, this.audioInput), j.setDevices({ videoInput: [...this.videoInput], audioInput: [...this.audioInput], audioOutput: [...this.audioOutput] }), this.logDevices("Enumerate Devices");
      } catch (e17) {
        d.e(this.TAG, "Failed enumerating devices", e17);
      }
    });
    this.handleDeviceChange = Qt(() => c(this, null, function* () {
      yield this.enumerateDevices(), this.logDevices("After Device Change");
      let e17 = this.store.getLocalPeer();
      yield this.setOutputDevice(true), yield this.handleAudioInputDeviceChange(e17 == null ? void 0 : e17.audioTrack), yield this.handleVideoInputDeviceChange(e17 == null ? void 0 : e17.videoTrack), this.eventBus.analytics.publish(y.deviceChange({ selection: this.getCurrentSelection(), type: "change", devices: this.getDevices() }));
    }), 500).bind(this);
    this.handleAudioInputDeviceChange = (e17) => c(this, null, function* () {
      if (!e17) {
        d.d(this.TAG, "No Audio track on local peer");
        return;
      }
      if (!this.audioInputChanged) {
        d.d(this.TAG, "No Change in AudioInput Device");
        return;
      }
      let t12 = this.getNewAudioInputDevice();
      if (!t12 || !t12.deviceId) {
        this.eventBus.analytics.publish(y.deviceChange({ selection: { audioInput: t12 }, error: S.TracksErrors.SelectedDeviceMissing("audio"), devices: this.getDevices(), type: "audioInput" })), d.e(this.TAG, "Audio device not found");
        return;
      }
      let { settings: i10 } = e17, r9 = new se().codec(i10.codec).maxBitrate(i10.maxBitrate).deviceId(t12.deviceId).build();
      try {
        yield e17.setSettings(r9, true), this.eventBus.deviceChange.publish({ devices: this.getDevices(), selection: t12, type: "audioInput" }), this.logDevices("Audio Device Change Success");
      } catch (s9) {
        d.e(this.TAG, "[Audio Device Change]", s9), this.eventBus.analytics.publish(y.deviceChange({ selection: { audioInput: t12 }, devices: this.getDevices(), type: "audioInput", error: s9 })), this.eventBus.deviceChange.publish({ error: s9, selection: t12, type: "audioInput", devices: this.getDevices() });
      }
    });
    this.handleVideoInputDeviceChange = (e17) => c(this, null, function* () {
      if (!e17) {
        d.d(this.TAG, "No video track on local peer");
        return;
      }
      if (!this.videoInputChanged) {
        d.d(this.TAG, "No Change in VideoInput Device");
        return;
      }
      let t12 = this.videoInput[0];
      if (!t12 || !t12.deviceId) {
        this.eventBus.analytics.publish(y.deviceChange({ selection: { videoInput: t12 }, error: S.TracksErrors.SelectedDeviceMissing("video"), devices: this.getDevices(), type: "video" })), d.e(this.TAG, "Video device not found");
        return;
      }
      let { settings: i10 } = e17, r9 = new ee().codec(i10.codec).maxBitrate(i10.maxBitrate).maxFramerate(i10.maxFramerate).setWidth(i10.width).setHeight(i10.height).deviceId(t12.deviceId).build();
      try {
        yield e17.setSettings(r9, true), this.eventBus.deviceChange.publish({ devices: this.getDevices(), selection: t12, type: "video" }), this.logDevices("Video Device Change Success");
      } catch (s9) {
        d.e(this.TAG, "[Video Device Change]", s9), this.eventBus.analytics.publish(y.deviceChange({ selection: { videoInput: t12 }, devices: this.getDevices(), type: "video", error: s9 })), this.eventBus.deviceChange.publish({ error: s9, type: "video", selection: t12, devices: this.getDevices() });
      }
    });
    let i9 = ({ enabled: r9, track: s9 }) => r9 && s9.source === "regular";
    this.eventBus.localVideoEnabled.waitFor(i9).then(() => c(this, null, function* () {
      yield this.enumerateDevices(), this.videoInputChanged && this.eventBus.deviceChange.publish({ devices: this.getDevices() });
    })), this.eventBus.localAudioEnabled.waitFor(i9).then(() => c(this, null, function* () {
      yield this.enumerateDevices(), this.audioInputChanged && this.eventBus.deviceChange.publish({ devices: this.getDevices() });
    })), this.eventBus.deviceChange.subscribe(({ type: r9, isUserSelection: s9, selection: o14 }) => {
      if (s9) {
        let n9 = r9 === "video" ? "videoInput" : r9, l5 = this[n9].find((u3) => this.createIdentifier(u3) === this.createIdentifier(o14));
        this.eventBus.analytics.publish(y.deviceChange({ selection: { [n9]: l5 }, devices: this.getDevices(), type: r9, isUserSelection: s9 }));
      }
    });
  }
  init(e16 = false, t11 = true) {
    return c(this, null, function* () {
      this.initialized && !e16 || (!this.initialized && navigator.mediaDevices.addEventListener("devicechange", this.handleDeviceChange), this.initialized = true, yield this.enumerateDevices(), this.logDevices("Init"), yield this.setOutputDevice(), this.eventBus.deviceChange.publish({ devices: this.getDevices() }), t11 && this.eventBus.analytics.publish(y.deviceChange({ selection: this.getCurrentSelection(), type: "list", devices: this.getDevices() })));
    });
  }
  getDevices() {
    return { audioInput: this.audioInput, audioOutput: this.audioOutput, videoInput: this.videoInput };
  }
  cleanup() {
    this.initialized = false, this.audioInput = [], this.audioOutput = [], this.videoInput = [], this.outputDevice = void 0, navigator.mediaDevices.removeEventListener("devicechange", this.handleDeviceChange);
  }
  createIdentifier(e16) {
    return e16 ? `${e16.deviceId}${e16.groupId}` : "";
  }
  getNewAudioInputDevice() {
    let e16 = this.store.getLocalPeer(), t11 = e16 == null ? void 0 : e16.audioTrack, i9 = this.audioInput.find((s9) => s9.deviceId === (t11 == null ? void 0 : t11.getManuallySelectedDeviceId()));
    if (i9) return i9;
    t11 == null || t11.resetManuallySelectedDeviceId();
    let r9 = this.audioInput.find((s9) => s9.deviceId === "default");
    return r9 ? this.audioInput.find((o14) => o14.deviceId !== "default" && r9.label.includes(o14.label)) : this.audioInput[0];
  }
  setOutputDevice(e16 = false) {
    return c(this, null, function* () {
      let t11 = this.getNewAudioInputDevice(), i9 = this.createIdentifier(this.outputDevice);
      this.outputDevice = this.getAudioOutputDeviceMatchingInput(t11), this.outputDevice || (this.outputDevice = this.audioOutput.find((r9) => this.createIdentifier(r9) === i9), this.outputDevice || (this.outputDevice = this.audioOutput.find((r9) => r9.deviceId === "default") || this.audioOutput[0])), yield this.store.updateAudioOutputDevice(this.outputDevice), e16 && i9 !== this.createIdentifier(this.outputDevice) && (this.eventBus.analytics.publish(y.deviceChange({ selection: { audioOutput: this.outputDevice }, devices: this.getDevices(), type: "audioOutput" })), this.eventBus.deviceChange.publish({ selection: this.outputDevice, type: "audioOutput", devices: this.getDevices() }));
    });
  }
  getAudioOutputDeviceMatchingInput(e16) {
    var o14, n9;
    let t11 = ((n9 = (o14 = this.store.getConfig()) == null ? void 0 : o14.settings) == null ? void 0 : n9.speakerAutoSelectionBlacklist) || [];
    if (t11 === "all" || !e16) return;
    let i9 = e16.label.toLowerCase() || "";
    if (t11.some((l5) => i9.includes(l5.toLowerCase()))) return;
    let r9 = this.audioOutput.find((l5) => e16.deviceId !== "default" && l5.label === e16.label);
    if (r9) return r9;
    let s9 = this.audioOutput.find((l5) => l5.groupId === e16.groupId);
    if (s9 && this.audioOutput[0].deviceId === "default" && s9.groupId === this.audioOutput[0].groupId) return s9;
  }
  logDevices(e16 = "") {
    d.d(this.TAG, e16, JSON.stringify({ videoInput: [...this.videoInput], audioInput: [...this.audioInput], audioOutput: [...this.audioOutput], selected: this.getCurrentSelection() }, null, 4));
  }
};
var ki = class {
  constructor(e16, t11) {
    this.deviceManager = e16;
    this.audioSinkManager = t11;
  }
  getVolume() {
    return this.audioSinkManager.getVolume();
  }
  setVolume(e16) {
    if (e16 < 0 || e16 > 100) throw Error("Please pass a valid number between 0-100");
    this.audioSinkManager.setVolume(e16);
  }
  getDevice() {
    return this.deviceManager.outputDevice;
  }
  setDevice(e16) {
    return this.deviceManager.updateOutputDevice(e16, true);
  }
  unblockAutoplay() {
    return c(this, null, function* () {
      yield this.audioSinkManager.unblockAutoplay(), yield Pe.resumeContext();
    });
  }
};
var x = class {
  constructor(e16, t11) {
    this.eventName = e16;
    this.eventEmitter = t11;
    this.publish = (e17) => {
      this.eventEmitter.emit(this.eventName, e17);
    };
    this.subscribe = (e17) => {
      this.eventEmitter.on(this.eventName, e17);
    };
    this.subscribeOnce = (e17) => {
      this.eventEmitter.once(this.eventName, e17);
    };
    this.unsubscribe = (e17) => {
      this.eventEmitter.off(this.eventName, e17);
    };
    this.waitFor = (e17) => this.eventEmitter.waitFor(this.eventName, { filter: e17 });
    this.removeAllListeners = () => {
      this.eventEmitter.removeAllListeners(this.eventName);
    };
  }
};
var At = class {
  constructor() {
    this.eventEmitter = new import_eventemitter23.EventEmitter2();
    this.deviceChange = new x(V.DEVICE_CHANGE, this.eventEmitter);
    this.localAudioEnabled = new x(V.LOCAL_AUDIO_ENABLED, this.eventEmitter);
    this.localVideoEnabled = new x(V.LOCAL_VIDEO_ENABLED, this.eventEmitter);
    this.statsUpdate = new x(V.STATS_UPDATE, this.eventEmitter);
    this.trackDegraded = new x(V.TRACK_DEGRADED, this.eventEmitter);
    this.trackRestored = new x(V.TRACK_RESTORED, this.eventEmitter);
    this.trackAudioLevelUpdate = new x(V.TRACK_AUDIO_LEVEL_UPDATE, this.eventEmitter);
    this.audioPluginFailed = new x(V.AUDIO_PLUGIN_FAILED, this.eventEmitter);
    this.localAudioSilence = new x(V.LOCAL_AUDIO_SILENCE, this.eventEmitter);
    this.analytics = new x(V.ANALYTICS, this.eventEmitter);
    this.policyChange = new x(V.POLICY_CHANGE, this.eventEmitter);
    this.localRoleUpdate = new x(V.LOCAL_ROLE_UPDATE, this.eventEmitter);
    this.audioTrackUpdate = new x(V.AUDIO_TRACK_UPDATE, this.eventEmitter);
    this.audioTrackAdded = new x(V.AUDIO_TRACK_ADDED, this.eventEmitter);
    this.audioTrackRemoved = new x(V.AUDIO_TRACK_REMOVED, this.eventEmitter);
    this.autoplayError = new x(V.AUTOPLAY_ERROR, this.eventEmitter);
    this.leave = new x(V.LEAVE, this.eventEmitter);
  }
};
var Rt = class {
  constructor(e16) {
    this.type = e16.type, this.source = e16.source || "regular", this.description = "", e16 instanceof ke ? (this.mute = !e16.enabled, this.track_id = e16.publishedTrackId, this.stream_id = e16.stream.id) : (this.mute = e16.mute, this.track_id = e16.track_id, this.stream_id = e16.stream_id);
  }
};
var Ei = class {
  constructor(e16, t11, i9) {
    this.store = e16;
    this.listener = t11;
    this.audioListener = i9;
  }
  handleActiveSpeakers(e16) {
    var s9, o14, n9;
    let t11 = e16["speaker-list"], i9 = t11.map((l5) => ({ audioLevel: l5.level, peer: this.store.getPeerById(l5.peer_id), track: this.store.getTrackById(l5.track_id) }));
    (s9 = this.audioListener) == null || s9.onAudioLevelUpdate(i9), this.store.updateSpeakers(i9);
    let r9 = t11[0];
    if (r9) {
      let l5 = this.store.getPeerById(r9.peer_id);
      (o14 = this.listener) == null || o14.onPeerUpdate(4, l5);
    } else (n9 = this.listener) == null || n9.onPeerUpdate(5, null);
  }
};
var Pi = class {
  constructor(e16) {
    this.listener = e16;
    this.TAG = "[BroadcastManager]";
  }
  handleNotification(e16, t11) {
    e16 === "on-broadcast" && this.handleBroadcast(t11);
  }
  handleBroadcast(e16) {
    var t11, i9;
    d.d(this.TAG, `Received Message from sender=${(t11 = e16 == null ? void 0 : e16.peer) == null ? void 0 : t11.peer_id}: ${e16}`), (i9 = this.listener) == null || i9.onMessageReceived(e16);
  }
};
var bi = class {
  constructor(e16, t11) {
    this.store = e16;
    this.listener = t11;
  }
  handleQualityUpdate(e16) {
    var r9;
    let i9 = e16.peers.map((s9) => {
      let o14 = this.store.getPeerById(s9.peer_id);
      return o14 && o14.updateNetworkQuality(s9.downlink_score), { peerID: s9.peer_id, downlinkQuality: s9.downlink_score };
    });
    (r9 = this.listener) == null || r9.onConnectionQualityUpdate(i9);
  }
};
var Ye = class {
  constructor(e16, t11, i9) {
    this.store = e16;
    this.eventBus = t11;
    this.listener = i9;
    this.TAG = "[TrackManager]";
    this.tracksToProcess = /* @__PURE__ */ new Map();
    this.handleTrackAdd = (e17) => {
      d.d(this.TAG, "ONTRACKADD", `${e17}`), this.tracksToProcess.set(e17.trackId, e17), this.processPendingTracks();
    };
    this.handleTrackRemovedPermanently = (e17) => {
      d.d(this.TAG, "ONTRACKREMOVE", e17), Object.keys(e17.tracks).forEach((i10) => {
        var n9;
        let r9 = this.store.getTrackState(i10);
        if (!r9) return;
        let s9 = this.store.getTrackById(i10);
        if (!s9) {
          d.d(this.TAG, "Track not found in store");
          return;
        }
        s9.type === "audio" && this.eventBus.audioTrackRemoved.publish(s9), this.store.removeTrack(s9);
        let o14 = this.store.getPeerById(r9.peerId);
        o14 && (this.removePeerTracks(o14, s9), (n9 = this.listener) == null || n9.onTrackUpdate(1, s9, o14));
      });
    };
    this.handleTrackLayerUpdate = (e17) => {
      for (let t12 in e17.tracks) {
        let i10 = e17.tracks[t12], r9 = this.store.getTrackById(t12);
        !r9 || !this.store.getPeerByTrackId(t12) || r9 instanceof O && this.setLayer(r9, i10);
      }
    };
    this.handleTrackUpdate = (e17, t12 = true) => {
      var s9, o14;
      let i10 = this.store.getPeerById(e17.peer.peer_id), r9 = e17.peer;
      if (!i10 && !r9) {
        d.d(this.TAG, "Track Update ignored - Peer not added to store");
        return;
      }
      i10 || (i10 = Re(r9, this.store), this.store.addPeer(i10));
      for (let n9 in e17.tracks) {
        let l5 = Object.assign({}, (s9 = this.store.getTrackState(n9)) == null ? void 0 : s9.trackInfo), u3 = e17.tracks[n9], p2 = this.store.getTrackById(n9);
        if (this.store.setTrackState({ peerId: e17.peer.peer_id, trackInfo: m(m({}, l5), u3) }), !p2 || this.tracksToProcess.has(n9)) this.processTrackInfo(u3, e17.peer.peer_id, t12), this.processPendingTracks();
        else {
          p2.setEnabled(!u3.mute);
          let h2 = this.processTrackUpdate(p2, l5, u3);
          h2 && ((o14 = this.listener) == null || o14.onTrackUpdate(h2, p2, i10));
        }
      }
    };
    this.processTrackInfo = (e17, t12, i10) => {
    };
    this.processPendingTracks = () => {
      new Map(this.tracksToProcess).forEach((t12) => {
        var s9;
        let i10 = this.store.getTrackState(t12.trackId);
        if (!i10) {
          d.d(this.TAG, "TrackState not added to store", `peerId - ${t12.peerId}`, `trackId -${t12.trackId}`);
          return;
        }
        let r9 = this.store.getPeerById(i10.peerId);
        if (!r9) {
          d.d(this.TAG, "Peer not added to store, peerId", i10.peerId);
          return;
        }
        t12.source = i10.trackInfo.source, t12.peerId = r9.peerId, t12.logIdentifier = r9.name, t12.setEnabled(!i10.trackInfo.mute), this.addAudioTrack(r9, t12), this.addVideoTrack(r9, t12), t12.type === "audio" ? this.eventBus.audioTrackAdded.publish({ track: t12, peer: r9 }) : (s9 = this.listener) == null || s9.onTrackUpdate(0, t12, r9), this.tracksToProcess.delete(t12.trackId);
      });
    };
  }
  handleTrackMetadataAdd(e16) {
    d.d(this.TAG, "TRACK_METADATA_ADD", JSON.stringify(e16, null, 2));
    for (let t11 in e16.tracks) {
      let i9 = e16.tracks[t11];
      this.store.setTrackState({ peerId: e16.peer.peer_id, trackInfo: i9 });
    }
    this.processPendingTracks();
  }
  handleTrackRemove(e16, t11 = true) {
    var s9;
    d.d(this.TAG, "ONTRACKREMOVE", `${e16}`);
    let i9 = this.store.getTrackState(e16.trackId);
    if (!i9) return;
    if (!this.store.hasTrack(e16)) {
      d.d(this.TAG, "Track not found in store");
      return;
    }
    if (t11) {
      this.store.removeTrack(e16);
      let o14 = this.store.getPeerById(i9.peerId);
      if (!o14) return;
      this.removePeerTracks(o14, e16), (s9 = this.listener) == null || s9.onTrackUpdate(1, e16, o14), e16.type === "audio" && this.eventBus.audioTrackRemoved.publish(e16);
    }
  }
  setLayer(e16, t11) {
    var s9, o14;
    let i9 = this.store.getPeerByTrackId(e16.trackId);
    if (!i9) return;
    e16.setLayerFromServer(t11) ? (s9 = this.listener) == null || s9.onTrackUpdate(5, e16, i9) : (o14 = this.listener) == null || o14.onTrackUpdate(6, e16, i9);
  }
  removePeerTracks(e16, t11) {
    let i9 = e16.auxiliaryTracks.indexOf(t11);
    i9 > -1 ? (e16.auxiliaryTracks.splice(i9, 1), d.d(this.TAG, "auxiliary track removed", `${t11}`)) : t11.type === "audio" && e16.audioTrack === t11 ? (e16.audioTrack = void 0, d.d(this.TAG, "audio track removed", `${t11}`)) : t11.type === "video" && e16.videoTrack === t11 && (e16.videoTrack = void 0, d.d(this.TAG, "video track removed", `${t11}`));
  }
  addAudioTrack(e16, t11) {
    var i9;
    t11.type === "audio" && (t11.source === "regular" && (!e16.audioTrack || ((i9 = e16.audioTrack) == null ? void 0 : i9.trackId) === t11.trackId) ? e16.audioTrack = t11 : e16.auxiliaryTracks.push(t11), this.store.addTrack(t11), d.d(this.TAG, "audio track added", `${t11}`));
  }
  addVideoTrack(e16, t11) {
    if (t11.type !== "video") return;
    let i9 = t11, r9 = this.store.getSimulcastDefinitionsForPeer(e16, i9.source);
    if (i9.setSimulcastDefinitons(r9), this.addAsPrimaryVideoTrack(e16, i9)) e16.videoTrack ? e16.videoTrack.replaceTrack(i9) : e16.videoTrack = i9, this.store.addTrack(e16.videoTrack);
    else {
      let s9 = e16.auxiliaryTracks.findIndex((o14) => o14.trackId === i9.trackId);
      s9 === -1 ? (e16.auxiliaryTracks.push(i9), this.store.addTrack(i9)) : (e16.auxiliaryTracks[s9].replaceTrack(i9), this.store.addTrack(e16.auxiliaryTracks[s9]));
    }
    d.d(this.TAG, "video track added", `${t11}`);
  }
  addAsPrimaryVideoTrack(e16, t11) {
    var i9;
    return t11.source === "regular" && (!e16.videoTrack || ((i9 = e16.videoTrack) == null ? void 0 : i9.trackId) === t11.trackId);
  }
  processTrackUpdate(e16, t11, i9) {
    let r9;
    return t11.mute !== i9.mute ? (r9 = i9.mute ? 2 : 3, e16.type === "audio" && this.eventBus.audioTrackUpdate.publish({ track: e16, enabled: !i9.mute })) : t11.description !== i9.description && (r9 = 4), r9;
  }
};
var Ai = class extends Ye {
  constructor(t11, i9, r9, s9) {
    super(t11, i9, s9);
    this.transport = r9;
    this.TAG = "[OnDemandTrackManager]";
    this.processTrackInfo = (t12, i10, r10 = true) => {
      var u3;
      if (t12.type !== "video") return;
      let s10 = this.store.getPeerById(i10);
      if (!s10 || !this.isPeerRoleSubscribed(i10)) {
        d.d(this.TAG, `no peer in store for peerId: ${i10}`);
        return;
      }
      let o14 = new he(new MediaStream(), this.transport.getSubscribeConnection()), n9 = me.getEmptyVideoTrack();
      n9.enabled = !t12.mute;
      let l5 = new O(o14, n9, t12.source);
      l5.setTrackId(t12.track_id), l5.peerId = s10.peerId, l5.logIdentifier = s10.name, this.addVideoTrack(s10, l5), r10 && ((u3 = this.listener) == null || u3.onTrackUpdate(0, s10.videoTrack, s10));
    };
  }
  handleTrackMetadataAdd(t11) {
    super.handleTrackMetadataAdd(t11);
    for (let i9 in t11.tracks) t11.tracks[i9].type === "video" && this.processTrackInfo(t11.tracks[i9], t11.peer.peer_id);
  }
  handleTrackRemove(t11) {
    let i9 = t11.type === "video" && t11.source === "regular";
    super.handleTrackRemove(t11, !i9), i9 && this.processTrackInfo({ track_id: t11.trackId, mute: !t11.enabled, type: t11.type, source: t11.source, stream_id: t11.stream.id }, t11.peerId, false);
  }
  addAsPrimaryVideoTrack(t11, i9) {
    return i9.source !== "regular" ? false : !t11.videoTrack || t11.videoTrack.trackId === i9.trackId ? true : t11.videoTrack.enabled && de(t11.videoTrack.nativeTrack);
  }
  isPeerRoleSubscribed(t11) {
    var s9, o14, n9, l5;
    if (!t11) return true;
    let i9 = this.store.getLocalPeer(), r9 = this.store.getPeerById(t11);
    return r9 && ((l5 = (o14 = (s9 = i9 == null ? void 0 : i9.role) == null ? void 0 : s9.subscribeParams) == null ? void 0 : o14.subscribeToRoles) == null ? void 0 : l5.includes((n9 = r9.role) == null ? void 0 : n9.name));
  }
};
var Ri = class {
  constructor(e16, t11, i9, r9) {
    this.store = e16;
    this.peerManager = t11;
    this.trackManager = i9;
    this.listener = r9;
    this.TAG = "[PeerListManager]";
    this.handleInitialPeerList = (e17) => {
      let t12 = Object.values(e17.peers);
      this.peerManager.handlePeerList(t12);
    };
    this.handleReconnectPeerList = (e17) => {
      this.handleRepeatedPeerList(e17.peers);
    };
    this.handlePreviewRoomState = (e17) => {
      if (!this.store.hasRoleDetailsArrived()) return;
      let t12 = e17.peers;
      if (t12 == null) {
        e17.peer_count === 0 && this.handleRepeatedPeerList({});
        return;
      }
      Object.keys(t12).forEach((i10) => {
        t12[i10].tracks = {}, t12[i10].is_from_room_state = true;
      }), this.handleRepeatedPeerList(t12);
    };
    this.handleRepeatedPeerList = (e17) => {
      let t12 = this.store.getRemotePeers(), i10 = Object.values(e17), r10 = t12.filter((o14) => !e17[o14.peerId]);
      r10.length > 0 && d.d(this.TAG, `${r10}`), r10.forEach((o14) => {
        var l5;
        let n9 = { peer_id: o14.peerId, role: ((l5 = o14.role) == null ? void 0 : l5.name) || "", info: { name: o14.name, data: o14.metadata || "", user_id: o14.customerUserId || "", type: o14.type }, tracks: {}, groups: [], realtime: o14.realtime };
        this.peerManager.handlePeerLeave(n9);
      });
      let s9 = [];
      i10.forEach((o14) => {
        let n9 = this.store.getPeerById(o14.peer_id), l5 = Object.values(o14.tracks);
        n9 && (this.store.getPeerTracks(n9.peerId).forEach((p2) => {
          var h2;
          o14.tracks[p2.trackId] || (this.removePeerTrack(n9, p2.trackId), (h2 = this.listener) == null || h2.onTrackUpdate(1, p2, n9));
        }), l5.forEach((p2) => {
          this.store.getTrackById(p2.track_id) || this.store.setTrackState({ peerId: n9.peerId, trackInfo: p2 });
        }), this.trackManager.handleTrackUpdate({ peer: o14, tracks: o14.tracks }, false), this.peerManager.handlePeerUpdate(o14)), s9.push(o14);
      }), s9.length > 0 && this.peerManager.handlePeerList(s9);
    };
  }
  handleNotification(e16, t11, i9) {
    if (e16 === "peer-list") {
      let r9 = t11;
      i9 ? (d.d(this.TAG, "RECONNECT_PEER_LIST event", JSON.stringify(r9, null, 2)), this.handleReconnectPeerList(r9)) : (d.d(this.TAG, "PEER_LIST event", JSON.stringify(r9, null, 2)), this.handleInitialPeerList(r9));
    } else if (e16 === "room-state") {
      let r9 = t11;
      this.handlePreviewRoomState(r9);
    }
  }
  removePeerTrack(e16, t11) {
    var i9, r9;
    if (d.d(this.TAG, `removing track - ${t11} from ${e16}`), ((i9 = e16.audioTrack) == null ? void 0 : i9.trackId) === t11) e16.audioTrack = void 0;
    else if (((r9 = e16.videoTrack) == null ? void 0 : r9.trackId) === t11) e16.videoTrack = void 0;
    else {
      let s9 = e16.auxiliaryTracks.findIndex((o14) => o14.trackId === t11);
      s9 >= 0 && e16.auxiliaryTracks.splice(s9, 1);
    }
  }
};
var C = (a12) => a12 ? new Date(a12) : void 0;
var Ii = class {
  constructor(e16, t11, i9) {
    this.store = e16;
    this.trackManager = t11;
    this.listener = i9;
    this.TAG = "[PeerManager]";
    this.handlePeerList = (e17) => {
      var r9, s9;
      if (e17.length === 0) {
        (r9 = this.listener) == null || r9.onPeerUpdate(9, []);
        return;
      }
      let t12 = [], i10 = new Set(e17.map((o14) => o14.peer_id));
      this.store.getRemotePeers().forEach(({ peerId: o14, fromRoomState: n9 }) => {
        !i10.has(o14) && n9 && this.store.removePeer(o14);
      });
      for (let o14 of e17) t12.push(this.makePeer(o14));
      (s9 = this.listener) == null || s9.onPeerUpdate(9, t12), this.trackManager.processPendingTracks();
    };
    this.handlePeerJoin = (e17) => {
      var i10;
      let t12 = this.makePeer(e17);
      (i10 = this.listener) == null || i10.onPeerUpdate(0, t12), this.trackManager.processPendingTracks();
    };
    this.handlePeerLeave = (e17) => {
      var i10, r9, s9, o14;
      let t12 = this.store.getPeerById(e17.peer_id);
      this.store.removePeer(e17.peer_id), d.d(this.TAG, "PEER_LEAVE", e17.peer_id, `remainingPeers=${this.store.getPeers().length}`), t12 && (t12.audioTrack && ((i10 = this.listener) == null || i10.onTrackUpdate(1, t12.audioTrack, t12)), t12.videoTrack && ((r9 = this.listener) == null || r9.onTrackUpdate(1, t12.videoTrack, t12)), (s9 = t12.auxiliaryTracks) == null || s9.forEach((n9) => {
        var l5;
        (l5 = this.listener) == null || l5.onTrackUpdate(1, n9, t12);
      }), (o14 = this.listener) == null || o14.onPeerUpdate(1, t12));
    };
  }
  handleNotification(e16, t11) {
    switch (e16) {
      case "on-peer-join": {
        let i9 = t11;
        this.handlePeerJoin(i9);
        break;
      }
      case "on-peer-leave": {
        let i9 = t11;
        this.handlePeerLeave(i9);
        break;
      }
      case "on-peer-update":
        this.handlePeerUpdate(t11);
        break;
      default:
        break;
    }
  }
  handlePeerUpdate(e16) {
    var s9, o14, n9, l5, u3;
    let t11 = this.store.getPeerById(e16.peer_id);
    if (!t11 && e16.realtime) {
      t11 = this.makePeer(e16), (s9 = this.listener) == null || s9.onPeerUpdate(t11.isHandRaised ? 12 : 14, t11);
      return;
    }
    if (t11 && !t11.isLocal && !e16.realtime) {
      this.store.removePeer(t11.peerId), (o14 = this.listener) == null || o14.onPeerUpdate(13, t11);
      return;
    }
    if (!t11) {
      d.d(this.TAG, `peer ${e16.peer_id} not found`);
      return;
    }
    if (t11.role && t11.role.name !== e16.role) {
      let p2 = this.store.getPolicyForRole(e16.role);
      t11.updateRole(p2), this.updateSimulcastLayersForPeer(t11), (n9 = this.listener) == null || n9.onPeerUpdate(8, t11);
    }
    let i9 = t11.isHandRaised;
    t11.updateGroups(e16.groups);
    let r9 = (l5 = e16.groups) == null ? void 0 : l5.includes(Se);
    i9 !== r9 && ((u3 = this.listener) == null || u3.onPeerUpdate(12, t11)), this.handlePeerInfoUpdate(m({ peer: t11 }, e16.info));
  }
  handlePeerInfoUpdate({ peer: e16, name: t11, data: i9 }) {
    var r9, s9;
    e16 && (t11 && e16.name !== t11 && (e16.updateName(t11), (r9 = this.listener) == null || r9.onPeerUpdate(10, e16)), i9 && e16.metadata !== i9 && (e16.updateMetadata(i9), (s9 = this.listener) == null || s9.onPeerUpdate(11, e16)));
  }
  makePeer(e16) {
    let t11 = this.store.getPeerById(e16.peer_id);
    t11 || (t11 = Re(e16, this.store), t11.realtime = e16.realtime, t11.joinedAt = C(e16.joined_at), t11.fromRoomState = !!e16.is_from_room_state, this.store.addPeer(t11), d.d(this.TAG, "adding to the peerList", `${t11}`));
    for (let i9 in e16.tracks) {
      let r9 = e16.tracks[i9];
      this.store.setTrackState({ peerId: e16.peer_id, trackInfo: r9 }), r9.type === "video" && this.trackManager.processTrackInfo(r9, e16.peer_id, false);
    }
    return t11;
  }
  updateSimulcastLayersForPeer(e16) {
    this.store.getPeerTracks(e16.peerId).forEach((t11) => {
      if (t11.type === "video" && ["regular", "screen"].includes(t11.source)) {
        let i9 = t11, r9 = this.store.getSimulcastDefinitionsForPeer(e16, i9.source);
        i9.setSimulcastDefinitons(r9);
      }
    });
  }
};
var Hi = class {
  constructor(e16, t11) {
    this.store = e16;
    this.eventBus = t11;
  }
  handlePolicyChange(e16) {
    let t11 = this.store.getLocalPeer();
    if (t11 && !t11.role) {
      let r9 = e16.known_roles[e16.name];
      t11.updateRole(r9);
    }
    this.store.setKnownRoles(e16);
    let i9 = this.store.getRoom();
    i9 ? i9.templateId = e16.template_id : d.w("[PolicyChangeManager]", "on policy change - room not present"), this.updateLocalPeerRole(e16), this.eventBus.policyChange.publish(e16);
  }
  updateLocalPeerRole(e16) {
    var i9;
    let t11 = this.store.getLocalPeer();
    if (t11 != null && t11.role && t11.role.name !== e16.name) {
      let r9 = this.store.getPolicyForRole(e16.name), s9 = t11.role;
      t11.updateRole(r9), r9.name === ((i9 = t11.asRole) == null ? void 0 : i9.name) && delete t11.asRole, this.eventBus.localRoleUpdate.publish({ oldRole: s9, newRole: r9 });
    }
  }
};
var It = (a12, e16, t11) => {
  let i9 = t11 === "qa" ? Js : js, r9 = new URL(i9);
  return r9.searchParams.set("endpoint", `https://${e16}`), r9.searchParams.set("token", a12), r9.toString();
};
var Ci = class {
  constructor(e16, t11, i9) {
    this.transport = e16;
    this.store = t11;
    this.listener = i9;
    this.TAG = "[HMSWhiteboardInteractivityCenter]";
  }
  get isEnabled() {
    return this.transport.isFlagEnabled("whiteboardEnabled");
  }
  open(e16) {
    return c(this, null, function* () {
      var o14;
      if (!this.isEnabled) return d.w(this.TAG, "Whiteboard is not enabled for customer");
      let t11 = this.store.getWhiteboard(e16 == null ? void 0 : e16.id), i9 = t11 == null ? void 0 : t11.id;
      if (t11 || (i9 = (yield this.transport.signal.createWhiteboard(this.getCreateOptionsWithDefaults(e16))).id), !i9) throw new Error(`Whiteboard ID: ${i9} not found`);
      let r9 = yield this.transport.signal.getWhiteboard({ id: i9 }), s9 = v(m({}, t11), { title: e16 == null ? void 0 : e16.title, attributes: e16 == null ? void 0 : e16.attributes, id: r9.id, url: It(r9.token, r9.addr, this.store.getEnv()), token: r9.token, addr: r9.addr, owner: r9.owner, permissions: r9.permissions || [], open: true });
      this.store.setWhiteboard(s9), (o14 = this.listener) == null || o14.onWhiteboardUpdate(s9);
    });
  }
  close(e16) {
    return c(this, null, function* () {
      var r9;
      if (!this.isEnabled) return d.w(this.TAG, "Whiteboard is not enabled for customer");
      let t11 = this.store.getWhiteboard(e16);
      if (!t11) throw new Error(`Whiteboard ID: ${e16} not found`);
      let i9 = { id: t11.id, title: t11.title, open: false };
      this.store.setWhiteboard(i9), (r9 = this.listener) == null || r9.onWhiteboardUpdate(i9);
    });
  }
  setListener(e16) {
    this.listener = e16;
  }
  handleLocalRoleUpdate() {
    return c(this, null, function* () {
      var t11;
      let e16 = this.store.getWhiteboards();
      for (let i9 of e16.values()) if (i9.url) {
        let r9 = yield this.transport.signal.getWhiteboard({ id: i9.id }), s9 = v(m({}, i9), { id: r9.id, url: It(r9.token, r9.addr, this.store.getEnv()), token: r9.token, addr: r9.addr, owner: r9.owner, permissions: r9.permissions, open: r9.permissions.length > 0 });
        this.store.setWhiteboard(s9), (t11 = this.listener) == null || t11.onWhiteboardUpdate(s9);
      }
    });
  }
  getCreateOptionsWithDefaults(e16) {
    var o14;
    let t11 = Object.values(this.store.getKnownRoles()), i9 = [], r9 = [], s9 = [];
    return t11.forEach((n9) => {
      var l5, u3, p2;
      (l5 = n9.permissions.whiteboard) != null && l5.includes("read") && i9.push(n9.name), (u3 = n9.permissions.whiteboard) != null && u3.includes("write") && r9.push(n9.name), (p2 = n9.permissions.whiteboard) != null && p2.includes("admin") && s9.push(n9.name);
    }), { title: (e16 == null ? void 0 : e16.title) || `${(o14 = this.store.getRoom()) == null ? void 0 : o14.id} Whiteboard`, reader: (e16 == null ? void 0 : e16.reader) || i9, writer: (e16 == null ? void 0 : e16.writer) || r9, admin: (e16 == null ? void 0 : e16.admin) || s9 };
  }
};
var Ht = class {
  constructor(e16, t11, i9) {
    this.transport = e16;
    this.store = t11;
    this.listener = i9;
    this.whiteboard = new Ci(e16, t11, i9);
  }
  setListener(e16) {
    this.listener = e16, this.whiteboard.setListener(e16);
  }
  createPoll(e16) {
    return c(this, null, function* () {
      var o14, n9;
      let t11 = { customerID: "userid", peerID: "peerid", userName: "username" }, { poll_id: i9 } = yield this.transport.signal.setPollInfo(v(m({}, e16), { mode: e16.mode ? t11[e16.mode] : void 0, poll_id: e16.id, vote: e16.rolesThatCanVote, responses: e16.rolesThatCanViewResponses }));
      e16.id || (e16.id = i9), Array.isArray(e16.questions) && (yield this.addQuestionsToPoll(e16.id, e16.questions));
      let r9 = yield this.transport.signal.getPollQuestions({ poll_id: e16.id, index: 0, count: 50 }), s9 = Li(v(m({}, e16), { poll_id: e16.id, state: "created", created_by: (o14 = this.store.getLocalPeer()) == null ? void 0 : o14.peerId }));
      s9.questions = r9.questions.map(({ question: l5, options: u3, answer: p2 }) => v(m({}, l5), { options: u3, answer: p2 })), (n9 = this.listener) == null || n9.onPollsUpdate(0, [s9]);
    });
  }
  startPoll(e16) {
    return c(this, null, function* () {
      typeof e16 == "string" ? yield this.transport.signal.startPoll({ poll_id: e16 }) : (yield this.createPoll(e16), yield this.transport.signal.startPoll({ poll_id: e16.id }));
    });
  }
  addQuestionsToPoll(e16, t11) {
    return c(this, null, function* () {
      t11.length > 0 && (yield this.transport.signal.setPollQuestions({ poll_id: e16, questions: t11.map((i9, r9) => this.createQuestionSetParams(i9, r9)) }));
    });
  }
  stopPoll(e16) {
    return c(this, null, function* () {
      yield this.transport.signal.stopPoll({ poll_id: e16 });
    });
  }
  addResponsesToPoll(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.store.getPoll(e16);
      if (!i9) throw new Error("Invalid poll ID - Poll not found");
      let r9 = t11.map((s9) => {
        var n9, l5;
        let o14 = this.getQuestionInPoll(i9, s9.questionIndex);
        return o14.type === "single-choice" ? (s9.option = s9.option || ((n9 = s9.options) == null ? void 0 : n9[0]) || -1, delete s9.text, delete s9.options) : o14.type === "multiple-choice" ? ((l5 = s9.options) == null || l5.sort(), delete s9.text, delete s9.option) : (delete s9.option, delete s9.options), s9.skipped && (delete s9.option, delete s9.options, delete s9.text), m({ duration: 0, type: o14.type, question: s9.questionIndex }, s9);
      });
      yield this.transport.signal.setPollResponses({ poll_id: e16, responses: r9 });
    });
  }
  fetchLeaderboard(e16, t11, i9) {
    return c(this, null, function* () {
      var p2, h2;
      let r9 = this.store.getPoll(e16);
      if (!r9) throw new Error("Invalid poll ID - Poll not found");
      let s9 = (h2 = (p2 = this.store.getLocalPeer()) == null ? void 0 : p2.role) == null ? void 0 : h2.permissions, o14 = !!(s9 != null && s9.pollRead || s9 != null && s9.pollWrite);
      if (r9.anonymous || r9.state !== "stopped" || !o14) return { entries: [], hasNext: false };
      let n9 = yield this.transport.signal.fetchPollLeaderboard({ poll_id: r9.id, count: i9, offset: t11 }), l5 = { avgScore: n9.avg_score, avgTime: n9.avg_time, votedUsers: n9.voted_users, totalUsers: n9.total_users, correctUsers: n9.correct_users };
      return { entries: n9.questions.map((g2) => ({ position: g2.position, totalResponses: g2.total_responses, correctResponses: g2.correct_responses, duration: g2.duration, peer: g2.peer, score: g2.score })), hasNext: !n9.last, summary: l5 };
    });
  }
  getPolls() {
    return c(this, null, function* () {
      var s9, o14, n9;
      let e16 = yield this.transport.signal.getPollsList({ count: 50, state: "started" }), t11 = [], i9 = (o14 = (s9 = this.store.getLocalPeer()) == null ? void 0 : s9.role) == null ? void 0 : o14.permissions.pollWrite, r9 = [...e16.polls];
      if (i9) {
        let l5 = yield this.transport.signal.getPollsList({ count: 50, state: "created" }), u3 = yield this.transport.signal.getPollsList({ count: 50, state: "stopped" });
        r9 = [...l5.polls, ...r9, ...u3.polls];
      }
      for (let l5 of r9) {
        let u3 = yield this.transport.signal.getPollQuestions({ poll_id: l5.poll_id, index: 0, count: 50 }), p2 = Li(l5), h2 = this.store.getPoll(l5.poll_id);
        p2.questions = u3.questions.map(({ question: g2, options: T, answer: E2 }, A) => {
          var w, Me;
          return v(m({}, g2), { options: T, answer: E2, responses: (Me = (w = h2 == null ? void 0 : h2.questions) == null ? void 0 : w[A]) == null ? void 0 : Me.responses });
        }), t11.push(p2), this.store.setPoll(p2);
      }
      return (n9 = this.listener) == null || n9.onPollsUpdate(3, t11), t11;
    });
  }
  createQuestionSetParams(e16, t11) {
    var o14, n9;
    if (e16.index) {
      let l5 = (o14 = e16.options) == null ? void 0 : o14.map((u3, p2) => v(m({}, u3), { index: p2 + 1 }));
      return { question: v(m({}, e16), { index: t11 + 1 }), options: l5, answer: e16.answer };
    }
    let i9 = v(m({}, e16), { index: t11 + 1 }), r9, s9 = e16.answer || { hidden: false };
    return Array.isArray(e16.options) && ["single-choice", "multiple-choice"].includes(e16.type) ? (r9 = (n9 = e16.options) == null ? void 0 : n9.map((l5, u3) => ({ index: u3 + 1, text: l5.text, weight: l5.weight })), e16.type === "single-choice" ? s9.option = e16.options.findIndex((l5) => l5.isCorrectAnswer) + 1 || void 0 : s9.options = e16.options.map((l5, u3) => l5.isCorrectAnswer ? u3 + 1 : void 0).filter((l5) => !!l5)) : (s9 == null || delete s9.options, s9 == null || delete s9.option), { question: i9, options: r9, answer: s9 };
  }
  getQuestionInPoll(e16, t11) {
    var r9;
    let i9 = (r9 = e16 == null ? void 0 : e16.questions) == null ? void 0 : r9.find((s9) => s9.index === t11);
    if (!i9) throw new Error("Invalid question index - Question not found in poll");
    return i9;
  }
};
var Li = (a12) => {
  let e16 = { userid: "customerID", peerid: "peerID", username: "userName" };
  return { id: a12.poll_id, title: a12.title, startedBy: a12.started_by, createdBy: a12.created_by, anonymous: a12.anonymous, type: a12.type, duration: a12.duration, locked: a12.locked, mode: a12.mode ? e16[a12.mode] : void 0, visibility: a12.visibility, rolesThatCanVote: a12.vote || [], rolesThatCanViewResponses: a12.responses || [], state: a12.state, stoppedBy: a12.stopped_by, startedAt: C(a12.started_at), stoppedAt: C(a12.stopped_at), createdAt: C(a12.created_at) };
};
var wi = class {
  constructor(e16, t11, i9) {
    this.store = e16;
    this.transport = t11;
    this.listener = i9;
  }
  handleNotification(e16, t11) {
    switch (e16) {
      case "on-poll-start": {
        this.handlePollStart(t11);
        break;
      }
      case "on-poll-stop": {
        this.handlePollStop(t11);
        break;
      }
      case "on-poll-stats":
        this.handlePollStats(t11);
        break;
      default:
        break;
    }
  }
  handlePollStart(e16) {
    return c(this, null, function* () {
      var i9, r9;
      let t11 = [];
      for (let s9 of e16.polls) {
        let o14 = this.store.getPoll(s9.poll_id);
        if (o14 && o14.state === "started") {
          (i9 = this.listener) == null || i9.onPollsUpdate(1, [o14]);
          return;
        }
        let n9 = yield this.transport.signal.getPollQuestions({ poll_id: s9.poll_id, index: 0, count: 50 }), l5 = Li(s9);
        l5.questions = n9.questions.map(({ question: u3, options: p2, answer: h2 }) => v(m({}, u3), { options: p2, answer: h2 })), yield this.updatePollResponses(l5, true), t11.push(l5), this.store.setPoll(l5);
      }
      (r9 = this.listener) == null || r9.onPollsUpdate(1, t11);
    });
  }
  handlePollStop(e16) {
    return c(this, null, function* () {
      var i9;
      let t11 = [];
      for (let r9 of e16.polls) {
        let s9 = this.store.getPoll(r9.poll_id);
        if (s9) {
          s9.state = "stopped", s9.stoppedAt = C(r9.stopped_at), s9.stoppedBy = r9.stopped_by;
          let o14 = yield this.transport.signal.getPollResult({ poll_id: r9.poll_id });
          this.updatePollResult(s9, o14), t11.push(s9);
        }
      }
      t11.length > 0 && ((i9 = this.listener) == null || i9.onPollsUpdate(2, t11));
    });
  }
  handlePollStats(e16) {
    return c(this, null, function* () {
      var i9;
      let t11 = [];
      for (let r9 of e16.polls) {
        let s9 = this.store.getPoll(r9.poll_id);
        if (!s9) return;
        this.updatePollResult(s9, r9), yield this.updatePollResponses(s9, false), t11.push(s9);
      }
      t11.length > 0 && ((i9 = this.listener) == null || i9.onPollsUpdate(4, t11));
    });
  }
  updatePollResult(e16, t11) {
    var i9;
    e16.result = m({}, e16.result), e16.result.totalUsers = t11.user_count, e16.result.maxUsers = t11.max_user, e16.result.totalResponses = t11.total_response, (i9 = t11.questions) == null || i9.forEach((r9) => {
      var o14, n9;
      let s9 = (o14 = e16.questions) == null ? void 0 : o14.find((l5) => l5.index === r9.question);
      s9 && (s9.result = m({}, s9.result), s9.result.correctResponses = r9.correct, s9.result.skippedCount = r9.skipped, s9.result.totalResponses = r9.total, (n9 = r9.options) == null || n9.forEach((l5, u3) => {
        var h2;
        let p2 = (h2 = s9.options) == null ? void 0 : h2[u3];
        p2 && p2.voteCount !== l5 && (p2.voteCount = l5);
      }));
    });
  }
  updatePollResponses(e16, t11) {
    return c(this, null, function* () {
      var r9;
      (r9 = (yield this.transport.signal.getPollResponses({ poll_id: e16.id, index: 0, count: 50, self: t11 })).responses) == null || r9.forEach(({ response: s9, peer: o14, final: n9 }) => {
        var p2;
        let l5 = (p2 = e16 == null ? void 0 : e16.questions) == null ? void 0 : p2.find((h2) => h2.index === s9.question);
        if (!l5) return;
        let u3 = { id: s9.response_id, questionIndex: s9.question, option: s9.option, options: s9.options, text: s9.text, responseFinal: n9, peer: { peerid: o14.peerid, userHash: o14.hash, userid: o14.userid, username: o14.username }, skipped: s9.skipped, type: s9.type, update: s9.update };
        Array.isArray(l5.responses) && l5.responses.length > 0 ? l5.responses.find(({ id: h2 }) => h2 === u3.id) || l5.responses.push(u3) : l5.responses = [u3];
      });
    });
  }
};
var Di = class {
  constructor(e16, t11) {
    this.store = e16;
    this.listener = t11;
  }
  handleNotification(e16, t11) {
    switch (e16) {
      case "on-role-change-request":
        this.handleRoleChangeRequest(t11);
        break;
      case "on-track-update-request":
        this.handleTrackUpdateRequest(t11);
        break;
      case "on-change-track-mute-state-request":
        this.handleChangeTrackStateRequest(t11);
        break;
      default:
        return;
    }
  }
  handleRoleChangeRequest(e16) {
    var i9;
    let t11 = { requestedBy: e16.requested_by ? this.store.getPeerById(e16.requested_by) : void 0, role: this.store.getPolicyForRole(e16.role), token: e16.token };
    (i9 = this.listener) == null || i9.onRoleChangeRequest(t11);
  }
  handleTrackUpdateRequest(e16) {
    let { requested_by: t11, track_id: i9, mute: r9 } = e16, s9 = t11 ? this.store.getPeerById(t11) : void 0, o14 = this.store.getLocalPeerTracks().find((l5) => l5.publishedTrackId === i9);
    if (!o14) return;
    let n9 = () => {
      var l5;
      (l5 = this.listener) == null || l5.onChangeTrackStateRequest({ requestedBy: s9, track: o14, enabled: !r9 });
    };
    if (r9) {
      if (o14.enabled === !r9) return;
      o14.setEnabled(!r9).then(n9);
    } else n9();
  }
  handleChangeTrackStateRequest(e16) {
    var u3;
    let { type: t11, source: i9, value: r9, requested_by: s9 } = e16, o14 = s9 ? this.store.getPeerById(s9) : void 0, n9 = !r9, l5 = this.getTracksToBeUpdated({ type: t11, source: i9, enabled: n9 });
    if (l5.length !== 0) if (n9) (u3 = this.listener) == null || u3.onChangeMultiTrackStateRequest({ requestedBy: o14, tracks: l5, type: t11, source: i9, enabled: true });
    else {
      let p2 = [];
      for (let h2 of l5) p2.push(h2.setEnabled(false));
      Promise.all(p2).then(() => {
        var h2;
        (h2 = this.listener) == null || h2.onChangeMultiTrackStateRequest({ requestedBy: o14, tracks: l5, enabled: false });
      });
    }
  }
  getTracksToBeUpdated({ type: e16, source: t11, enabled: i9 }) {
    let s9 = this.store.getLocalPeerTracks();
    return e16 && (s9 = s9.filter((o14) => o14.type === e16)), t11 && (s9 = s9.filter((o14) => o14.source === t11)), s9.filter((o14) => o14.enabled !== i9);
  }
};
var _i = class {
  constructor(e16, t11) {
    this.store = e16;
    this.listener = t11;
    this.TAG = "[RoomUpdateManager]";
  }
  handleNotification(e16, t11) {
    switch (e16) {
      case "peer-list":
        this.onRoomState(t11.room);
        break;
      case "on-rtmp-update":
        this.updateRTMPStatus(t11);
        break;
      case "on-record-update":
        this.updateRecordingStatus(t11);
        break;
      case "room-state":
        this.handlePreviewRoomState(t11);
        break;
      case "room-info":
        this.handleRoomInfo(t11);
        break;
      case "session-info":
        this.handleSessionInfo(t11);
        break;
      case "on-hls-update":
        this.updateHLSStatus(t11);
        break;
      default:
        break;
    }
  }
  handleRoomInfo(e16) {
    let t11 = this.store.getRoom();
    if (!t11) {
      d.w(this.TAG, "on session info - room not present");
      return;
    }
    t11.description = e16.description, t11.large_room_optimization = e16.large_room_optimization, t11.max_size = e16.max_size, t11.name = e16.name;
  }
  handleSessionInfo(e16) {
    var i9;
    let t11 = this.store.getRoom();
    if (!t11) {
      d.w(this.TAG, "on session info - room not present");
      return;
    }
    t11.sessionId = e16.session_id, t11.peerCount !== e16.peer_count && (t11.peerCount = e16.peer_count, (i9 = this.listener) == null || i9.onRoomUpdate("ROOM_PEER_COUNT_UPDATED", t11));
  }
  handlePreviewRoomState(e16) {
    let { room: t11 } = e16;
    this.onRoomState(t11);
  }
  onRoomState(e16) {
    var l5, u3, p2, h2;
    let { recording: t11, streaming: i9, session_id: r9, started_at: s9, name: o14 } = e16, n9 = this.store.getRoom();
    if (!n9) {
      d.w(this.TAG, "on room state - room not present");
      return;
    }
    n9.name = o14, n9.rtmp.running = this.isStreamingRunning((l5 = i9 == null ? void 0 : i9.rtmp) == null ? void 0 : l5.state), n9.rtmp.startedAt = C((u3 = i9 == null ? void 0 : i9.rtmp) == null ? void 0 : u3.started_at), n9.rtmp.state = (p2 = i9 == null ? void 0 : i9.rtmp) == null ? void 0 : p2.state, n9.recording.server = this.getPeerListSFURecording(t11), n9.recording.browser = this.getPeerListBrowserRecording(t11), n9.recording.hls = this.getPeerListHLSRecording(t11), n9.hls = this.convertHls(i9 == null ? void 0 : i9.hls), n9.sessionId = r9, n9.startedAt = C(s9), (h2 = this.listener) == null || h2.onRoomUpdate("RECORDING_STATE_UPDATED", n9);
  }
  isRecordingRunning(e16) {
    return e16 ? !["none", "paused", "stopped", "failed"].includes(e16) : false;
  }
  isStreamingRunning(e16) {
    return e16 ? !["none", "stopped", "failed"].includes(e16) : false;
  }
  initHLS(e16) {
    let t11 = this.store.getRoom(), i9 = { running: true, variants: [] };
    return t11 ? (e16 != null && e16.variants && e16.variants.forEach((r9, s9) => {
      var o14, n9, l5;
      r9.state !== "initialised" ? i9.variants.push({ meetingURL: r9 == null ? void 0 : r9.meetingURL, url: r9 == null ? void 0 : r9.url, metadata: r9 == null ? void 0 : r9.metadata, playlist_type: r9 == null ? void 0 : r9.playlist_type, startedAt: C((o14 = e16 == null ? void 0 : e16.variants) == null ? void 0 : o14[s9].started_at), initialisedAt: C((n9 = e16 == null ? void 0 : e16.variants) == null ? void 0 : n9[s9].initialised_at), state: r9.state, stream_type: r9 == null ? void 0 : r9.stream_type }) : i9.variants.push({ initialisedAt: C((l5 = e16 == null ? void 0 : e16.variants) == null ? void 0 : l5[s9].initialised_at), url: "" });
    }), i9) : (d.w(this.TAG, "on hls - room not present"), i9);
  }
  updateHLSStatus(e16) {
    var r9;
    let t11 = this.store.getRoom(), i9 = e16.variants && e16.variants.length > 0 ? e16.variants.some((s9) => this.isStreamingRunning(s9.state)) : false;
    if (!t11) {
      d.w(this.TAG, "on hls - room not present");
      return;
    }
    e16.enabled = i9, t11.hls = this.convertHls(e16), (r9 = this.listener) == null || r9.onRoomUpdate("HLS_STREAMING_STATE_UPDATED", t11);
  }
  convertHls(e16) {
    var r9;
    if (e16 != null && e16.variants && e16.variants.length > 0 ? e16.variants.some((s9) => s9.state === "initialised") : false) return this.initHLS(e16);
    let i9 = { running: !!(e16 != null && e16.enabled), variants: [], error: this.toSdkError(e16 == null ? void 0 : e16.error) };
    return (r9 = e16 == null ? void 0 : e16.variants) == null || r9.forEach((s9) => {
      i9.variants.push({ meetingURL: s9 == null ? void 0 : s9.meeting_url, url: s9 == null ? void 0 : s9.url, metadata: s9 == null ? void 0 : s9.metadata, playlist_type: s9 == null ? void 0 : s9.playlist_type, startedAt: C(s9 == null ? void 0 : s9.started_at), initialisedAt: C(s9 == null ? void 0 : s9.initialised_at), state: s9.state, stream_type: s9 == null ? void 0 : s9.stream_type });
    }), i9;
  }
  getHLSRecording(e16) {
    var r9, s9;
    let t11 = { running: false }, i9 = this.isRecordingRunning(e16 == null ? void 0 : e16.state);
    return (i9 || (e16 == null ? void 0 : e16.state) === "paused") && (t11 = { running: i9, singleFilePerLayer: !!((r9 = e16 == null ? void 0 : e16.hls_recording) != null && r9.single_file_per_layer), hlsVod: !!((s9 = e16 == null ? void 0 : e16.hls_recording) != null && s9.hls_vod), startedAt: C(e16 == null ? void 0 : e16.started_at), initialisedAt: C(e16 == null ? void 0 : e16.initialised_at), state: e16 == null ? void 0 : e16.state, error: this.toSdkError(e16 == null ? void 0 : e16.error) }), t11;
  }
  getPeerListHLSRecording(e16) {
    var r9, s9;
    let t11 = e16 == null ? void 0 : e16.hls;
    return { running: this.isRecordingRunning(t11 == null ? void 0 : t11.state), startedAt: C(t11 == null ? void 0 : t11.started_at), initialisedAt: C(t11 == null ? void 0 : t11.initialised_at), state: t11 == null ? void 0 : t11.state, singleFilePerLayer: (r9 = t11 == null ? void 0 : t11.config) == null ? void 0 : r9.single_file_per_layer, hlsVod: (s9 = t11 == null ? void 0 : t11.config) == null ? void 0 : s9.hls_vod };
  }
  getPeerListBrowserRecording(e16) {
    let t11 = e16 == null ? void 0 : e16.browser;
    return { running: this.isRecordingRunning(t11 == null ? void 0 : t11.state), startedAt: C(t11 == null ? void 0 : t11.started_at), state: t11 == null ? void 0 : t11.state };
  }
  getPeerListSFURecording(e16) {
    let t11 = e16 == null ? void 0 : e16.sfu;
    return { running: this.isRecordingRunning(t11 == null ? void 0 : t11.state), startedAt: C(t11 == null ? void 0 : t11.started_at), state: t11 == null ? void 0 : t11.state };
  }
  updateRecordingStatus(e16) {
    var s9;
    let t11 = this.store.getRoom(), i9 = this.isRecordingRunning(e16.state);
    if (!t11) {
      d.w(this.TAG, `set recording status running=${i9} - room not present`);
      return;
    }
    let r9;
    e16.type === "sfu" ? (t11.recording.server = { running: i9, startedAt: i9 ? C(e16.started_at) : void 0, error: this.toSdkError(e16.error), state: e16.state }, r9 = "SERVER_RECORDING_STATE_UPDATED") : e16.type === "HLS" ? (t11.recording.hls = this.getHLSRecording(e16), r9 = "RECORDING_STATE_UPDATED") : (t11.recording.browser = { running: i9, startedAt: i9 ? C(e16.started_at) : void 0, error: this.toSdkError(e16.error), state: e16 == null ? void 0 : e16.state }, r9 = "BROWSER_RECORDING_STATE_UPDATED"), (s9 = this.listener) == null || s9.onRoomUpdate(r9, t11);
  }
  updateRTMPStatus(e16) {
    var r9, s9;
    let t11 = this.store.getRoom(), i9 = this.isStreamingRunning(e16.state);
    if (!t11) {
      d.w(this.TAG, "on policy change - room not present");
      return;
    }
    if (!i9) {
      t11.rtmp = { running: i9, state: e16.state, error: this.toSdkError(e16.error) }, (r9 = this.listener) == null || r9.onRoomUpdate("RTMP_STREAMING_STATE_UPDATED", t11);
      return;
    }
    t11.rtmp = { running: i9, startedAt: i9 ? C(e16.started_at) : void 0, state: e16.state, error: this.toSdkError(e16.error) }, (s9 = this.listener) == null || s9.onRoomUpdate("RTMP_STREAMING_STATE_UPDATED", t11);
  }
  toSdkError(e16) {
    if (!(e16 != null && e16.code)) return;
    let t11 = e16.message || "error in streaming/recording", i9 = new f(e16.code, "ServerErrors", "NONE", t11, t11);
    return d.e(this.TAG, "error in streaming/recording", i9), i9;
  }
};
var Ni = class {
  constructor(e16, t11) {
    this.store = e16;
    this.listener = t11;
  }
  handleNotification(e16, t11) {
    e16 === "on-metadata-change" && this.handleMetadataChange(t11);
  }
  handleMetadataChange(e16) {
    var i9;
    let t11 = e16.values.map((r9) => ({ key: r9.key, value: r9.data, updatedAt: C(r9.updated_at), updatedBy: r9.updated_by ? this.store.getPeerById(r9.updated_by) : void 0 }));
    (i9 = this.listener) == null || i9.onSessionStoreUpdate(t11);
  }
};
var Oi = class {
  constructor(e16, t11, i9) {
    this.store = e16;
    this.transport = t11;
    this.listener = i9;
  }
  handleNotification(e16, t11) {
    switch (e16) {
      case "on-whiteboard-update": {
        this.handleWhiteboardUpdate(t11);
        break;
      }
      default:
        break;
    }
  }
  handleWhiteboardUpdate(e16) {
    return c(this, null, function* () {
      var n9;
      let t11 = this.store.getLocalPeer(), i9 = this.store.getWhiteboard(e16.id), r9 = e16.owner === (t11 == null ? void 0 : t11.peerId) || e16.owner === (t11 == null ? void 0 : t11.customerUserId), s9 = e16.state === "open", o14 = { id: e16.id, title: e16.title, attributes: e16.attributes };
      if (o14.open = r9 ? i9 == null ? void 0 : i9.open : s9, o14.owner = o14.open ? e16.owner : void 0, o14.open) if (r9) o14.url = i9 == null ? void 0 : i9.url, o14.token = i9 == null ? void 0 : i9.token, o14.addr = i9 == null ? void 0 : i9.addr, o14.permissions = i9 == null ? void 0 : i9.permissions;
      else {
        let l5 = yield this.transport.signal.getWhiteboard({ id: e16.id });
        o14.url = It(l5.token, l5.addr, this.store.getEnv()), o14.token = l5.token, o14.addr = l5.addr, o14.permissions = l5.permissions;
      }
      this.store.setWhiteboard(o14), (n9 = this.listener) == null || n9.onWhiteboardUpdate(o14);
    });
  }
};
var xi = class {
  constructor(e16, t11, i9, r9, s9, o14) {
    this.store = e16;
    this.transport = i9;
    this.listener = r9;
    this.audioListener = s9;
    this.connectionQualityListener = o14;
    this.TAG = "[HMSNotificationManager]";
    this.hasConsistentRoomStateArrived = false;
    this.ignoreNotification = (e17) => {
      if (e17 === "peer-list") this.hasConsistentRoomStateArrived = true;
      else if (e17 === "room-state") return this.hasConsistentRoomStateArrived;
      return false;
    };
    this.handleTrackAdd = (e17) => {
      this.trackManager.handleTrackAdd(e17);
    };
    this.handleTrackRemove = (e17) => {
      this.trackManager.handleTrackRemove(e17);
    };
    this.updateLocalPeer = ({ name: e17, metadata: t12 }) => {
      let i10 = this.store.getLocalPeer();
      this.peerManager.handlePeerInfoUpdate({ peer: i10, name: e17, data: t12 });
    };
    let n9 = this.transport.isFlagEnabled("onDemandTracks");
    this.trackManager = n9 ? new Ai(this.store, t11, this.transport, this.listener) : new Ye(this.store, t11, this.listener), this.peerManager = new Ii(this.store, this.trackManager, this.listener), this.peerListManager = new Ri(this.store, this.peerManager, this.trackManager, this.listener), this.broadcastManager = new Pi(this.listener), this.policyChangeManager = new Hi(this.store, t11), this.requestManager = new Di(this.store, this.listener), this.activeSpeakerManager = new Ei(this.store, this.listener, this.audioListener), this.connectionQualityManager = new bi(this.store, this.connectionQualityListener), this.roomUpdateManager = new _i(this.store, this.listener), this.sessionMetadataManager = new Ni(this.store, this.listener), this.pollsManager = new wi(this.store, this.transport, this.listener), this.whiteboardManager = new Oi(this.store, this.transport, this.listener);
  }
  setListener(e16) {
    this.listener = e16, this.trackManager.listener = e16, this.peerManager.listener = e16, this.peerListManager.listener = e16, this.broadcastManager.listener = e16, this.requestManager.listener = e16, this.activeSpeakerManager.listener = e16, this.roomUpdateManager.listener = e16, this.sessionMetadataManager.listener = e16, this.pollsManager.listener = e16, this.whiteboardManager.listener = e16;
  }
  setAudioListener(e16) {
    this.audioListener = e16, this.activeSpeakerManager.audioListener = e16;
  }
  setConnectionQualityListener(e16) {
    this.connectionQualityListener = e16, this.connectionQualityManager.listener = e16;
  }
  handleNotification(e16, t11 = false) {
    var s9, o14;
    let i9 = e16.method, r9 = e16.params;
    ["active-speakers", "sfu-stats", "on-connection-quality-update", void 0].includes(i9) || d.d(this.TAG, `Received notification - ${i9}`, { notification: r9 }), i9 === "sfu-stats" && (s9 = window.HMS) != null && s9.ON_SFU_STATS && typeof ((o14 = window.HMS) == null ? void 0 : o14.ON_SFU_STATS) == "function" && window.HMS.ON_SFU_STATS(e16.params), !this.ignoreNotification(i9) && (this.roomUpdateManager.handleNotification(i9, r9), this.peerManager.handleNotification(i9, r9), this.requestManager.handleNotification(i9, r9), this.peerListManager.handleNotification(i9, r9, t11), this.broadcastManager.handleNotification(i9, r9), this.sessionMetadataManager.handleNotification(i9, r9), this.pollsManager.handleNotification(i9, r9), this.whiteboardManager.handleNotification(i9, r9), this.handleIsolatedMethods(i9, r9));
  }
  handleIsolatedMethods(e16, t11) {
    switch (e16) {
      case "on-track-add": {
        this.trackManager.handleTrackMetadataAdd(t11);
        break;
      }
      case "on-track-update": {
        this.trackManager.handleTrackUpdate(t11);
        break;
      }
      case "on-track-remove": {
        if (!t11.peer) {
          d.d(this.TAG, `Ignoring sfu notification - ${e16}`, { notification: t11 });
          return;
        }
        this.trackManager.handleTrackRemovedPermanently(t11);
        break;
      }
      case "on-track-layer-update": {
        this.trackManager.handleTrackLayerUpdate(t11);
        break;
      }
      case "active-speakers":
        this.activeSpeakerManager.handleActiveSpeakers(t11);
        break;
      case "on-connection-quality-update":
        this.connectionQualityManager.handleQualityUpdate(t11);
        break;
      case "on-policy-change":
        this.policyChangeManager.handlePolicyChange(t11);
        break;
      default:
        break;
    }
  }
};
var Ui = class {
  constructor(e16) {
    this.transport = e16;
    this.observedKeys = /* @__PURE__ */ new Set();
  }
  get(e16) {
    return c(this, null, function* () {
      let { data: t11, updated_at: i9 } = yield this.transport.signal.getSessionMetadata(e16);
      return { value: t11, updatedAt: C(i9) };
    });
  }
  set(e16, t11) {
    return c(this, null, function* () {
      let { data: i9, updated_at: r9 } = yield this.transport.signal.setSessionMetadata({ key: e16, data: t11 }), s9 = C(r9);
      return { value: i9, updatedAt: s9 };
    });
  }
  observe(e16) {
    return c(this, null, function* () {
      let t11 = new Set(this.observedKeys);
      if (e16.forEach((i9) => this.observedKeys.add(i9)), this.observedKeys.size !== t11.size) try {
        yield this.transport.signal.listenMetadataChange(Array.from(this.observedKeys));
      } catch (i9) {
        throw this.observedKeys = t11, i9;
      }
    });
  }
  unobserve(e16) {
    return c(this, null, function* () {
      let t11 = new Set(this.observedKeys);
      if (this.observedKeys = new Set([...this.observedKeys].filter((i9) => !e16.includes(i9))), this.observedKeys.size !== t11.size) try {
        yield this.transport.signal.listenMetadataChange(Array.from(this.observedKeys));
      } catch (i9) {
        throw this.observedKeys = t11, i9;
      }
    });
  }
};
var Bi = class {
  constructor(e16, t11, i9 = "", r9 = "", s9 = "https://prod-init.100ms.live/init", o14 = false) {
    this.authToken = e16;
    this.peerId = t11;
    this.peerName = i9;
    this.data = r9;
    this.endpoint = s9;
    this.autoSubscribeVideo = o14;
  }
};
var $ = ((s9) => (s9[s9.ConnectFailed = 0] = "ConnectFailed", s9[s9.SignalDisconnect = 1] = "SignalDisconnect", s9[s9.JoinWSMessageFailed = 2] = "JoinWSMessageFailed", s9[s9.PublishIceConnectionFailed = 3] = "PublishIceConnectionFailed", s9[s9.SubscribeIceConnectionFailed = 4] = "SubscribeIceConnectionFailed", s9))($ || {});
var Sa = { 0: [], 1: [], 2: [1], 3: [1], 4: [1] };
var Vi = ((n9) => (n9.Disconnected = "Disconnected", n9.Connecting = "Connecting", n9.Joined = "Joined", n9.Preview = "Preview", n9.Failed = "Failed", n9.Reconnecting = "Reconnecting", n9.Leaving = "Leaving", n9))(Vi || {});
var Fi = class {
  constructor(e16) {
    this.promise = new Promise((t11, i9) => {
      this.resolve = t11, this.reject = i9, e16(t11, i9);
    });
  }
};
var Gi = class {
  constructor(e16, t11) {
    this.onStateChange = e16;
    this.sendEvent = t11;
    this.TAG = "[RetryScheduler]";
    this.inProgress = /* @__PURE__ */ new Map();
    this.retryTaskIds = [];
  }
  schedule(n9) {
    return c(this, arguments, function* ({ category: e16, error: t11, task: i9, originalState: r9, maxFailedRetries: s9 = 5, changeState: o14 = true }) {
      yield this.scheduleTask({ category: e16, error: t11, changeState: o14, task: i9, originalState: r9, maxFailedRetries: s9 });
    });
  }
  reset() {
    this.retryTaskIds.forEach((e16) => clearTimeout(e16)), this.retryTaskIds = [], this.inProgress.clear();
  }
  isTaskInProgress(e16) {
    return !!this.inProgress.get(e16);
  }
  scheduleTask(l5) {
    return c(this, arguments, function* ({ category: e16, error: t11, changeState: i9, task: r9, originalState: s9, maxFailedRetries: o14 = 5, failedRetryCount: n9 = 0 }) {
      if (d.d(this.TAG, "schedule: ", { category: $[e16], error: t11 }), n9 === 0) {
        let T = this.inProgress.get(e16);
        if (T) {
          d.d(this.TAG, `schedule: Already a task for ${$[e16]} scheduled, waiting for its completion`), yield T.promise;
          return;
        }
        let E2 = new Fi((A, w) => {
        });
        this.inProgress.set(e16, E2), this.sendEvent(t11, e16);
      }
      let u3 = false, p2 = Sa[e16];
      for (let T in p2) {
        let E2 = p2[parseInt(T)];
        try {
          let A = this.inProgress.get(E2);
          A && (d.d(this.TAG, `schedule: Suspending retry task of ${$[e16]}, waiting for ${$[E2]} to recover`), yield A.promise, d.d(this.TAG, `schedule: Resuming retry task ${$[e16]} as it's dependency ${$[E2]} is recovered`));
        } catch (A) {
          d.d(this.TAG, `schedule: Stopping retry task of ${$[e16]} as it's dependency ${$[E2]} failed to recover`), u3 = true;
          break;
        }
      }
      if (n9 >= o14 || u3) {
        if (t11.description += `. [${$[e16]}] Could not recover after ${n9} tries`, u3 && (t11.description += ` Could not recover all of it's required dependencies - [${p2.map((T) => $[T]).toString()}]`), t11.isTerminal = true, this.inProgress.delete(e16), this.sendEvent(t11, e16), this.reset(), i9) this.onStateChange("Failed", t11);
        else throw t11;
        return;
      }
      i9 && this.onStateChange("Reconnecting", t11);
      let h2 = this.getDelayForRetryCount(e16, n9);
      d.d(this.TAG, `schedule: [${$[e16]}] [failedRetryCount=${n9}] Scheduling retry task in ${h2}ms`);
      let g2;
      try {
        g2 = yield this.setTimeoutPromise(r9, h2);
      } catch (T) {
        g2 = false, d.w(this.TAG, `[${$[e16]}] Un-caught exception ${T.name} in retry-task, initiating retry`, T);
      }
      if (g2) {
        let T = this.inProgress.get(e16);
        this.inProgress.delete(e16), T == null || T.resolve(n9), i9 && this.inProgress.size === 0 && this.onStateChange(s9), d.d(this.TAG, `schedule: [${$[e16]}] [failedRetryCount=${n9}] Recovered ♻️`);
      } else yield this.scheduleTask({ category: e16, error: t11, changeState: i9, task: r9, originalState: s9, maxFailedRetries: o14, failedRetryCount: n9 + 1 });
    });
  }
  getBaseDelayForTask(e16, t11) {
    return e16 === 2 ? 2 : Math.pow(2, t11);
  }
  getDelayForRetryCount(e16, t11) {
    let i9 = this.getBaseDelayForTask(e16, t11), r9 = e16 === 2 ? Math.random() * 2 : Math.random();
    return Math.round(Math.min(i9 + r9, 60) * 1e3);
  }
  setTimeoutPromise(e16, t11) {
    return c(this, null, function* () {
      return new Promise((i9, r9) => {
        let s9 = window.setTimeout(() => c(this, null, function* () {
          try {
            let o14 = yield e16();
            o14 && this.retryTaskIds.splice(this.retryTaskIds.indexOf(s9), 1), i9(o14);
          } catch (o14) {
            r9(o14);
          }
        }), t11);
        this.retryTaskIds.push(s9);
      });
    });
  }
};
var Wi = class extends be {
  constructor() {
    super(100);
    this.localStorage = new ce("hms-analytics");
    this.localStorage.clear(), this.initLocalStorageQueue();
  }
  enqueue(t11) {
    super.enqueue(t11), this.localStorage.set(this.storage);
  }
  dequeue() {
    let t11 = super.dequeue();
    return this.localStorage.set(this.storage), t11;
  }
  initLocalStorageQueue() {
    var t11;
    (t11 = this.localStorage.get()) == null || t11.forEach((i9) => {
      let r9 = new I(i9);
      super.enqueue(r9);
    });
  }
};
var $i = class {
  constructor() {
    this.TAG = "[AnalyticsTransport]";
  }
  sendEvent(e16) {
    try {
      this.sendSingleEvent(e16), this.flushFailedEvents();
    } catch (t11) {
      d.w(this.TAG, "sendEvent failed", t11);
    }
  }
  flushFailedEvents(e16) {
    var t11;
    try {
      for (d.d(this.TAG, "Flushing failed events", this.failedEvents); this.failedEvents.size() > 0; ) {
        let i9 = this.failedEvents.dequeue();
        i9 && (((t11 = i9.metadata) == null ? void 0 : t11.peer.peer_id) === e16 || !i9.metadata.peer.peer_id ? this.sendSingleEvent(i9) : Te.sendEvent(i9));
      }
    } catch (i9) {
      d.w(this.TAG, "flushFailedEvents failed", i9);
    }
  }
  sendSingleEvent(e16) {
    try {
      this.transportProvider.sendEvent(e16), d.d(this.TAG, "Sent event", e16.name, e16);
    } catch (t11) {
      throw d.w(this.TAG, `${this.transportProvider.TAG}.sendEvent failed, adding to local storage events`, { event: e16, error: t11 }), this.failedEvents.enqueue(e16), t11;
    }
  }
};
var Ki = class extends $i {
  constructor(t11) {
    super();
    this.transportProvider = t11;
    this.failedEvents = new Wi();
  }
};
var Xe = class {
  constructor(e16, t11, i9, r9) {
    this.store = e16;
    this.eventBus = t11;
    this.sampleWindowSize = i9;
    this.pushInterval = r9;
    this.shouldSendEvent = false;
    this.sequenceNum = 1;
    this.stop = () => {
      this.shouldSendEvent && this.sendEvent(), this.eventBus.statsUpdate.unsubscribe(this.handleStatsUpdate.bind(this)), this.shouldSendEvent = false;
    };
    this.start();
  }
  start() {
    this.shouldSendEvent || (this.stop(), this.shouldSendEvent = true, this.eventBus.statsUpdate.subscribe(this.handleStatsUpdate.bind(this)), this.startLoop().catch((e16) => d.e("[StatsAnalytics]", e16.message)));
  }
  startLoop() {
    return c(this, null, function* () {
      for (; this.shouldSendEvent; ) yield J(this.pushInterval * 1e3), this.sendEvent();
    });
  }
  sendEvent() {
    this.trackAnalytics.forEach((e16) => {
      e16.clearSamples();
    });
  }
};
var Ze = class {
  constructor({ track: e16, ssrc: t11, rid: i9, kind: r9, sampleWindowSize: s9 }) {
    this.samples = [];
    this.tempStats = [];
    this.track = e16, this.ssrc = t11, this.rid = i9, this.kind = r9, this.track_id = this.track.trackId, this.source = this.track.source, this.sampleWindowSize = s9;
  }
  pushTempStat(e16) {
    this.tempStats.push(e16);
  }
  createSample() {
    this.tempStats.length !== 0 && (this.samples.push(this.collateSample()), this.prevLatestStat = this.getLatestStat(), this.tempStats.length = 0);
  }
  clearSamples() {
    this.samples.length = 0;
  }
  getLatestStat() {
    return this.tempStats[this.tempStats.length - 1];
  }
  getFirstStat() {
    return this.tempStats[0];
  }
  calculateSum(e16) {
    if (typeof this.getLatestStat()[e16] == "number") return this.tempStats.reduce((i9, r9) => i9 + (r9[e16] || 0), 0);
  }
  calculateAverage(e16, t11 = true) {
    let i9 = this.calculateSum(e16), r9 = i9 !== void 0 ? i9 / this.tempStats.length : void 0;
    return r9 ? t11 ? Math.round(r9) : r9 : void 0;
  }
  calculateDifferenceForSample(e16) {
    var r9;
    let t11 = Number((r9 = this.prevLatestStat) == null ? void 0 : r9[e16]) || 0;
    return (Number(this.getLatestStat()[e16]) || 0) - t11;
  }
  calculateDifferenceAverage(e16, t11 = true) {
    let i9 = this.calculateDifferenceForSample(e16) / this.tempStats.length;
    return t11 ? Math.round(i9) : i9;
  }
  calculateInstancesOfHigh(e16, t11) {
    if (typeof this.getLatestStat()[e16] == "number") return this.tempStats.reduce((r9, s9) => r9 + ((s9[e16] || 0) > t11 ? 1 : 0), 0);
  }
};
var qi = (a12, e16) => a12 && e16 && (a12.frameWidth !== e16.frameWidth || a12.frameHeight !== e16.frameHeight);
var ji = (a12, e16) => a12 && e16 && a12.enabled !== e16.enabled;
var Ct = (a12) => Object.entries(a12).filter(([, e16]) => e16 !== void 0).reduce((e16, [t11, i9]) => (e16[t11] = i9, e16), {});
var Lt = class extends Xe {
  constructor() {
    super(...arguments);
    this.trackAnalytics = /* @__PURE__ */ new Map();
  }
  toAnalytics() {
    var r9, s9;
    let t11 = [], i9 = [];
    return this.trackAnalytics.forEach((o14) => {
      o14.track.type === "audio" ? t11.push(o14.toAnalytics()) : o14.track.type === "video" && i9.push(o14.toAnalytics());
    }), { audio: t11, video: i9, joined_at: (s9 = (r9 = this.store.getRoom()) == null ? void 0 : r9.joinedAt) == null ? void 0 : s9.getTime(), sequence_num: this.sequenceNum++, max_window_sec: 30 };
  }
  sendEvent() {
    this.eventBus.analytics.publish(y.publishStats(this.toAnalytics())), super.sendEvent();
  }
  handleStatsUpdate(t11) {
    let i9 = false, r9 = t11.getLocalTrackStats();
    Object.keys(r9).forEach((s9) => {
      let o14 = r9[s9], n9 = this.store.getLocalPeerTracks().find((l5) => l5.getTrackIDBeingSent() === s9);
      Object.keys(o14).forEach((l5) => {
        var T, E2, A;
        let u3 = o14[l5];
        if (!n9) return;
        let p2 = this.getTrackIdentifier(n9.trackId, u3), h2 = v(m({}, u3), { availableOutgoingBitrate: (E2 = (T = t11.getLocalPeerStats()) == null ? void 0 : T.publish) == null ? void 0 : E2.availableOutgoingBitrate });
        if (p2 && this.trackAnalytics.has(p2)) (A = this.trackAnalytics.get(p2)) == null || A.pushTempStat(h2);
        else if (n9) {
          let w = new Ur({ track: n9, sampleWindowSize: this.sampleWindowSize, rid: u3.rid, ssrc: u3.ssrc.toString(), kind: u3.kind });
          w.pushTempStat(h2), this.trackAnalytics.set(this.getTrackIdentifier(n9.trackId, u3), w);
        }
        let g2 = this.trackAnalytics.get(p2);
        g2 != null && g2.shouldCreateSample() && (i9 = true);
      });
    }), this.trackAnalytics.forEach((s9) => {
      !this.store.hasTrack(s9.track) && !(s9.samples.length > 0) && this.trackAnalytics.delete(s9.track_id);
    }), i9 && this.trackAnalytics.forEach((s9) => {
      s9.createSample();
    });
  }
  getTrackIdentifier(t11, i9) {
    return i9.rid ? `${t11}:${i9.rid}` : t11;
  }
};
var Ur = class extends Ze {
  constructor() {
    super(...arguments);
    this.samples = [];
    this.collateSample = () => {
      let t11 = this.getLatestStat(), i9 = t11.qualityLimitationDurations, r9 = i9 && { bandwidth_sec: i9.bandwidth, cpu_sec: i9.cpu, other_sec: i9.other }, s9 = t11.frameHeight ? { height_px: this.getLatestStat().frameHeight, width_px: this.getLatestStat().frameWidth } : void 0, o14 = this.calculateAverage("jitter", false), n9 = o14 ? Math.round(o14 * 1e3) : void 0, l5 = this.calculateAverage("roundTripTime", false), u3 = l5 ? Math.round(l5 * 1e3) : void 0;
      return Ct({ timestamp: Date.now(), avg_available_outgoing_bitrate_bps: this.calculateAverage("availableOutgoingBitrate"), avg_bitrate_bps: this.calculateAverage("bitrate"), avg_fps: this.calculateAverage("framesPerSecond"), total_packets_lost: this.getLatestStat().packetsLost, total_packets_sent: this.getLatestStat().packetsSent, total_packet_sent_delay_sec: parseFloat(this.calculateDifferenceForSample("totalPacketSendDelay").toFixed(4)), total_fir_count: this.calculateDifferenceForSample("firCount"), total_pli_count: this.calculateDifferenceForSample("pliCount"), total_nack_count: this.calculateDifferenceForSample("nackCount"), avg_jitter_ms: n9, avg_round_trip_time_ms: u3, total_quality_limitation: r9, resolution: s9 });
    };
    this.shouldCreateSample = () => {
      let t11 = this.tempStats.length, i9 = this.tempStats[t11 - 1], r9 = this.tempStats[t11 - 2];
      return t11 === 30 || ji(i9, r9) || i9.kind === "video" && qi(i9, r9);
    };
    this.toAnalytics = () => ({ track_id: this.track_id, ssrc: this.ssrc, source: this.source, rid: this.rid, samples: this.samples });
  }
};
var wt = class extends Xe {
  constructor() {
    super(...arguments);
    this.trackAnalytics = /* @__PURE__ */ new Map();
  }
  toAnalytics() {
    var r9, s9;
    let t11 = [], i9 = [];
    return this.trackAnalytics.forEach((o14) => {
      o14.track.type === "audio" ? t11.push(o14.toAnalytics()) : o14.track.type === "video" && i9.push(o14.toAnalytics());
    }), { audio: t11, video: i9, joined_at: (s9 = (r9 = this.store.getRoom()) == null ? void 0 : r9.joinedAt) == null ? void 0 : s9.getTime(), sequence_num: this.sequenceNum++, max_window_sec: 10 };
  }
  sendEvent() {
    this.eventBus.analytics.publish(y.subscribeStats(this.toAnalytics())), super.sendEvent();
  }
  handleStatsUpdate(t11) {
    let i9 = t11.getAllRemoteTracksStats(), r9 = false;
    Object.keys(i9).forEach((s9) => {
      var h2;
      let o14 = i9[s9], n9 = this.store.getTrackById(s9), l5 = o14.jitterBufferDelay && o14.jitterBufferEmittedCount && o14.jitterBufferDelay / o14.jitterBufferEmittedCount, u3 = this.calculateAvSyncForStat(o14, t11);
      if (this.trackAnalytics.has(s9)) (h2 = this.trackAnalytics.get(s9)) == null || h2.pushTempStat(v(m({}, o14), { calculatedJitterBufferDelay: l5, avSync: u3 }));
      else if (n9) {
        let g2 = new Vr({ track: n9, sampleWindowSize: this.sampleWindowSize, ssrc: o14.ssrc.toString(), kind: o14.kind });
        g2.pushTempStat(v(m({}, o14), { calculatedJitterBufferDelay: l5, avSync: u3 })), this.trackAnalytics.set(s9, g2);
      }
      let p2 = this.trackAnalytics.get(s9);
      p2 != null && p2.shouldCreateSample() && (r9 = true);
    }), this.trackAnalytics.forEach((s9) => {
      !this.store.hasTrack(s9.track) && !(s9.samples.length > 0) && this.trackAnalytics.delete(s9.track_id);
    }), r9 && this.trackAnalytics.forEach((s9) => {
      s9.createSample();
    });
  }
  calculateAvSyncForStat(t11, i9) {
    if (!t11.peerID || !t11.estimatedPlayoutTimestamp || t11.kind !== "video") return;
    let r9 = this.store.getPeerById(t11.peerID), s9 = r9 == null ? void 0 : r9.audioTrack, o14 = r9 == null ? void 0 : r9.videoTrack;
    if (!(s9 && o14 && s9.enabled && o14.enabled)) return pt;
    let l5 = i9.getRemoteTrackStats(s9.trackId);
    if (!l5) return pt;
    if (l5.estimatedPlayoutTimestamp) return l5.estimatedPlayoutTimestamp - t11.estimatedPlayoutTimestamp;
  }
};
var Vr = class extends Ze {
  constructor() {
    super(...arguments);
    this.samples = [];
    this.collateSample = () => {
      let t11 = this.getLatestStat(), i9 = this.getFirstStat(), r9 = { timestamp: Date.now(), total_pli_count: this.calculateDifferenceForSample("pliCount"), total_nack_count: this.calculateDifferenceForSample("nackCount"), avg_jitter_buffer_delay: this.calculateAverage("calculatedJitterBufferDelay", false) };
      if (t11.kind === "video") return Ct(v(m({}, r9), { avg_av_sync_ms: this.calculateAvgAvSyncForSample(), avg_frames_received_per_sec: this.calculateDifferenceAverage("framesReceived"), avg_frames_dropped_per_sec: this.calculateDifferenceAverage("framesDropped"), avg_frames_decoded_per_sec: this.calculateDifferenceAverage("framesDecoded"), frame_width: this.calculateAverage("frameWidth"), frame_height: this.calculateAverage("frameHeight"), pause_count: this.calculateDifferenceForSample("pauseCount"), pause_duration_seconds: this.calculateDifferenceForSample("totalPausesDuration"), freeze_count: this.calculateDifferenceForSample("freezeCount"), freeze_duration_seconds: this.calculateDifferenceForSample("totalFreezesDuration") }));
      {
        let s9 = (t11.concealedSamples || 0) - (t11.silentConcealedSamples || 0) - ((i9.concealedSamples || 0) - (i9.silentConcealedSamples || 0));
        return Ct(v(m({}, r9), { audio_level: this.calculateInstancesOfHigh("audioLevel", 0.05), audio_concealed_samples: s9, audio_total_samples_received: this.calculateDifferenceForSample("totalSamplesReceived"), audio_concealment_events: this.calculateDifferenceForSample("concealmentEvents"), fec_packets_discarded: this.calculateDifferenceForSample("fecPacketsDiscarded"), fec_packets_received: this.calculateDifferenceForSample("fecPacketsReceived"), total_samples_duration: this.calculateDifferenceForSample("totalSamplesDuration"), total_packets_received: this.calculateDifferenceForSample("packetsReceived"), total_packets_lost: this.calculateDifferenceForSample("packetsLost") }));
      }
    };
    this.shouldCreateSample = () => {
      let t11 = this.tempStats.length, i9 = this.tempStats[t11 - 1], r9 = this.tempStats[t11 - 2];
      return t11 === 10 || ji(i9, r9) || i9.kind === "video" && qi(i9, r9);
    };
    this.toAnalytics = () => ({ track_id: this.track_id, ssrc: this.ssrc, source: this.source, rid: this.rid, samples: this.samples });
  }
  calculateAvgAvSyncForSample() {
    let i9 = this.tempStats.map((r9) => r9.avSync).filter((r9) => r9 !== void 0 && r9 !== pt);
    return i9.length === 0 ? pt : i9.reduce((r9, s9) => r9 + s9, 0) / i9.length;
  }
};
var Qi = ((t11) => (t11[t11.Publish = 0] = "Publish", t11[t11.Subscribe = 1] = "Subscribe", t11))(Qi || {});
function ga(a12, e16) {
  var r9;
  let t11 = Dt.parse(a12.sdp);
  if (!((r9 = t11.origin) != null && r9.username.startsWith("mozilla"))) return a12;
  let i9 = e16 ? Array.from(e16.values()) : [];
  return t11.media.forEach((s9) => {
    var l5, u3, p2;
    let o14 = (l5 = s9.msid) == null ? void 0 : l5.split(" ")[0], n9 = (u3 = i9.find((h2) => h2.type === s9.type && h2.stream_id === o14)) == null ? void 0 : u3.track_id;
    n9 && (s9.msid = (p2 = s9.msid) == null ? void 0 : p2.replace(/\s(.+)/, ` ${n9}`));
  }), { type: a12.type, sdp: Dt.write(t11) };
}
function Ta(a12, e16) {
  var s9;
  if (!(a12 != null && a12.sdp) || !e16) return;
  let i9 = Dt.parse(a12.sdp).media.find((o14) => ie(o14.mid) && parseInt(o14.mid) === parseInt(e16));
  return (s9 = i9 == null ? void 0 : i9.msid) == null ? void 0 : s9.split(" ")[1];
}
function fa(a12) {
  return a12.sdp.includes("usedtx=1") ? a12 : { type: a12.type, sdp: a12.sdp.replace("useinbandfec=1", "useinbandfec=1;usedtx=1") };
}
var fe = "[HMSConnection]";
var xe = class {
  constructor(e16, t11) {
    this.candidates = new Array();
    this.role = e16, this.signal = t11;
  }
  get iceConnectionState() {
    return this.nativeConnection.iceConnectionState;
  }
  get connectionState() {
    return this.nativeConnection.connectionState;
  }
  get action() {
    return this.role === 0 ? "PUBLISH" : "SUBSCRIBE";
  }
  addTransceiver(e16, t11) {
    return this.nativeConnection.addTransceiver(e16, t11);
  }
  createOffer(e16, t11) {
    return c(this, null, function* () {
      try {
        let i9 = yield this.nativeConnection.createOffer(t11);
        return d.d(fe, `[role=${this.role}] createOffer offer=${JSON.stringify(i9, null, 1)}`), fa(ga(i9, e16));
      } catch (i9) {
        throw S.WebrtcErrors.CreateOfferFailed(this.action, i9.message);
      }
    });
  }
  createAnswer(e16 = void 0) {
    return c(this, null, function* () {
      try {
        let t11 = yield this.nativeConnection.createAnswer(e16);
        return d.d(fe, `[role=${this.role}] createAnswer answer=${JSON.stringify(t11, null, 1)}`), t11;
      } catch (t11) {
        throw S.WebrtcErrors.CreateAnswerFailed(this.action, t11.message);
      }
    });
  }
  setLocalDescription(e16) {
    return c(this, null, function* () {
      try {
        d.d(fe, `[role=${this.role}] setLocalDescription description=${JSON.stringify(e16, null, 1)}`), yield this.nativeConnection.setLocalDescription(e16);
      } catch (t11) {
        throw S.WebrtcErrors.SetLocalDescriptionFailed(this.action, t11.message);
      }
    });
  }
  setRemoteDescription(e16) {
    return c(this, null, function* () {
      try {
        d.d(fe, `[role=${this.role}] setRemoteDescription description=${JSON.stringify(e16, null, 1)}`), yield this.nativeConnection.setRemoteDescription(e16);
      } catch (t11) {
        throw S.WebrtcErrors.SetRemoteDescriptionFailed(this.action, t11.message);
      }
    });
  }
  addIceCandidate(e16) {
    return c(this, null, function* () {
      if (this.nativeConnection.signalingState === "closed") {
        d.d(fe, `[role=${this.role}] addIceCandidate signalling state closed`);
        return;
      }
      d.d(fe, `[role=${this.role}] addIceCandidate candidate=${JSON.stringify(e16, null, 1)}`), yield this.nativeConnection.addIceCandidate(e16);
    });
  }
  get remoteDescription() {
    return this.nativeConnection.remoteDescription;
  }
  getSenders() {
    return this.nativeConnection.getSenders();
  }
  logSelectedIceCandidatePairs() {
    try {
      (this.role === 0 ? this.getSenders() : this.getReceivers()).forEach((t11) => {
        var r9;
        let i9 = (r9 = t11.track) == null ? void 0 : r9.kind;
        if (t11.transport) {
          let s9 = t11.transport.iceTransport, o14 = () => {
            typeof s9.getSelectedCandidatePair == "function" && (this.selectedCandidatePair = s9.getSelectedCandidatePair(), d.d(fe, `${Qi[this.role]} connection`, `selected ${i9 || "unknown"} candidate pair`, JSON.stringify(this.selectedCandidatePair, null, 2)));
          };
          typeof s9.onselectedcandidatepairchange == "function" && (s9.onselectedcandidatepairchange = o14), o14();
        }
      });
    } catch (e16) {
      d.w(fe, `Error in logging selected ice candidate pair for ${Qi[this.role]} connection`, e16);
    }
  }
  removeTrack(e16) {
    this.nativeConnection.signalingState !== "closed" && this.nativeConnection.removeTrack(e16);
  }
  setMaxBitrateAndFramerate(e16) {
    return c(this, null, function* () {
      let t11 = e16.settings.maxBitrate, i9 = e16 instanceof U && e16.settings.maxFramerate, r9 = this.getSenders().find((s9) => {
        var o14;
        return ((o14 = s9 == null ? void 0 : s9.track) == null ? void 0 : o14.id) === e16.getTrackIDBeingSent();
      });
      if (r9) {
        let s9 = r9.getParameters();
        s9.encodings.length === 1 && (t11 && (s9.encodings[0].maxBitrate = t11 * 1e3), i9 && (s9.encodings[0].maxFramerate = i9)), yield r9.setParameters(s9);
      } else d.w(fe, `no sender found to setMaxBitrate for track - ${e16.trackId}, sentTrackId - ${e16.getTrackIDBeingSent()}`);
    });
  }
  getStats() {
    return c(this, null, function* () {
      return yield this.nativeConnection.getStats();
    });
  }
  close() {
    return c(this, null, function* () {
      this.nativeConnection.close();
    });
  }
  getReceivers() {
    return this.nativeConnection.getReceivers();
  }
};
var _t = class extends xe {
  constructor(t11, i9, r9) {
    super(0, t11);
    this.TAG = "[HMSPublishConnection]";
    this.observer = r9, this.nativeConnection = new RTCPeerConnection(i9), this.channel = this.nativeConnection.createDataChannel(ei, { protocol: "SCTP" }), this.channel.onerror = (s9) => d.e(this.TAG, `publish data channel onerror ${s9}`, s9), this.nativeConnection.onicecandidate = ({ candidate: s9 }) => {
      s9 && t11.trickle(this.role, s9);
    }, this.nativeConnection.oniceconnectionstatechange = () => {
      this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState);
    }, this.nativeConnection.onconnectionstatechange = () => {
      this.observer.onConnectionStateChange(this.nativeConnection.connectionState), this.nativeConnection.sctp && (this.nativeConnection.sctp.transport.onstatechange = () => {
        var s9;
        this.observer.onDTLSTransportStateChange((s9 = this.nativeConnection.sctp) == null ? void 0 : s9.transport.state);
      }, this.nativeConnection.sctp.transport.onerror = (s9) => {
        var o14;
        this.observer.onDTLSTransportError(new Error((o14 = s9 == null ? void 0 : s9.error) == null ? void 0 : o14.errorDetail) || "DTLS Transport failed");
      });
    };
  }
  initAfterJoin() {
    this.nativeConnection.onnegotiationneeded = () => c(this, null, function* () {
      d.d(this.TAG, "onnegotiationneeded"), yield this.observer.onRenegotiationNeeded();
    });
  }
};
var Nt = class {
  constructor(e16, t11, i9 = "") {
    this.TAG = "[HMSDataChannel]";
    this.nativeChannel = e16, this.observer = t11, this.metadata = i9, e16.onmessage = (r9) => {
      this.observer.onMessage(r9.data);
    };
  }
  get id() {
    return this.nativeChannel.id;
  }
  get label() {
    return this.nativeChannel.label;
  }
  get readyState() {
    return this.nativeChannel.readyState;
  }
  send(e16) {
    d.d(this.TAG, `[${this.metadata}] Sending [size=${e16.length}] message=${e16}`), this.nativeChannel.send(e16);
  }
  close() {
    this.nativeChannel.close();
  }
};
var Ot = class a8 extends xe {
  constructor(t11, i9, r9, s9) {
    super(1, t11);
    this.isFlagEnabled = r9;
    this.TAG = "[HMSSubscribeConnection]";
    this.remoteStreams = /* @__PURE__ */ new Map();
    this.MAX_RETRIES = 3;
    this.pendingMessageQueue = [];
    this.eventEmitter = new import_eventemitter24.default({ maxListeners: 60 });
    this.handlePendingApiMessages = () => {
      this.eventEmitter.emit("open", true), this.pendingMessageQueue.length > 0 && (d.d(this.TAG, "Found pending message queue, sending messages"), this.pendingMessageQueue.forEach((t12) => this.sendOverApiDataChannel(t12)), this.pendingMessageQueue.length = 0);
    };
    this.sendMessage = (t12, i10) => c(this, null, function* () {
      var s10;
      ((s10 = this.apiChannel) == null ? void 0 : s10.readyState) !== "open" && (yield this.eventEmitter.waitFor("open"));
      let r10;
      for (let o14 = 0; o14 < this.MAX_RETRIES; o14++) {
        this.apiChannel.send(t12), r10 = yield this.waitForResponse(i10);
        let n9 = r10.error;
        if (n9) {
          if (n9.code === 404) {
            d.d(this.TAG, `Track not found ${i10}`, { request: t12, try: o14 + 1, error: n9 });
            break;
          }
          if (d.d(this.TAG, `Failed sending ${i10}`, { request: t12, try: o14 + 1, error: n9 }), !(n9.code / 100 === 5 || n9.code === 429)) throw Error(`code=${n9.code}, message=${n9.message}`);
          let u3 = (2 + Math.random() * 2) * 1e3;
          yield Ae(u3);
        } else break;
      }
      return r10;
    });
    this.waitForResponse = (t12) => c(this, null, function* () {
      let i10 = yield this.eventEmitter.waitFor("message", function(s10) {
        return s10.includes(t12);
      }), r10 = JSON.parse(i10[0]);
      return d.d(this.TAG, `response for ${t12} -`, JSON.stringify(r10, null, 2)), r10;
    });
    this.observer = s9, this.nativeConnection = new RTCPeerConnection(i9), this.initNativeConnectionCallbacks();
  }
  initNativeConnectionCallbacks() {
    this.nativeConnection.oniceconnectionstatechange = () => {
      this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState);
    }, this.nativeConnection.onconnectionstatechange = () => {
      this.observer.onConnectionStateChange(this.nativeConnection.connectionState);
    }, this.nativeConnection.ondatachannel = (t11) => {
      t11.channel.label === ei && (this.apiChannel = new Nt(t11.channel, { onMessage: (i9) => {
        this.eventEmitter.emit("message", i9), this.observer.onApiChannelMessage(i9);
      } }, `role=${this.role}`), t11.channel.onopen = this.handlePendingApiMessages);
    }, this.nativeConnection.onicecandidate = (t11) => {
      t11.candidate !== null && this.signal.trickle(this.role, t11.candidate);
    }, this.nativeConnection.ontrack = (t11) => {
      var u3;
      let i9 = t11.streams[0], r9 = i9.id;
      if (!this.remoteStreams.has(r9)) {
        let p2 = new he(i9, this);
        this.remoteStreams.set(r9, p2);
      }
      i9.addEventListener("removetrack", (p2) => {
        if (p2.track.id !== t11.track.id) return;
        let h2 = s9.tracks.findIndex((g2) => {
          var T;
          return g2.nativeTrack.id === p2.track.id && t11.transceiver.mid === ((T = g2.transceiver) == null ? void 0 : T.mid);
        });
        if (h2 >= 0) {
          let g2 = s9.tracks[h2];
          this.observer.onTrackRemove(g2), s9.tracks.splice(h2, 1), s9.tracks.length === 0 && this.remoteStreams.delete(r9);
        }
      });
      let s9 = this.remoteStreams.get(r9), o14 = t11.track.kind === "audio" ? te : O, n9 = new o14(s9, t11.track);
      t11.track.kind === "video" && s9.setVideoLayerLocally("none", "addTrack", "subscribeConnection"), n9.transceiver = t11.transceiver;
      let l5 = Ta(this.remoteDescription, (u3 = t11.transceiver) == null ? void 0 : u3.mid);
      l5 && n9.setSdpTrackId(l5), s9.tracks.push(n9), this.observer.onTrackAdd(n9);
    };
  }
  sendOverApiDataChannel(t11) {
    this.apiChannel && this.apiChannel.readyState === "open" ? this.apiChannel.send(t11) : (d.w(this.TAG, `API Data channel not ${this.apiChannel ? "open" : "present"}, queueing`, t11), this.pendingMessageQueue.push(t11));
  }
  sendOverApiDataChannelWithResponse(t11, i9) {
    return c(this, null, function* () {
      let r9 = v4_default();
      if (t11.method === "prefer-video-track-state" && this.isFlagEnabled("disableVideoTrackAutoUnsubscribe") && t11.params.max_spatial_layer === "none") return d.d(this.TAG, "video auto unsubscribe is disabled, request is ignored"), { id: r9 };
      let s9 = JSON.stringify(m({ id: i9 || r9, jsonrpc: "2.0" }, t11));
      return this.sendMessage(s9, r9);
    });
  }
  close() {
    return c(this, null, function* () {
      var t11;
      yield K(a8.prototype, this, "close").call(this), (t11 = this.apiChannel) == null || t11.close();
    });
  }
};
var zi = "[InitService]";
var xt = class {
  static handleError(e16, t11) {
    switch (e16.status) {
      case 404:
        throw S.APIErrors.EndpointUnreachable("INIT", t11.message || e16.statusText);
      case 200:
        break;
      default:
        throw S.APIErrors.ServerErrors(t11.code || e16.status, "INIT", t11.message || (e16 == null ? void 0 : e16.statusText));
    }
  }
  static fetchInitConfig(o14) {
    return c(this, arguments, function* ({ token: e16, peerId: t11, userAgent: i9, initEndpoint: r9 = "https://prod-init.100ms.live", region: s9 = "" }) {
      d.d(zi, `fetchInitConfig: initEndpoint=${r9} token=${e16} peerId=${t11} region=${s9} `);
      let n9 = Go(r9, t11, i9, s9);
      try {
        let l5 = yield fetch(n9, { headers: { Authorization: `Bearer ${e16}` } });
        try {
          let u3 = yield l5.clone().json();
          return this.handleError(l5, u3), d.d(zi, `config is ${JSON.stringify(u3, null, 2)}`), Wo(u3);
        } catch (u3) {
          let p2 = yield l5.text();
          throw d.e(zi, "json error", u3.message, p2), S.APIErrors.ServerErrors(l5.status, "INIT", p2);
        }
      } catch (l5) {
        let u3 = l5;
        throw ["Failed to fetch", "NetworkError", "ECONNRESET"].some((p2) => u3.message.includes(p2)) ? S.APIErrors.EndpointUnreachable("INIT", u3.message) : u3;
      }
    });
  }
};
function Go(a12, e16, t11, i9) {
  try {
    let r9 = new URL("/init", a12);
    return i9 && i9.trim().length > 0 && r9.searchParams.set("region", i9.trim()), r9.searchParams.set("peer_id", e16), r9.searchParams.set("user_agent_v2", t11), r9.toString();
  } catch (r9) {
    let s9 = r9;
    throw d.e(zi, s9.name, s9.message), s9;
  }
}
function Wo(a12) {
  var e16;
  return v(m({}, a12), { rtcConfiguration: v(m({}, a12.rtcConfiguration), { iceServers: (e16 = a12.rtcConfiguration) == null ? void 0 : e16.ice_servers }) });
}
var Ut = class {
  constructor(e16) {
    this.TAG = "[SIGNAL]: ";
    this.pongResponseTimes = new be(5);
    this.isJoinCompleted = false;
    this.pendingTrickle = [];
    this.socket = null;
    this.callbacks = /* @__PURE__ */ new Map();
    this._isConnected = false;
    this.id = 0;
    this.onCloseHandler = () => {
    };
    this.resolvePingOnAnyResponse = () => {
      this.callbacks.forEach((e17, t11) => {
        var i9;
        ((i9 = e17.metadata) == null ? void 0 : i9.method) === "ping" && (e17.resolve({ timestamp: Date.now() }), this.callbacks.delete(t11));
      });
    };
    this.offlineListener = () => {
      d.d(this.TAG, "Window network offline"), this.setIsConnected(false, "Window network offline");
    };
    this.onlineListener = () => {
      d.d(this.TAG, "Window network online"), this.observer.onNetworkOnline();
    };
    this.observer = e16, window.addEventListener("offline", this.offlineListener), window.addEventListener("online", this.onlineListener), this.onMessageHandler = this.onMessageHandler.bind(this);
  }
  get isConnected() {
    return this._isConnected;
  }
  setIsConnected(e16, t11 = "") {
    d.d(this.TAG, `isConnected set id: ${this.id}, oldValue: ${this._isConnected}, newValue: ${e16}`), this._isConnected !== e16 && (this._isConnected && !e16 ? (this._isConnected = e16, this.rejectPendingCalls(t11), this.observer.onOffline(t11)) : !this._isConnected && e16 && (this._isConnected = e16, this.observer.onOnline()));
  }
  getPongResponseTimes() {
    return this.pongResponseTimes.toList();
  }
  internalCall(e16, t11) {
    return c(this, null, function* () {
      var s9;
      let i9 = v4_default(), r9 = { method: e16, params: t11, id: i9, jsonrpc: "2.0" };
      (s9 = this.socket) == null || s9.send(JSON.stringify(r9));
      try {
        return yield new Promise((n9, l5) => {
          this.callbacks.set(i9, { resolve: n9, reject: l5, metadata: { method: e16 } });
        });
      } catch (o14) {
        if (o14 instanceof f) throw o14;
        let n9 = o14;
        throw S.WebsocketMethodErrors.ServerErrors(Number(n9.code), nr(e16), n9.message);
      }
    });
  }
  notify(e16, t11) {
    var r9, s9;
    let i9 = { method: e16, params: t11 };
    ((r9 = this.socket) == null ? void 0 : r9.readyState) === WebSocket.OPEN && ((s9 = this.socket) == null || s9.send(JSON.stringify(i9)));
  }
  open(e16) {
    return new Promise((t11, i9) => {
      let r9 = false;
      this.socket && (this.socket.close(), this.socket.removeEventListener("close", this.onCloseHandler), this.socket.removeEventListener("message", this.onMessageHandler)), this.socket = new WebSocket(e16);
      let s9 = () => {
        d.e(this.TAG, "Error from websocket"), r9 = true, i9(S.WebSocketConnectionErrors.FailedToConnect("JOIN", "Error opening websocket connection"));
      };
      this.onCloseHandler = (n9) => {
        d.w(`Websocket closed code=${n9.code}`), r9 ? this.setIsConnected(false, `code: ${n9.code}${n9.code !== 1e3 ? ", unexpected websocket close" : ""}`) : (r9 = true, i9(S.WebSocketConnectionErrors.AbnormalClose("JOIN", `Error opening websocket connection - websocket closed unexpectedly with code=${n9.code}`)));
      }, this.socket.addEventListener("error", s9);
      let o14 = () => {
        var n9, l5;
        r9 = true, t11(), this.setIsConnected(true), this.id++, (n9 = this.socket) == null || n9.removeEventListener("open", o14), (l5 = this.socket) == null || l5.removeEventListener("error", s9), this.pingPongLoop(this.id);
      };
      this.socket.addEventListener("open", o14), this.socket.addEventListener("close", this.onCloseHandler), this.socket.addEventListener("message", this.onMessageHandler);
    });
  }
  close() {
    return c(this, null, function* () {
      window.removeEventListener("offline", this.offlineListener), window.removeEventListener("online", this.onlineListener), this.socket ? (this.socket.close(1e3, "Normal Close"), this.setIsConnected(false, "code: 1000, normal websocket close"), this.socket.removeEventListener("close", this.onCloseHandler), this.socket.removeEventListener("message", this.onMessageHandler)) : this.setIsConnected(false, "websocket not connected yet");
    });
  }
  join(e16, t11, i9, r9, s9, o14, n9) {
    return c(this, null, function* () {
      if (!this.isConnected) throw S.WebSocketConnectionErrors.WebSocketConnectionLost("JOIN", "Failed to send join over WS connection");
      let l5 = { name: e16, disableVidAutoSub: i9, data: t11, offer: n9, server_sub_degrade: r9, simulcast: s9, onDemandTracks: o14 }, u3 = yield this.internalCall("join", l5);
      return this.isJoinCompleted = true, this.pendingTrickle.forEach(({ target: p2, candidate: h2 }) => this.trickle(p2, h2)), this.pendingTrickle.length = 0, d.d(this.TAG, `join: response=${JSON.stringify(u3, null, 1)}`), u3;
    });
  }
  trickle(e16, t11) {
    this.isJoinCompleted ? this.notify("trickle", { target: e16, candidate: t11 }) : this.pendingTrickle.push({ target: e16, candidate: t11 });
  }
  offer(e16, t11) {
    return c(this, null, function* () {
      return yield this.call("offer", { desc: e16, tracks: Object.fromEntries(t11) });
    });
  }
  answer(e16) {
    this.notify("answer", { desc: e16 });
  }
  trackUpdate(e16) {
    this.notify("track-update", { tracks: Object.fromEntries(e16) });
  }
  broadcast(e16) {
    return c(this, null, function* () {
      return yield this.call("broadcast", e16);
    });
  }
  leave() {
    this.notify("leave", {});
  }
  endRoom(e16, t11) {
    return c(this, null, function* () {
      yield this.call("end-room", { lock: e16, reason: t11 });
    });
  }
  sendEvent(e16) {
    if (!this.isConnected) throw Error(`${this.TAG} not connected. Could not send event ${e16}`);
    this.notify("analytics", e16.toSignalParams());
  }
  ping(e16) {
    let t11 = Date.now(), i9 = new Promise((s9) => {
      setTimeout(() => {
        s9(Date.now() - t11);
      }, e16 + 1);
    }), r9 = this.internalCall("ping", { timestamp: t11 }).then(() => Date.now() - t11).catch(() => Date.now() - t11);
    return Promise.race([i9, r9]);
  }
  requestRoleChange(e16) {
    return c(this, null, function* () {
      yield this.call("role-change-request", e16);
    });
  }
  requestBulkRoleChange(e16) {
    return c(this, null, function* () {
      yield this.call("role-change-request", e16);
    });
  }
  acceptRoleChangeRequest(e16) {
    return c(this, null, function* () {
      yield this.call("role-change", e16);
    });
  }
  requestTrackStateChange(e16) {
    return c(this, null, function* () {
      yield this.call("track-update-request", e16);
    });
  }
  requestMultiTrackStateChange(e16) {
    return c(this, null, function* () {
      yield this.call("change-track-mute-state-request", e16);
    });
  }
  removePeer(e16) {
    return c(this, null, function* () {
      yield this.call("peer-leave-request", e16);
    });
  }
  startRTMPOrRecording(e16) {
    return c(this, null, function* () {
      yield this.call("rtmp-start", m({}, e16));
    });
  }
  stopRTMPAndRecording() {
    return c(this, null, function* () {
      yield this.call("rtmp-stop", {});
    });
  }
  startHLSStreaming(e16) {
    return c(this, null, function* () {
      yield this.call("hls-start", m({}, e16));
    });
  }
  stopHLSStreaming(e16) {
    return c(this, null, function* () {
      yield this.call("hls-stop", m({}, e16));
    });
  }
  sendHLSTimedMetadata(e16) {
    return c(this, null, function* () {
      yield this.call("hls-timed-metadata", m({}, e16));
    });
  }
  updatePeer(e16) {
    return c(this, null, function* () {
      yield this.call("peer-update", m({}, e16));
    });
  }
  getPeer(e16) {
    return c(this, null, function* () {
      yield this.call("get-peer", m({}, e16));
    });
  }
  joinGroup(e16) {
    return c(this, null, function* () {
      return yield this.call("group-join", { name: e16 });
    });
  }
  leaveGroup(e16) {
    return c(this, null, function* () {
      return yield this.call("group-leave", { name: e16 });
    });
  }
  addToGroup(e16, t11) {
    return c(this, null, function* () {
      yield this.call("group-add", { name: t11, peer_id: e16 });
    });
  }
  removeFromGroup(e16, t11) {
    return c(this, null, function* () {
      yield this.call("group-remove", { name: t11, peer_id: e16 });
    });
  }
  peerIterNext(e16) {
    return c(this, null, function* () {
      return yield this.call("peer-iter-next", e16);
    });
  }
  findPeers(e16) {
    return c(this, null, function* () {
      return yield this.call("find-peer", e16);
    });
  }
  setSessionMetadata(e16) {
    if (!this.isConnected) throw S.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to set session store value due to network disconnection");
    return this.call("set-metadata", m({}, e16));
  }
  listenMetadataChange(e16) {
    if (!this.isConnected) throw S.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to observe session store key due to network disconnection");
    return this.call("listen-metadata-change", { keys: e16 });
  }
  getSessionMetadata(e16) {
    if (!this.isConnected) throw S.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to set session store value due to network disconnection");
    return this.call("get-metadata", { key: e16 });
  }
  setPollInfo(e16) {
    return this.call("poll-info-set", m({}, e16));
  }
  getPollInfo(e16) {
    return this.call("poll-info-get", m({}, e16));
  }
  setPollQuestions(e16) {
    return this.call("poll-questions-set", m({}, e16));
  }
  startPoll(e16) {
    return this.call("poll-start", m({}, e16));
  }
  stopPoll(e16) {
    return this.call("poll-stop", m({}, e16));
  }
  getPollQuestions(e16) {
    return this.call("poll-questions-get", m({}, e16));
  }
  setPollResponses(e16) {
    return this.call("poll-response", m({}, e16));
  }
  getPollResponses(e16) {
    return this.call("poll-responses", m({}, e16));
  }
  getPollsList(e16) {
    return this.call("poll-list", m({}, e16));
  }
  getPollResult(e16) {
    return this.call("poll-result", m({}, e16));
  }
  createWhiteboard(e16) {
    return this.validateConnection(), this.call("whiteboard-create", m({}, e16));
  }
  getWhiteboard(e16) {
    return this.validateConnection(), this.call("whiteboard-get", m({}, e16));
  }
  fetchPollLeaderboard(e16) {
    return this.call("poll-leaderboard", m({}, e16));
  }
  validateConnection() {
    if (!this.isConnected) throw S.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to send message due to network disconnection");
  }
  onMessageHandler(e16) {
    let t11 = e16.data, i9 = JSON.parse(t11);
    if (this.resolvePingOnAnyResponse(), i9.id) this.handleResponseWithId(i9);
    else if (i9.method) this.handleResponseWithMethod(i9);
    else throw Error(`WebSocket message has no 'method' or 'id' field, message=${i9}`);
  }
  handleResponseWithId(e16) {
    let t11 = e16, i9 = t11.id;
    if (this.callbacks.has(i9)) {
      let r9 = this.callbacks.get(i9);
      this.callbacks.delete(i9), t11.result ? r9.resolve(t11.result) : r9.reject(t11.error);
    } else this.observer.onNotification(t11);
  }
  handleResponseWithMethod(e16) {
    switch (e16.method) {
      case "offer":
        this.observer.onOffer(e16.params);
        break;
      case "trickle":
        this.observer.onTrickle(e16.params);
        break;
      case "on-error":
        this.observer.onServerError(S.WebsocketMethodErrors.ServerErrors(Number(e16.params.code), "on-error", e16.params.message));
        break;
      case "on-warning":
        d.w(this.TAG, e16.params);
        break;
      default:
        this.observer.onNotification(e16);
        break;
    }
  }
  rejectPendingCalls(e16 = "") {
    this.callbacks.forEach((t11, i9) => {
      var r9, s9, o14, n9;
      ((r9 = t11.metadata) == null ? void 0 : r9.method) !== "ping" && (d.e(this.TAG, `rejecting pending callback ${(s9 = t11.metadata) == null ? void 0 : s9.method}, id=${i9}`), t11.reject(S.WebSocketConnectionErrors.WebSocketConnectionLost((o14 = t11.metadata) != null && o14.method ? nr((n9 = t11.metadata) == null ? void 0 : n9.method) : "RECONNECT_SIGNAL", e16)), this.callbacks.delete(i9));
    });
  }
  pingPongLoop(e16) {
    return c(this, null, function* () {
      var i9, r9;
      let t11 = ((i9 = window.HMS) == null ? void 0 : i9.PING_TIMEOUT) || 12e3;
      if (this.isConnected) {
        let s9 = yield this.ping(t11);
        this.pongResponseTimes.enqueue(s9), s9 > t11 ? (d.d(this.TAG, `Pong timeout ${e16}, pageHidden=${vs()}`), this.id === e16 && this.setIsConnected(false, "ping pong failure")) : setTimeout(() => this.pingPongLoop(e16), ((r9 = window.HMS) == null ? void 0 : r9.PING_INTERVAL) || 3e3);
      }
    });
  }
  call(e16, t11) {
    return c(this, null, function* () {
      let r9 = S.WebsocketMethodErrors.ServerErrors(500, e16, `Default ${e16} error`);
      this.validateConnection();
      let s9;
      for (s9 = 1; s9 <= 3; s9++) try {
        return d.d(this.TAG, `Try number ${s9} sending ${e16}`, t11), yield this.internalCall(e16, t11);
      } catch (o14) {
        if (r9 = o14, d.e(this.TAG, `Failed sending ${e16} try: ${s9}`, { method: e16, params: t11, error: r9 }), !(parseInt(`${r9.code / 100}`) === 5 || r9.code === 429)) break;
        let l5 = (2 + Math.random() * 2) * 1e3;
        yield Ae(l5);
      }
      throw d.e(`Sending ${e16} over WS failed after ${Math.min(s9, 3)} retries`, { method: e16, params: t11, error: r9 }), r9;
    });
  }
};
var va = () => {
  if (!_ || typeof navigator.connection == "undefined") return;
  let a12 = navigator.connection;
  return { downlink: a12.downlink, downlinkMax: a12.downlinkMax, effectiveType: a12.effectiveType, rtt: a12.rtt, saveData: a12.saveData, type: a12.type };
};
var b = "[HMSTransport]:";
var Bt = class {
  constructor(e16, t11, i9, r9, s9, o14, n9) {
    this.observer = e16;
    this.deviceManager = t11;
    this.store = i9;
    this.eventBus = r9;
    this.analyticsEventsService = s9;
    this.analyticsTimer = o14;
    this.pluginUsageTracker = n9;
    this.state = "Disconnected";
    this.trackStates = /* @__PURE__ */ new Map();
    this.publishConnection = null;
    this.subscribeConnection = null;
    this.maxSubscribeBitrate = 0;
    this.joinRetryCount = 0;
    this.callbacks = /* @__PURE__ */ new Map();
    this.signalObserver = { onOffer: (e17) => c(this, null, function* () {
      try {
        if (!this.subscribeConnection) return;
        yield this.subscribeConnection.setRemoteDescription(e17), d.d(b, `[SUBSCRIBE] Adding ${this.subscribeConnection.candidates.length} ice-candidates`, this.subscribeConnection.candidates);
        for (let i10 of this.subscribeConnection.candidates) yield this.subscribeConnection.addIceCandidate(i10);
        this.subscribeConnection.candidates.length = 0;
        let t12 = yield this.subscribeConnection.createAnswer();
        yield this.subscribeConnection.setLocalDescription(t12), this.signal.answer(t12), d.d(b, "[role=SUBSCRIBE] onOffer renegotiation DONE ✅");
      } catch (t12) {
        d.d(b, "[role=SUBSCRIBE] onOffer renegotiation FAILED ❌", t12), this.state = "Failed";
        let i10;
        t12 instanceof f ? i10 = t12 : i10 = S.GenericErrors.Unknown("PUBLISH", t12.message), this.observer.onFailure(i10), this.eventBus.analytics.publish(y.subscribeFail(i10));
      }
    }), onTrickle: (e17) => c(this, null, function* () {
      let t12 = e17.target === 0 ? this.publishConnection : this.subscribeConnection;
      t12 != null && t12.remoteDescription ? yield t12.addIceCandidate(e17.candidate) : t12 == null || t12.candidates.push(e17.candidate);
    }), onNotification: (e17) => this.observer.onNotification(e17), onServerError: (e17) => c(this, null, function* () {
      yield this.observer.onStateChange("Failed", e17);
    }), onFailure: (e17) => {
      this.joinParameters && this.retryScheduler.schedule({ category: 1, error: e17, task: this.retrySignalDisconnectTask, originalState: this.state });
    }, onOffline: (e17) => c(this, null, function* () {
      d.d(b, "socket offline", Vi[this.state]);
      try {
        this.state !== "Leaving" && this.joinParameters && this.retryScheduler.schedule({ category: 1, error: S.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", e17), task: this.retrySignalDisconnectTask, originalState: this.state });
      } catch (t12) {
        console.error(t12);
      }
    }), onOnline: () => {
      var e17;
      d.d(b, "socket online", Vi[this.state]), this.analyticsSignalTransport.flushFailedEvents((e17 = this.store.getLocalPeer()) == null ? void 0 : e17.peerId);
    }, onNetworkOnline: () => {
      this.analyticsEventsService.flushFailedClientEvents();
    } };
    this.signal = new Ut(this.signalObserver);
    this.analyticsSignalTransport = new Ki(this.signal);
    this.publishDtlsStateTimer = 0;
    this.lastPublishDtlsState = "new";
    this.publishConnectionObserver = { onRenegotiationNeeded: () => c(this, null, function* () {
      yield this.performPublishRenegotiation();
    }), onDTLSTransportStateChange: (e17) => {
      var r10, s10, o15;
      if ((e17 === "failed" ? d.w.bind(d) : d.d.bind(d))(b, `Publisher on dtls transport state change: ${e17}`), !e17 || this.lastPublishDtlsState === e17 || (this.lastPublishDtlsState = e17, this.publishDtlsStateTimer !== 0 && (clearTimeout(this.publishDtlsStateTimer), this.publishDtlsStateTimer = 0), e17 !== "connecting" && e17 !== "failed")) return;
      let i10 = (o15 = (s10 = (r10 = this.initConfig) == null ? void 0 : r10.config) == null ? void 0 : s10.dtlsStateTimeouts) == null ? void 0 : o15[e17];
      !i10 || i10 <= 0 || (this.publishDtlsStateTimer = window.setTimeout(() => {
        var l6;
        let n10 = (l6 = this.publishConnection) == null ? void 0 : l6.nativeConnection.connectionState;
        if (n10 && e17 && n10 === e17) {
          let u4 = S.WebrtcErrors.ICEFailure("PUBLISH", `DTLS transport state ${e17} timeout:${i10}ms`, true);
          this.eventBus.analytics.publish(y.disconnect(u4)), this.observer.onFailure(u4);
        }
      }, i10));
    }, onDTLSTransportError: (e17) => {
      d.e(b, `onDTLSTransportError ${e17.name} ${e17.message}`, e17), this.eventBus.analytics.publish(y.disconnect(e17));
    }, onIceConnectionChange: (e17) => c(this, null, function* () {
      (e17 === "disconnected" ? d.w.bind(d) : d.d.bind(d))(b, `Publish ice connection state change: ${e17}`);
    }), onConnectionStateChange: (e17) => c(this, null, function* () {
      var i10, r10, s10, o15, n10;
      (e17 === "disconnected" ? d.w.bind(d) : d.d.bind(d))(b, `Publish connection state change: ${e17}`), e17 === "connected" && ((i10 = this.publishConnection) == null || i10.logSelectedIceCandidatePairs()), e17 === "disconnected" && setTimeout(() => {
        var l6, u4, p3, h2, g2;
        ((l6 = this.publishConnection) == null ? void 0 : l6.connectionState) === "disconnected" && this.handleIceConnectionFailure(0, S.WebrtcErrors.ICEDisconnected("PUBLISH", `local candidate - ${(p3 = (u4 = this.publishConnection) == null ? void 0 : u4.selectedCandidatePair) == null ? void 0 : p3.local.candidate}; remote candidate - ${(g2 = (h2 = this.publishConnection) == null ? void 0 : h2.selectedCandidatePair) == null ? void 0 : g2.remote.candidate}`));
      }, 5e3), e17 === "failed" && (yield this.handleIceConnectionFailure(0, S.WebrtcErrors.ICEFailure("PUBLISH", `local candidate - ${(s10 = (r10 = this.publishConnection) == null ? void 0 : r10.selectedCandidatePair) == null ? void 0 : s10.local.candidate}; remote candidate - ${(n10 = (o15 = this.publishConnection) == null ? void 0 : o15.selectedCandidatePair) == null ? void 0 : n10.remote.candidate}`)));
    }) };
    this.subscribeConnectionObserver = { onApiChannelMessage: (e17) => {
      this.observer.onNotification(JSON.parse(e17));
    }, onTrackAdd: (e17) => {
      d.d(b, "[Subscribe] onTrackAdd", `${e17}`), this.observer.onTrackAdd(e17);
    }, onTrackRemove: (e17) => {
      d.d(b, "[Subscribe] onTrackRemove", `${e17}`), this.observer.onTrackRemove(e17);
    }, onIceConnectionChange: (e17) => c(this, null, function* () {
      if ((e17 === "disconnected" ? d.w.bind(d) : d.d.bind(d))(b, `Subscribe ice connection state change: ${e17}`), e17 === "connected") {
        let i10 = this.callbacks.get(je);
        this.callbacks.delete(je), i10 && i10.promise.resolve(true);
      }
    }), onConnectionStateChange: (e17) => c(this, null, function* () {
      var i10, r10, s10, o15;
      (e17 === "disconnected" ? d.w.bind(d) : d.d.bind(d))(b, `Subscribe connection state change: ${e17}`), e17 === "failed" && (yield this.handleIceConnectionFailure(1, S.WebrtcErrors.ICEFailure("SUBSCRIBE", `local candidate - ${(r10 = (i10 = this.subscribeConnection) == null ? void 0 : i10.selectedCandidatePair) == null ? void 0 : r10.local.candidate}; remote candidate - ${(o15 = (s10 = this.subscribeConnection) == null ? void 0 : s10.selectedCandidatePair) == null ? void 0 : o15.remote.candidate}`))), e17 === "disconnected" && setTimeout(() => {
        var n10, l6, u4, p3, h2;
        ((n10 = this.subscribeConnection) == null ? void 0 : n10.connectionState) === "disconnected" && this.handleIceConnectionFailure(1, S.WebrtcErrors.ICEDisconnected("SUBSCRIBE", `local candidate - ${(u4 = (l6 = this.subscribeConnection) == null ? void 0 : l6.selectedCandidatePair) == null ? void 0 : u4.local.candidate}; remote candidate - ${(h2 = (p3 = this.subscribeConnection) == null ? void 0 : p3.selectedCandidatePair) == null ? void 0 : h2.remote.candidate}`));
      }, 5e3), e17 === "connected" && this.handleSubscribeConnectionConnected();
    }) };
    this.handleLocalRoleUpdate = (i10) => c(this, [i10], function* ({ oldRole: e17, newRole: t12 }) {
      !this.doesRoleNeedWebRTC(e17) && this.doesRoleNeedWebRTC(t12) && (d.d(b, "Local peer role updated to webrtc role, creating PeerConnections and performing inital publish negotiation ⏳"), this.createPeerConnections(), yield this.negotiateOnFirstPublish());
    });
    this.retryPublishIceFailedTask = () => c(this, null, function* () {
      if (this.publishConnection) {
        let e17 = new Promise((t12, i10) => {
          this.callbacks.set(qe, { promise: { resolve: t12, reject: i10 }, action: "RESTART_ICE", extra: {} });
        });
        yield this.performPublishRenegotiation({ iceRestart: this.publishConnection.connectionState !== "connected" }), yield e17;
      }
      return true;
    });
    this.retrySubscribeIceFailedTask = () => c(this, null, function* () {
      if (this.subscribeConnection && this.subscribeConnection.connectionState !== "connected") {
        let e17 = new Promise((i10, r10) => {
          this.callbacks.set(je, { promise: { resolve: i10, reject: r10 }, action: "RESTART_ICE", extra: {} });
        }), t12 = new Promise((i10) => {
          setTimeout(i10, 6e4, false);
        });
        return Promise.race([e17, t12]);
      }
      return true;
    });
    this.retrySignalDisconnectTask = () => c(this, null, function* () {
      var t12;
      d.d(b, "retrySignalDisconnectTask", { signalConnected: this.signal.isConnected }), this.signal.isConnected || (yield this.internalConnect(this.joinParameters.authToken, this.joinParameters.endpoint, this.joinParameters.peerId));
      let e17 = (t12 = this.store.getRoom()) != null && t12.joinedAt ? this.signal.isConnected && (yield this.retryPublishIceFailedTask()) : this.signal.isConnected;
      return this.signal.trackUpdate(this.trackStates), e17;
    });
    var u3, p2;
    this.webrtcInternals = new ii(this.store, this.eventBus, (u3 = this.publishConnection) == null ? void 0 : u3.nativeConnection, (p2 = this.subscribeConnection) == null ? void 0 : p2.nativeConnection);
    let l5 = (h2, g2) => c(this, null, function* () {
      h2 !== this.state && (this.state = h2, yield this.observer.onStateChange(this.state, g2));
    });
    this.retryScheduler = new Gi(l5, this.sendErrorAnalyticsEvent.bind(this)), this.eventBus.statsUpdate.subscribe((h2) => {
      var T, E2;
      let g2 = ((E2 = (T = h2.getLocalPeerStats()) == null ? void 0 : T.subscribe) == null ? void 0 : E2.bitrate) || 0;
      this.maxSubscribeBitrate = Math.max(this.maxSubscribeBitrate, g2);
    }), this.eventBus.localAudioEnabled.subscribe(({ track: h2 }) => this.trackUpdate(h2)), this.eventBus.localVideoEnabled.subscribe(({ track: h2 }) => this.trackUpdate(h2));
  }
  getWebrtcInternals() {
    return this.webrtcInternals;
  }
  isFlagEnabled(e16) {
    var r9;
    let t11 = (r9 = this.initConfig) == null ? void 0 : r9.config;
    return ((t11 == null ? void 0 : t11.enabledFlags) || []).includes(e16);
  }
  preview(e16, t11, i9, r9, s9 = false) {
    return c(this, null, function* () {
      let o14 = yield this.connect(e16, t11, i9, r9, s9);
      return this.state = "Preview", this.observer.onStateChange(this.state), o14;
    });
  }
  join(e16, t11, i9, r9, s9 = false) {
    return c(this, null, function* () {
      d.d(b, "join: started ⏰");
      try {
        (!this.signal.isConnected || !this.initConfig) && (yield this.connect(e16, r9, t11, i9, s9)), this.validateNotDisconnected("connect"), this.initConfig && (yield this.waitForLocalRoleAvailability(), yield this.createConnectionsAndNegotiateJoin(i9, s9), yield this.initRtcStatsMonitor(), d.d(b, "✅ join: Negotiated over PUBLISH connection"));
      } catch (o14) {
        d.e(b, `join: failed ❌ [token=${e16}]`, o14), this.state = "Failed";
        let n9 = o14;
        throw n9.isTerminal = n9.isTerminal || n9.code === 500, yield this.observer.onStateChange(this.state, n9), n9;
      }
      d.d(b, "✅ join: successful"), this.state = "Joined", this.observer.onStateChange(this.state);
    });
  }
  connect(e16, t11, i9, r9, s9 = false) {
    return c(this, null, function* () {
      this.setTransportStateForConnect(), this.joinParameters = new Bi(e16, i9, r9.name, r9.metaData, t11, s9);
      try {
        return yield this.internalConnect(e16, t11, i9);
      } catch (o14) {
        if (o14 instanceof f && ([M.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, M.WebSocketConnectionErrors.FAILED_TO_CONNECT, M.WebSocketConnectionErrors.ABNORMAL_CLOSE, M.APIErrors.ENDPOINT_UNREACHABLE].includes(o14.code) || o14.code.toString().startsWith("5") || o14.code.toString().startsWith("429"))) {
          let l5 = () => c(this, null, function* () {
            return yield this.internalConnect(e16, t11, i9), !!(this.initConfig && this.initConfig.endpoint);
          });
          yield this.retryScheduler.schedule({ category: 0, error: o14, task: l5, originalState: this.state, maxFailedRetries: 5, changeState: false });
        } else throw o14;
      }
    });
  }
  leave(e16) {
    return c(this, null, function* () {
      var t11, i9, r9, s9, o14;
      this.retryScheduler.reset(), this.joinParameters = void 0, d.d(b, "leaving in transport");
      try {
        let n9 = this.pluginUsageTracker.getPluginUsage("HMSKrispPlugin");
        if (n9 && this.eventBus.analytics.publish(y.getKrispUsage(n9)), this.state = "Leaving", (t11 = this.publishStatsAnalytics) == null || t11.stop(), (i9 = this.subscribeStatsAnalytics) == null || i9.stop(), (r9 = this.webrtcInternals) == null || r9.cleanup(), yield (s9 = this.publishConnection) == null ? void 0 : s9.close(), yield (o14 = this.subscribeConnection) == null ? void 0 : o14.close(), e16) try {
          this.signal.leave(), d.d(b, "signal leave done");
        } catch (l5) {
          d.w(b, "failed to send leave on websocket to server", l5);
        }
        this.analyticsEventsService.flushFailedClientEvents(), this.analyticsEventsService.reset(), yield this.signal.close();
      } catch (n9) {
        this.eventBus.analytics.publish(y.disconnect(n9)), d.e(b, "leave: FAILED ❌", n9);
      } finally {
        this.state = "Disconnected", this.observer.onStateChange(this.state);
      }
    });
  }
  publish(e16) {
    return c(this, null, function* () {
      for (let t11 of e16) try {
        yield this.publishTrack(t11);
      } catch (i9) {
        this.eventBus.analytics.publish(y.publish({ devices: this.deviceManager.getDevices(), error: i9 }));
      }
    });
  }
  unpublish(e16) {
    return c(this, null, function* () {
      for (let t11 of e16) yield this.unpublishTrack(t11);
    });
  }
  trackUpdate(e16) {
    let i9 = Array.from(this.trackStates.values()).find((r9) => e16.type === r9.type && e16.source === r9.source);
    if (i9) {
      let r9 = new Rt(v(m({}, i9), { mute: !e16.enabled }));
      this.trackStates.set(i9.track_id, r9), d.d(b, "Track Update", this.trackStates, e16), this.signal.trackUpdate(/* @__PURE__ */ new Map([[i9.track_id, r9]]));
    }
  }
  publishTrack(e16) {
    return c(this, null, function* () {
      e16.publishedTrackId = e16.getTrackIDBeingSent(), d.d(b, `⏳ publishTrack: trackId=${e16.trackId}, toPublishTrackId=${e16.publishedTrackId}`, `${e16}`), this.trackStates.set(e16.publishedTrackId, new Rt(e16));
      let t11 = new Promise((s9, o14) => {
        this.callbacks.set(qe, { promise: { resolve: s9, reject: o14 }, action: "PUBLISH", extra: {} });
      }), i9 = e16.stream;
      i9.setConnection(this.publishConnection);
      let r9 = this.store.getSimulcastLayers(e16.source);
      i9.addTransceiver(e16, r9), d.time(`publish-${e16.trackId}-${e16.type}`), yield t11, d.timeEnd(`publish-${e16.trackId}-${e16.type}`), this.store.addTrack(e16), yield i9.setMaxBitrateAndFramerate(e16).then(() => {
        d.d(b, `Setting maxBitrate=${e16.settings.maxBitrate} kpbs${e16 instanceof U ? ` and maxFramerate=${e16.settings.maxFramerate}` : ""} for ${e16.source} ${e16.type} ${e16.trackId}`);
      }).catch((s9) => d.w(b, "Failed setting maxBitrate and maxFramerate", s9)), e16.isPublished = true, d.d(b, `✅ publishTrack: trackId=${e16.trackId}`, `${e16}`, this.callbacks);
    });
  }
  unpublishTrack(e16) {
    return c(this, null, function* () {
      if (d.d(b, `⏳ unpublishTrack: trackId=${e16.trackId}`, `${e16}`), e16.publishedTrackId && this.trackStates.has(e16.publishedTrackId)) this.trackStates.delete(e16.publishedTrackId);
      else {
        let s9 = Array.from(this.trackStates.values()).find((o14) => e16.type === o14.type && e16.source === o14.source);
        s9 && this.trackStates.delete(s9.track_id);
      }
      let t11 = new Promise((r9, s9) => {
        this.callbacks.set(qe, { promise: { resolve: r9, reject: s9 }, action: "UNPUBLISH", extra: {} });
      });
      e16.stream.removeSender(e16), yield t11, yield e16.cleanup(), this.store.removeTrack(e16), d.d(b, `✅ unpublishTrack: trackId=${e16.trackId}`, this.callbacks);
    });
  }
  waitForLocalRoleAvailability() {
    if (!this.store.hasRoleDetailsArrived()) return new Promise((e16) => {
      this.eventBus.policyChange.subscribeOnce(() => e16());
    });
  }
  createConnectionsAndNegotiateJoin(e16, t11 = false) {
    return c(this, null, function* () {
      let i9 = this.doesLocalPeerNeedWebRTC();
      i9 && this.createPeerConnections(), this.analyticsTimer.start("join_response_time"), yield this.negotiateJoinWithRetry({ name: e16.name, data: e16.metaData, autoSubscribeVideo: t11, isWebRTC: i9 }), this.analyticsTimer.end("join_response_time");
    });
  }
  createPeerConnections() {
    this.initConfig && (this.publishConnection || (this.publishConnection = new _t(this.signal, this.initConfig.rtcConfiguration, this.publishConnectionObserver)), this.subscribeConnection || (this.subscribeConnection = new Ot(this.signal, this.initConfig.rtcConfiguration, this.isFlagEnabled.bind(this), this.subscribeConnectionObserver)));
  }
  negotiateJoinWithRetry(s9) {
    return c(this, arguments, function* ({ name: e16, data: t11, autoSubscribeVideo: i9, isWebRTC: r9 = true }) {
      try {
        yield this.negotiateJoin({ name: e16, data: t11, autoSubscribeVideo: i9, isWebRTC: r9 });
      } catch (o14) {
        d.e(b, "Join negotiation failed ❌", o14);
        let n9 = o14 instanceof f ? o14 : S.WebsocketMethodErrors.ServerErrors(500, "JOIN", `Websocket join error - ${o14.message}`), l5 = parseInt(`${n9.code / 100}`) === 5 || [M.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, 429].includes(n9.code);
        if (n9.code === 410 && (n9.isTerminal = true), l5) {
          this.joinRetryCount = 0, n9.isTerminal = false;
          let u3 = () => c(this, null, function* () {
            return this.joinRetryCount++, yield this.negotiateJoin({ name: e16, data: t11, autoSubscribeVideo: i9, isWebRTC: r9 });
          });
          yield this.retryScheduler.schedule({ category: 2, error: n9, task: u3, originalState: "Joined", maxFailedRetries: 3, changeState: false });
        } else throw o14;
      }
    });
  }
  negotiateJoin(s9) {
    return c(this, arguments, function* ({ name: e16, data: t11, autoSubscribeVideo: i9, isWebRTC: r9 = true }) {
      return r9 ? yield this.negotiateJoinWebRTC({ name: e16, data: t11, autoSubscribeVideo: i9 }) : yield this.negotiateJoinNonWebRTC({ name: e16, data: t11, autoSubscribeVideo: i9 });
    });
  }
  negotiateJoinWebRTC(r9) {
    return c(this, arguments, function* ({ name: e16, data: t11, autoSubscribeVideo: i9 }) {
      if (d.d(b, "⏳ join: Negotiating over PUBLISH connection"), !this.publishConnection) return d.e(b, "Publish peer connection not found, cannot negotiate"), false;
      let s9 = yield this.publishConnection.createOffer();
      yield this.publishConnection.setLocalDescription(s9);
      let o14 = this.isFlagEnabled("subscribeDegradation"), n9 = this.isFlagEnabled("simulcast"), l5 = this.isFlagEnabled("onDemandTracks"), u3 = yield this.signal.join(e16, t11, !i9, o14, n9, l5, s9);
      yield this.publishConnection.setRemoteDescription(u3);
      for (let p2 of this.publishConnection.candidates) yield this.publishConnection.addIceCandidate(p2);
      return this.publishConnection.initAfterJoin(), !!u3;
    });
  }
  negotiateJoinNonWebRTC(r9) {
    return c(this, arguments, function* ({ name: e16, data: t11, autoSubscribeVideo: i9 }) {
      d.d(b, "⏳ join: Negotiating Non-WebRTC");
      let s9 = this.isFlagEnabled("subscribeDegradation"), o14 = this.isFlagEnabled("simulcast"), n9 = this.isFlagEnabled("onDemandTracks");
      return !!(yield this.signal.join(e16, t11, !i9, s9, o14, n9));
    });
  }
  negotiateOnFirstPublish() {
    return c(this, null, function* () {
      if (d.d(b, "⏳ Negotiating offer over PUBLISH connection"), !this.publishConnection) return d.e(b, "Publish peer connection not found, cannot negotiate"), false;
      let e16 = yield this.publishConnection.createOffer(this.trackStates);
      yield this.publishConnection.setLocalDescription(e16);
      let t11 = yield this.signal.offer(e16, this.trackStates);
      yield this.publishConnection.setRemoteDescription(t11);
      for (let i9 of this.publishConnection.candidates) yield this.publishConnection.addIceCandidate(i9);
      return this.publishConnection.initAfterJoin(), !!t11;
    });
  }
  performPublishRenegotiation(e16) {
    return c(this, null, function* () {
      d.d(b, "⏳ [role=PUBLISH] onRenegotiationNeeded START", this.trackStates);
      let t11 = this.callbacks.get(qe);
      if (t11) {
        if (!this.publishConnection) {
          d.e(b, "Publish peer connection not found, cannot renegotiate");
          return;
        }
        try {
          let i9 = yield this.publishConnection.createOffer(this.trackStates, e16);
          yield this.publishConnection.setLocalDescription(i9), d.time("renegotiation-offer-exchange");
          let r9 = yield this.signal.offer(i9, this.trackStates);
          this.callbacks.delete(qe), d.timeEnd("renegotiation-offer-exchange"), yield this.publishConnection.setRemoteDescription(r9), t11.promise.resolve(true), d.d(b, "[role=PUBLISH] onRenegotiationNeeded DONE ✅");
        } catch (i9) {
          let r9;
          i9 instanceof f ? r9 = i9 : r9 = S.GenericErrors.Unknown("PUBLISH", i9.message), t11.promise.reject(r9), d.d(b, "[role=PUBLISH] onRenegotiationNeeded FAILED ❌");
        }
      }
    });
  }
  handleIceConnectionFailure(e16, t11) {
    return c(this, null, function* () {
      this.retryScheduler.isTaskInProgress(0 ? 3 : 4) || (e16 === 0 ? this.retryScheduler.schedule({ category: 3, error: t11, task: this.retryPublishIceFailedTask, originalState: "Joined" }) : this.retryScheduler.schedule({ category: 4, error: t11, task: this.retrySubscribeIceFailedTask, originalState: "Joined", maxFailedRetries: 1 }));
    });
  }
  internalConnect(e16, t11, i9) {
    return c(this, null, function* () {
      var s9;
      d.d(b, "connect: started ⏰");
      let r9 = /* @__PURE__ */ new Date();
      try {
        this.analyticsTimer.start("init_response_time"), this.initConfig = yield xt.fetchInitConfig({ token: e16, peerId: i9, userAgent: this.store.getUserAgent(), initEndpoint: t11 });
        let o14 = this.store.getRoom();
        return o14 && (o14.effectsKey = (s9 = this.initConfig.config.vb) == null ? void 0 : s9.effectsKey, o14.isEffectsEnabled = this.isFlagEnabled("effectsSDKEnabled"), o14.isHipaaEnabled = this.isFlagEnabled("hipaa"), o14.isNoiseCancellationEnabled = this.isFlagEnabled("noiseCancellation")), this.analyticsTimer.end("init_response_time"), Te.setWebsocketEndpoint(this.initConfig.endpoint), this.validateNotDisconnected("post init"), yield this.openSignal(e16, i9), this.observer.onConnected(), this.store.setSimulcastEnabled(this.isFlagEnabled("simulcast")), d.d(b, "Adding Analytics Transport: JsonRpcSignal"), this.analyticsEventsService.setTransport(this.analyticsSignalTransport), this.analyticsEventsService.flush(), this.initConfig;
      } catch (o14) {
        throw this.state !== "Reconnecting" && this.eventBus.analytics.publish(y.connect(o14, this.getAdditionalAnalyticsProperties(), r9, /* @__PURE__ */ new Date(), t11)), d.e(b, "❌ internal connect: failed", o14), o14;
      }
    });
  }
  validateNotDisconnected(e16) {
    if (this.state === "Disconnected") throw d.w(b, "aborting join as transport state is disconnected"), S.GenericErrors.ValidationFailed(`leave called before join could complete - stage=${e16}`);
  }
  openSignal(e16, t11) {
    return c(this, null, function* () {
      if (!this.initConfig) throw S.APIErrors.InitConfigNotAvailable("INIT", "Init Config not found");
      d.d(b, "⏳ internal connect: connecting to ws endpoint", this.initConfig.endpoint);
      let i9 = new URL(this.initConfig.endpoint);
      i9.searchParams.set("peer", t11), i9.searchParams.set("token", e16), i9.searchParams.set("user_agent_v2", this.store.getUserAgent()), i9.searchParams.set("protocol_version", Ks), i9.searchParams.set("protocol_spec", qs), this.endpoint = i9.toString(), this.analyticsTimer.start("ws_connect_time"), yield this.signal.open(this.endpoint), this.analyticsTimer.end("ws_connect_time"), this.analyticsTimer.start("on_policy_change_time"), this.analyticsTimer.start("room_state_time"), d.d(b, "✅ internal connect: connected to ws endpoint");
    });
  }
  initRtcStatsMonitor() {
    return c(this, null, function* () {
      var e16, t11, i9;
      (i9 = this.webrtcInternals) == null || i9.setPeerConnections({ publish: (e16 = this.publishConnection) == null ? void 0 : e16.nativeConnection, subscribe: (t11 = this.subscribeConnection) == null ? void 0 : t11.nativeConnection }), this.initStatsAnalytics();
    });
  }
  initStatsAnalytics() {
    var e16, t11;
    this.isFlagEnabled("publishStats") && (this.publishStatsAnalytics = new Lt(this.store, this.eventBus, this.getValueFromInitConfig("publishStats", "maxSampleWindowSize", 30), this.getValueFromInitConfig("publishStats", "maxSamplePushInterval", 300)), (e16 = this.getWebrtcInternals()) == null || e16.start()), this.isFlagEnabled("subscribeStats") && (this.subscribeStatsAnalytics = new wt(this.store, this.eventBus, this.getValueFromInitConfig("subscribeStats", "maxSampleWindowSize", 10), this.getValueFromInitConfig("subscribeStats", "maxSamplePushInterval", 60)), (t11 = this.getWebrtcInternals()) == null || t11.start());
  }
  getValueFromInitConfig(e16, t11, i9) {
    var r9, s9;
    return ((s9 = (r9 = this.initConfig) == null ? void 0 : r9.config[e16]) == null ? void 0 : s9[t11]) || i9;
  }
  doesRoleNeedWebRTC(e16) {
    var r9, s9;
    if (!this.isFlagEnabled("nonWebRTCDisableOffer")) return true;
    let t11 = !!(e16.publishParams.allowed && ((r9 = e16.publishParams.allowed) == null ? void 0 : r9.length) > 0), i9 = !!(e16.subscribeParams.subscribeToRoles && ((s9 = e16.subscribeParams.subscribeToRoles) == null ? void 0 : s9.length) > 0);
    return t11 || i9;
  }
  doesLocalPeerNeedWebRTC() {
    var t11;
    let e16 = (t11 = this.store.getLocalPeer()) == null ? void 0 : t11.role;
    return e16 ? this.doesRoleNeedWebRTC(e16) : true;
  }
  handleSubscribeConnectionConnected() {
    var t11;
    (t11 = this.subscribeConnection) == null || t11.logSelectedIceCandidatePairs();
    let e16 = this.callbacks.get(je);
    this.callbacks.delete(je), e16 && e16.promise.resolve(true);
  }
  setTransportStateForConnect() {
    if (this.state === "Failed" && (this.state = "Disconnected"), this.state !== "Disconnected" && this.state !== "Reconnecting") throw S.WebsocketMethodErrors.AlreadyJoined("JOIN", `Cannot join a meeting in ${this.state} state`);
    this.state === "Disconnected" && (this.state = "Connecting", this.observer.onStateChange(this.state));
  }
  sendErrorAnalyticsEvent(e16, t11) {
    let i9 = this.getAdditionalAnalyticsProperties(), r9;
    switch (t11) {
      case 0:
        r9 = y.connect(e16, i9);
        break;
      case 1:
        r9 = y.disconnect(e16, i9);
        break;
      case 2:
        r9 = y.join({ error: e16, time: this.analyticsTimer.getTimeTaken("join_time"), init_response_time: this.analyticsTimer.getTimeTaken("init_response_time"), ws_connect_time: this.analyticsTimer.getTimeTaken("ws_connect_time"), on_policy_change_time: this.analyticsTimer.getTimeTaken("on_policy_change_time"), local_audio_track_time: this.analyticsTimer.getTimeTaken("local_audio_track_time"), local_video_track_time: this.analyticsTimer.getTimeTaken("local_video_track_time"), retries_join: this.joinRetryCount });
        break;
      case 3:
        r9 = y.publish({ error: e16 });
        break;
      case 4:
        r9 = y.subscribeFail(e16);
        break;
    }
    this.eventBus.analytics.publish(r9);
  }
  getSubscribeConnection() {
    return this.subscribeConnection;
  }
  getAdditionalAnalyticsProperties() {
    var o14, n9, l5, u3, p2, h2, g2, T;
    let e16 = va(), t11 = typeof document != "undefined" && document.hidden, i9 = this.store.getRemoteVideoTracks().filter((E2) => E2.degraded).length, r9 = (u3 = (l5 = (n9 = (o14 = this.getWebrtcInternals()) == null ? void 0 : o14.getCurrentStats()) == null ? void 0 : n9.getLocalPeerStats()) == null ? void 0 : l5.publish) == null ? void 0 : u3.bitrate, s9 = (T = (g2 = (h2 = (p2 = this.getWebrtcInternals()) == null ? void 0 : p2.getCurrentStats()) == null ? void 0 : h2.getLocalPeerStats()) == null ? void 0 : g2.subscribe) == null ? void 0 : T.bitrate;
    return { network_info: e16, document_hidden: t11, num_degraded_tracks: i9, bitrate: { publish: r9, subscribe: s9 }, max_sub_bitrate: this.maxSubscribeBitrate, recent_pong_response_times: this.signal.getPongResponseTimes(), transport_state: this.state };
  }
};
var ya = (a12, e16, t11) => c(void 0, null, function* () {
  let r9 = Error("something went wrong during fetch");
  for (let s9 = 0; s9 < 4; s9++) try {
    let o14 = yield fetch(a12, e16), n9 = yield o14.clone().json();
    if (t11 && t11.length && !o14.ok && t11.includes(n9.code)) throw S.APIErrors.ServerErrors(n9.code, "GET_TOKEN", n9.message, false);
    return o14;
  } catch (o14) {
    r9 = o14;
  }
  throw ["Failed to fetch", "NetworkError"].some((s9) => r9.message.includes(s9)) ? S.APIErrors.EndpointUnreachable("GET_TOKEN", r9.message) : r9;
});
function Yi(a12) {
  if (!a12 || a12.length === 0) throw S.APIErrors.InvalidTokenFormat("INIT", "Token cannot be an empty string or undefined or null");
  let e16 = a12.split(".");
  if (e16.length !== 3) throw S.APIErrors.InvalidTokenFormat("INIT", "Expected 3 '.' separate fields - header, payload and signature respectively");
  let t11 = atob(e16[1]);
  try {
    let i9 = JSON.parse(t11);
    return { roomId: i9.room_id, userId: i9.user_id, role: i9.role };
  } catch (i9) {
    throw S.APIErrors.InvalidTokenFormat("INIT", `couldn't parse to json - ${i9.message}`);
  }
}
var ka = { published: false, isInitialised: false, isReconnecting: false, isPreviewInProgress: false, isPreviewCalled: false, isJoinInProgress: false, deviceManagersInitialised: false };
var Xi = class {
  constructor() {
    this.TAG = "[HMSSdk]:";
    this.transportState = "Disconnected";
    this.analyticsTimer = new Xt();
    this.sdkState = m({}, ka);
    this.playlistSettings = { video: { bitrate: Er }, audio: { bitrate: Pr } };
    this.handleAutoplayError = (e16) => {
      var t11, i9;
      (i9 = (t11 = this.errorListener) == null ? void 0 : t11.onError) == null || i9.call(t11, e16);
    };
    this.observer = { onNotification: (e16) => {
      var t11;
      if (e16.method === "on-peer-leave-request") {
        this.handlePeerLeaveRequest(e16.params);
        return;
      }
      switch (e16.method) {
        case "on-policy-change":
          this.analyticsTimer.end("on_policy_change_time");
          break;
        case "peer-list":
          this.analyticsTimer.end("peer_list_time"), this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled);
          break;
        case "room-state":
          this.analyticsTimer.end("room_state_time");
          break;
        default:
      }
      (t11 = this.notificationManager) == null || t11.handleNotification(e16, this.sdkState.isReconnecting);
    }, onConnected: () => {
      this.initNotificationManager();
    }, onTrackAdd: (e16) => {
      var t11;
      (t11 = this.notificationManager) == null || t11.handleTrackAdd(e16);
    }, onTrackRemove: (e16) => {
      var t11;
      (t11 = this.notificationManager) == null || t11.handleTrackRemove(e16);
    }, onFailure: (e16) => {
      var t11;
      (t11 = this.errorListener) == null || t11.onError(e16);
    }, onStateChange: (e16, t11) => c(this, null, function* () {
      var r9, s9;
      let i9 = (o14) => c(this, null, function* () {
        var n9, l5;
        yield this.internalLeave(true, o14), !this.sdkState.isPreviewInProgress && !this.sdkState.isJoinInProgress && ((l5 = (n9 = this.errorListener) == null ? void 0 : n9.onError) == null || l5.call(n9, o14)), this.sdkState.isReconnecting = false;
      });
      switch (e16) {
        case "Preview":
        case "Joined":
          this.initNotificationManager(), this.transportState === "Reconnecting" && ((r9 = this.listener) == null || r9.onReconnected());
          break;
        case "Failed":
          yield i9(t11);
          break;
        case "Reconnecting":
          this.sdkState.isReconnecting = true, (s9 = this.listener) == null || s9.onReconnecting(t11);
          break;
      }
      this.transportState = e16, d.d(this.TAG, "Transport State Change", this.transportState);
    }) };
    this.handlePeerLeaveRequest = (e16) => {
      var r9;
      let t11 = e16.requested_by ? this.store.getPeerById(e16.requested_by) : void 0, i9 = { roomEnded: e16.room_end, reason: e16.reason, requestedBy: t11 };
      (r9 = this.listener) == null || r9.onRemovedFromRoom(i9), this.internalLeave(false);
    };
    this.handleDeviceChange = (e16) => {
      var i9, r9;
      if (e16.isUserSelection) return;
      d.d(this.TAG, "Device Change event", e16), (r9 = (i9 = this.deviceChangeListener) == null ? void 0 : i9.onDeviceChange) == null || r9.call(i9, e16), (() => {
        var s9, o14, n9, l5;
        if (e16.error && e16.type) {
          let u3 = e16.type.includes("audio") ? (s9 = this.localPeer) == null ? void 0 : s9.audioTrack : (o14 = this.localPeer) == null ? void 0 : o14.videoTrack;
          (n9 = this.errorListener) == null || n9.onError(e16.error), [M.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE, M.TracksErrors.DEVICE_IN_USE, M.TracksErrors.DEVICE_NOT_AVAILABLE].includes(e16.error.code) && u3 && (u3.setEnabled(false), (l5 = this.listener) == null || l5.onTrackUpdate(2, u3, this.localPeer));
        }
      })();
    };
    this.handleAudioPluginError = (e16) => {
      var t11;
      d.e(this.TAG, "Audio Plugin Error event", e16), (t11 = this.errorListener) == null || t11.onError(e16);
    };
    this.handleLocalRoleUpdate = (i9) => c(this, [i9], function* ({ oldRole: e16, newRole: t11 }) {
      var r9;
      yield this.transport.handleLocalRoleUpdate({ oldRole: e16, newRole: t11 }), yield (r9 = this.roleChangeManager) == null ? void 0 : r9.handleLocalPeerRoleUpdate({ oldRole: e16, newRole: t11 }), yield this.interactivityCenter.whiteboard.handleLocalRoleUpdate();
    });
    this.sendAudioPresenceFailed = () => {
      let e16 = S.TracksErrors.NoAudioDetected("PREVIEW");
      d.w(this.TAG, "Audio Presence Failure", this.transportState, e16);
    };
    this.sendJoinAnalyticsEvent = (e16 = false, t11) => {
      this.eventBus.analytics.publish(y.join(v(m({ error: t11 }, this.analyticsTimer.getTimes()), { time: this.analyticsTimer.getTimeTaken("join_time"), is_preview_called: e16, retries_join: this.transport.joinRetryCount })));
    };
    this.sendPreviewAnalyticsEvent = (e16) => {
      this.eventBus.analytics.publish(y.preview(v(m({ error: e16 }, this.analyticsTimer.getTimes()), { time: this.analyticsTimer.getTimeTaken("preview_time") })));
    };
    this.sendAnalyticsEvent = (e16) => {
      this.analyticsEventsService.queue(e16).flush();
    };
  }
  initNotificationManager() {
    this.notificationManager || (this.notificationManager = new xi(this.store, this.eventBus, this.transport, this.listener, this.audioListener));
  }
  initStoreAndManagers() {
    var e16;
    if (this.sdkState.isInitialised) {
      (e16 = this.notificationManager) == null || e16.setListener(this.listener), this.audioSinkManager.setListener(this.listener), this.interactivityCenter.setListener(this.listener);
      return;
    }
    this.sdkState.isInitialised = true, this.store = new Et(), this.eventBus = new At(), this.pluginUsageTracker = new yi(this.eventBus), this.wakeLockManager = new vi(), this.networkTestManager = new fi(this.eventBus, this.listener), this.playlistManager = new St(this, this.eventBus), this.deviceManager = new bt(this.store, this.eventBus), this.audioSinkManager = new Pt(this.store, this.deviceManager, this.eventBus), this.audioOutput = new ki(this.deviceManager, this.audioSinkManager), this.audioSinkManager.setListener(this.listener), this.eventBus.autoplayError.subscribe(this.handleAutoplayError), this.localTrackManager = new me(this.store, this.observer, this.deviceManager, this.eventBus, this.analyticsTimer), this.analyticsEventsService = new Mi(this.store), this.transport = new Bt(this.observer, this.deviceManager, this.store, this.eventBus, this.analyticsEventsService, this.analyticsTimer, this.pluginUsageTracker), this.sessionStore = new Ui(this.transport), this.interactivityCenter = new Ht(this.transport, this.store, this.listener), this.eventBus.analytics.subscribe(this.sendAnalyticsEvent), this.eventBus.deviceChange.subscribe(this.handleDeviceChange), this.eventBus.audioPluginFailed.subscribe(this.handleAudioPluginError);
  }
  validateJoined(e16) {
    if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", `Not connected - ${e16}`);
  }
  sendHLSAnalytics(e16) {
    this.sendAnalyticsEvent(y.hlsPlayerError(e16));
  }
  refreshDevices() {
    return c(this, null, function* () {
      this.validateJoined("refreshDevices"), yield this.deviceManager.init(true);
    });
  }
  getWebrtcInternals() {
    var e16;
    return (e16 = this.transport) == null ? void 0 : e16.getWebrtcInternals();
  }
  getSessionStore() {
    return this.sessionStore;
  }
  getPlaylistManager() {
    return this.playlistManager;
  }
  getRecordingState() {
    var e16;
    return (e16 = this.store.getRoom()) == null ? void 0 : e16.recording;
  }
  getRTMPState() {
    var e16;
    return (e16 = this.store.getRoom()) == null ? void 0 : e16.rtmp;
  }
  getHLSState() {
    var e16;
    return (e16 = this.store.getRoom()) == null ? void 0 : e16.hls;
  }
  getTemplateAppData() {
    return this.store.getTemplateAppData();
  }
  getInteractivityCenter() {
    return this.interactivityCenter;
  }
  getPeerListIterator(e16) {
    return new ri(this.transport, this.store, e16);
  }
  updatePlaylistSettings(e16) {
    e16.video && Object.assign(this.playlistSettings.video, e16.video), e16.audio && Object.assign(this.playlistSettings.audio, e16.audio);
  }
  get localPeer() {
    var e16;
    return (e16 = this.store) == null ? void 0 : e16.getLocalPeer();
  }
  preview(e16, t11) {
    return c(this, null, function* () {
      if (lr(), dr(), this.sdkState.isPreviewInProgress) return Promise.reject(S.GenericErrors.PreviewAlreadyInProgress("PREVIEW", "Preview already called"));
      if (["Joined", "Reconnecting"].includes(this.transportState)) return this.midCallPreview(e16.asRole, e16.settings);
      this.analyticsTimer.start("preview_time"), this.setUpPreview(e16, t11), e16.alwaysRequestPermissions && this.localTrackManager.requestPermissions().then(() => c(this, null, function* () {
        yield this.initDeviceManagers();
      }));
      let i9 = false, r9 = false, s9 = setTimeout(() => {
        var o14, n9;
        (!i9 || !r9) && ((n9 = (o14 = this.listener) == null ? void 0 : o14.onNetworkQuality) == null || n9.call(o14, -1));
      }, 3e3);
      return new Promise((o14, n9) => {
        let l5 = () => c(this, null, function* () {
          var g2;
          if (this.localPeer) {
            let T = e16.asRole && this.store.getPolicyForRole(e16.asRole);
            this.localPeer.asRole = T || this.localPeer.role;
          }
          let p2 = yield this.localTrackManager.getTracksToPublish(e16.settings);
          p2.forEach((T) => this.setLocalPeerTrack(T)), (g2 = this.localPeer) != null && g2.audioTrack && this.initPreviewTrackAudioLevelMonitor(), yield this.initDeviceManagers(), this.sdkState.isPreviewInProgress = false, this.analyticsTimer.end("preview_time");
          let h2 = this.store.getRoom();
          h2 && t11.onPreview(h2, p2), this.sendPreviewAnalyticsEvent(), o14();
        }), u3 = (p2) => {
          var h2;
          this.analyticsTimer.end("preview_time"), p2 && ((h2 = this.errorListener) == null || h2.onError(p2)), this.sendPreviewAnalyticsEvent(p2), this.sdkState.isPreviewInProgress = false, n9(p2);
        };
        this.eventBus.policyChange.subscribeOnce(l5), this.eventBus.leave.subscribeOnce(u3), this.transport.preview(e16.authToken, e16.initEndpoint, this.localPeer.peerId, { name: e16.userName, metaData: e16.metaData || "" }, e16.autoVideoSubscribe).then((p2) => {
          var h2;
          i9 = true, clearTimeout(s9), p2 && e16.captureNetworkQualityInPreview && this.networkTestManager.start((h2 = p2.config) == null ? void 0 : h2.networkHealth).then(() => {
            r9 = true;
          });
        }).catch(u3);
      });
    });
  }
  midCallPreview(e16, t11) {
    return c(this, null, function* () {
      var s9, o14;
      if (!this.localPeer || this.transportState !== "Joined") throw S.GenericErrors.NotConnected("VALIDATION", "Not connected - midCallPreview");
      let i9 = e16 && this.store.getPolicyForRole(e16);
      if (!i9) throw S.GenericErrors.InvalidRole("PREVIEW", `role ${e16} does not exist in policy`);
      this.localPeer.asRole = i9;
      let r9 = yield this.localTrackManager.getTracksToPublish(t11);
      r9.forEach((n9) => this.setLocalPeerTrack(n9)), (s9 = this.localPeer) != null && s9.audioTrack && this.initPreviewTrackAudioLevelMonitor(), yield this.initDeviceManagers(), (o14 = this.listener) == null || o14.onPreview(this.store.getRoom(), r9);
    });
  }
  cancelMidCallPreview() {
    return c(this, null, function* () {
      var e16, t11, i9;
      if ((!this.localPeer || !this.localPeer.isInPreview()) && d.w(this.TAG, "Cannot cancel mid call preview as preview is not in progress"), (e16 = this.localPeer) != null && e16.asRole && this.localPeer.role) {
        let r9 = this.localPeer.asRole, s9 = this.localPeer.role;
        delete this.localPeer.asRole, yield (t11 = this.roleChangeManager) == null ? void 0 : t11.diffRolesAndPublishTracks({ oldRole: r9, newRole: s9 }), (i9 = this.listener) == null || i9.onPeerUpdate(8, this.localPeer);
      }
    });
  }
  join(e16, t11) {
    return c(this, null, function* () {
      var l5, u3, p2, h2, g2, T;
      if (lr(), dr(), this.sdkState.isPreviewInProgress) throw S.GenericErrors.NotReady("JOIN", "Preview is in progress, can't join");
      this.analyticsTimer.start("join_time"), this.sdkState.isJoinInProgress = true;
      let { roomId: i9, userId: r9, role: s9 } = Yi(e16.authToken), o14 = ((u3 = (l5 = this.localPeer) == null ? void 0 : l5.asRole) == null ? void 0 : u3.name) || ((h2 = (p2 = this.localPeer) == null ? void 0 : p2.role) == null ? void 0 : h2.name);
      (g2 = this.networkTestManager) == null || g2.stop(), this.listener = t11, this.commonSetup(e16, i9, t11), this.removeDevicesFromConfig(e16), this.store.setConfig(e16), this.store.createAndSetUserAgent(this.frameworkInfo), Pe.resumeContext();
      let n9 = this.store.getConfig();
      n9 != null && n9.autoManageWakeLock && this.wakeLockManager.acquireLock(), this.localPeer ? (this.localPeer.name = e16.userName, this.localPeer.role = this.store.getPolicyForRole(s9), this.localPeer.customerUserId = r9, this.localPeer.metadata = e16.metaData, delete this.localPeer.asRole) : this.createAndAddLocalPeerToStore(e16, s9, r9), this.roleChangeManager = new kt(this.store, this.transport, this.deviceManager, this.getAndPublishTracks.bind(this), this.removeTrack.bind(this), this.listener), this.eventBus.localRoleUpdate.subscribe(this.handleLocalRoleUpdate), d.d(this.TAG, `⏳ Joining room ${i9}`), d.time(`join-room-${i9}`);
      try {
        yield this.transport.join(e16.authToken, this.localPeer.peerId, { name: e16.userName, metaData: e16.metaData }, e16.initEndpoint, e16.autoVideoSubscribe), d.d(this.TAG, `✅ Joined room ${i9}`), this.analyticsTimer.start("peer_list_time"), yield this.notifyJoin(), this.sdkState.isJoinInProgress = false, yield this.publish(e16.settings, o14);
      } catch (E2) {
        throw this.analyticsTimer.end("join_time"), this.sdkState.isJoinInProgress = false, (T = this.listener) == null || T.onError(E2), this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled, E2), d.e(this.TAG, "Unable to join room", E2), E2;
      }
      d.timeEnd(`join-room-${i9}`);
    });
  }
  stringifyMetadata(e16) {
    e16.metaData && typeof e16.metaData != "string" ? e16.metaData = JSON.stringify(e16.metaData) : e16.metaData || (e16.metaData = "");
  }
  cleanup() {
    var e16, t11, i9;
    this.cleanDeviceManagers(), this.eventBus.analytics.unsubscribe(this.sendAnalyticsEvent), this.analyticsTimer.cleanup(), j.cleanup(), this.playlistManager.cleanup(), (e16 = this.wakeLockManager) == null || e16.cleanup(), me.cleanup(), this.notificationManager = void 0, d.cleanup(), this.sdkState = m({}, ka), this.localPeer && ((t11 = this.localPeer.audioTrack) == null || t11.cleanup(), this.localPeer.audioTrack = void 0, (i9 = this.localPeer.videoTrack) == null || i9.cleanup(), this.localPeer.videoTrack = void 0), this.store.cleanup(), this.listener = void 0, this.roleChangeManager && this.eventBus.localRoleUpdate.unsubscribe(this.handleLocalRoleUpdate);
  }
  leave(e16) {
    return this.internalLeave(e16);
  }
  internalLeave(e16 = true, t11) {
    return c(this, null, function* () {
      var r9, s9, o14;
      let i9 = (r9 = this.store) == null ? void 0 : r9.getRoom();
      if (i9) {
        for (; (this.sdkState.isPreviewInProgress || this.sdkState.isJoinInProgress) && !(t11 != null && t11.isTerminal); ) yield Ae(100);
        let n9 = i9.id;
        (s9 = this.networkTestManager) == null || s9.stop(), this.eventBus.leave.publish(t11), d.d(this.TAG, `⏳ Leaving room ${n9}`), yield (o14 = this.transport) == null ? void 0 : o14.leave(e16), this.cleanup(), d.d(this.TAG, `✅ Left room ${n9}`);
      }
    });
  }
  getAuthTokenByRoomCode(e16, t11) {
    return c(this, null, function* () {
      let i9 = (t11 || {}).endpoint || "https://auth.100ms.live/v2/token";
      this.analyticsTimer.start("GET_TOKEN");
      let r9 = yield ya(i9, { method: "POST", body: JSON.stringify({ code: e16.roomCode, user_id: e16.userId }) }, [429, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]), s9 = yield r9.json();
      if (this.analyticsTimer.end("GET_TOKEN"), !r9.ok) throw S.APIErrors.ServerErrors(s9.code, "GET_TOKEN", s9.message, false);
      let { token: o14 } = s9;
      if (!o14) throw Error(s9.message);
      return o14;
    });
  }
  getLocalPeer() {
    return this.store.getLocalPeer();
  }
  getPeers() {
    return this.store.getPeers();
  }
  getPeerMap() {
    return this.store.getPeerMap();
  }
  getAudioOutput() {
    return this.audioOutput;
  }
  sendMessage(e16, t11) {
    this.sendMessageInternal({ message: t11, type: e16 });
  }
  sendBroadcastMessage(e16, t11) {
    return c(this, null, function* () {
      return yield this.sendMessageInternal({ message: e16, type: t11 });
    });
  }
  sendGroupMessage(e16, t11, i9) {
    return c(this, null, function* () {
      let r9 = this.store.getKnownRoles();
      if ((t11.filter((o14) => r9[o14.name]) || []).length === 0) throw S.GenericErrors.ValidationFailed("No valid role is present", t11);
      return yield this.sendMessageInternal({ message: e16, recipientRoles: t11, type: i9 });
    });
  }
  sendDirectMessage(e16, t11, i9) {
    return c(this, null, function* () {
      var o14, n9;
      if (((o14 = this.localPeer) == null ? void 0 : o14.peerId) === t11) throw S.GenericErrors.ValidationFailed("Cannot send message to self");
      let r9 = !!((n9 = this.store.getRoom()) != null && n9.large_room_optimization), s9 = this.store.getPeerById(t11);
      if (!s9) if (r9) {
        let { peers: l5 } = yield this.transport.signal.findPeers({ peers: [t11], limit: 1 });
        if (l5.length === 0) throw S.GenericErrors.ValidationFailed("Invalid peer - peer not present in the room", t11);
        s9 = Re(l5[0], this.store);
      } else throw S.GenericErrors.ValidationFailed("Invalid peer - peer not present in the room", t11);
      return yield this.sendMessageInternal({ message: e16, recipientPeer: s9, type: i9 });
    });
  }
  sendMessageInternal(s9) {
    return c(this, arguments, function* ({ recipientRoles: e16, recipientPeer: t11, type: i9 = "chat", message: r9 }) {
      if (r9.replace(/\u200b/g, " ").trim() === "") throw d.w(this.TAG, "sendMessage", "Ignoring empty message send"), S.GenericErrors.ValidationFailed("Empty message not allowed");
      let o14 = { info: { message: r9, type: i9 } };
      return e16 != null && e16.length && (o14.roles = e16.map((n9) => n9.name)), t11 != null && t11.peerId && (o14.peer_id = t11.peerId), d.d(this.TAG, "Sending Message: ", o14), yield this.transport.signal.broadcast(o14);
    });
  }
  startScreenShare(e16, t11) {
    return c(this, null, function* () {
      var n9, l5, u3;
      let i9 = this.store.getPublishParams();
      if (!i9) return;
      let { allowed: r9 } = i9;
      if (!(r9 && r9.includes("screen"))) {
        d.e(this.TAG, `Role ${(n9 = this.localPeer) == null ? void 0 : n9.role} cannot share screen`);
        return;
      }
      if ((u3 = (l5 = this.localPeer) == null ? void 0 : l5.auxiliaryTracks) != null && u3.find((p2) => p2.source === "screen")) throw Error("Cannot share multiple screens");
      let o14 = yield this.getScreenshareTracks(e16, t11);
      if (!this.localPeer) {
        d.d(this.TAG, "Screenshared when not connected"), o14.forEach((p2) => {
          p2.cleanup();
        });
        return;
      }
      yield this.transport.publish(o14), o14.forEach((p2) => {
        var h2, g2, T;
        p2.peerId = (h2 = this.localPeer) == null ? void 0 : h2.peerId, (g2 = this.localPeer) == null || g2.auxiliaryTracks.push(p2), (T = this.listener) == null || T.onTrackUpdate(0, p2, this.localPeer);
      });
    });
  }
  stopEndedScreenshare(e16) {
    return c(this, null, function* () {
      d.d(this.TAG, "✅ Screenshare ended natively"), yield this.stopScreenShare(), e16();
    });
  }
  stopScreenShare() {
    return c(this, null, function* () {
      var t11;
      d.d(this.TAG, "✅ Screenshare ended from app");
      let e16 = (t11 = this.localPeer) == null ? void 0 : t11.auxiliaryTracks.filter((i9) => i9.source === "screen");
      if (e16) for (let i9 of e16) yield this.removeTrack(i9.trackId);
    });
  }
  addTrack(e16, t11 = "regular") {
    return c(this, null, function* () {
      var u3, p2, h2, g2;
      if (!e16) {
        d.w(this.TAG, "Please pass a valid MediaStreamTrack");
        return;
      }
      if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot addTrack");
      if (this.localPeer.auxiliaryTracks.find((T) => T.trackId === e16.id)) return;
      let r9 = e16.kind, s9 = new MediaStream([e16]), o14 = new Ne(s9), n9 = r9 === "audio" ? ae : U, l5 = new n9(o14, e16, t11, this.eventBus);
      this.setPlaylistSettings({ track: e16, hmsTrack: l5, source: t11 }), yield (u3 = this.transport) == null ? void 0 : u3.publish([l5]), l5.peerId = (p2 = this.localPeer) == null ? void 0 : p2.peerId, (h2 = this.localPeer) == null || h2.auxiliaryTracks.push(l5), (g2 = this.listener) == null || g2.onTrackUpdate(0, l5, this.localPeer);
    });
  }
  removeTrack(e16, t11 = false) {
    return c(this, null, function* () {
      var r9;
      if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot removeTrack");
      let i9 = this.localPeer.auxiliaryTracks.findIndex((s9) => s9.trackId === e16);
      if (i9 > -1) {
        let s9 = this.localPeer.auxiliaryTracks[i9];
        s9.isPublished ? yield this.transport.unpublish([s9]) : yield s9.cleanup(), t11 || this.stopPlaylist(s9), this.localPeer.auxiliaryTracks.splice(i9, 1), (r9 = this.listener) == null || r9.onTrackUpdate(1, s9, this.localPeer);
      } else d.w(this.TAG, `No track found for ${e16}`);
    });
  }
  setAnalyticsLevel(e16) {
    this.analyticsEventsService.level = e16;
  }
  setLogLevel(e16) {
    d.level = e16;
  }
  addAudioListener(e16) {
    var t11;
    this.audioListener = e16, (t11 = this.notificationManager) == null || t11.setAudioListener(e16);
  }
  addConnectionQualityListener(e16) {
    var t11;
    (t11 = this.notificationManager) == null || t11.setConnectionQualityListener(e16);
  }
  changeRole(e16, t11, i9 = false) {
    return c(this, null, function* () {
      var r9;
      yield (r9 = this.transport) == null ? void 0 : r9.signal.requestRoleChange({ requested_for: e16, role: t11, force: i9 });
    });
  }
  changeRoleOfPeer(e16, t11, i9 = false) {
    return c(this, null, function* () {
      var r9;
      yield (r9 = this.transport) == null ? void 0 : r9.signal.requestRoleChange({ requested_for: e16, role: t11, force: i9 });
    });
  }
  changeRoleOfPeersWithRoles(e16, t11) {
    return c(this, null, function* () {
      var i9;
      e16.length <= 0 || !t11 || (yield (i9 = this.transport) == null ? void 0 : i9.signal.requestBulkRoleChange({ roles: e16.map((r9) => r9.name), role: t11, force: true }));
    });
  }
  acceptChangeRole(e16) {
    return c(this, null, function* () {
      var t11, i9;
      yield (i9 = this.transport) == null ? void 0 : i9.signal.acceptRoleChangeRequest({ requested_by: (t11 = e16.requestedBy) == null ? void 0 : t11.peerId, role: e16.role.name, token: e16.token });
    });
  }
  endRoom(e16, t11) {
    return c(this, null, function* () {
      var i9;
      if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot end room");
      yield (i9 = this.transport) == null ? void 0 : i9.signal.endRoom(e16, t11), yield this.leave();
    });
  }
  removePeer(e16, t11) {
    return c(this, null, function* () {
      var i9;
      if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot remove peer");
      yield (i9 = this.transport) == null ? void 0 : i9.signal.removePeer({ requested_for: e16, reason: t11 });
    });
  }
  startRTMPOrRecording(e16) {
    return c(this, null, function* () {
      var i9, r9;
      if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot start streaming or recording");
      let t11 = { meeting_url: e16.meetingURL, record: e16.record };
      (i9 = e16.rtmpURLs) != null && i9.length && (t11.rtmp_urls = e16.rtmpURLs), e16.resolution && (t11.resolution = e16.resolution), yield (r9 = this.transport) == null ? void 0 : r9.signal.startRTMPOrRecording(t11);
    });
  }
  stopRTMPAndRecording() {
    return c(this, null, function* () {
      var e16;
      if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot stop streaming or recording");
      yield (e16 = this.transport) == null ? void 0 : e16.signal.stopRTMPAndRecording();
    });
  }
  startHLSStreaming(e16) {
    return c(this, null, function* () {
      var i9;
      if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot start HLS streaming");
      let t11 = {};
      e16 && e16.variants && e16.variants.length > 0 && (t11.variants = e16.variants.map((r9) => {
        let s9 = { meeting_url: r9.meetingURL };
        return r9.metadata && (s9.metadata = r9.metadata), s9;
      })), e16 != null && e16.recording && (t11.hls_recording = { single_file_per_layer: e16.recording.singleFilePerLayer, hls_vod: e16.recording.hlsVod }), yield (i9 = this.transport) == null ? void 0 : i9.signal.startHLSStreaming(t11);
    });
  }
  stopHLSStreaming(e16) {
    return c(this, null, function* () {
      var t11, i9, r9;
      if (!this.localPeer) throw S.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot stop HLS streaming");
      if (e16) {
        let s9 = { variants: (t11 = e16 == null ? void 0 : e16.variants) == null ? void 0 : t11.map((o14) => {
          let n9 = { meeting_url: o14.meetingURL };
          return o14.metadata && (n9.metadata = o14.metadata), n9;
        }) };
        yield (i9 = this.transport) == null ? void 0 : i9.signal.stopHLSStreaming(s9);
      }
      yield (r9 = this.transport) == null ? void 0 : r9.signal.stopHLSStreaming();
    });
  }
  sendHLSTimedMetadata(e16) {
    return c(this, null, function* () {
      var t11;
      if (this.validateJoined("sendHLSTimedMetadata"), e16.length > 0) {
        let i9 = { metadata_objs: e16 };
        yield (t11 = this.transport) == null ? void 0 : t11.signal.sendHLSTimedMetadata(i9);
      }
    });
  }
  changeName(e16) {
    return c(this, null, function* () {
      var i9, r9;
      this.validateJoined("changeName");
      let t11 = this.store.getLocalPeer();
      t11 && t11.name !== e16 && (yield (i9 = this.transport) == null ? void 0 : i9.signal.updatePeer({ name: e16 }), (r9 = this.notificationManager) == null || r9.updateLocalPeer({ name: e16 }));
    });
  }
  changeMetadata(e16) {
    return c(this, null, function* () {
      var t11, i9;
      this.validateJoined("changeMetadata"), yield (t11 = this.transport) == null ? void 0 : t11.signal.updatePeer({ data: e16 }), (i9 = this.notificationManager) == null || i9.updateLocalPeer({ metadata: e16 });
    });
  }
  setSessionMetadata(e16) {
    return c(this, null, function* () {
      var t11;
      yield (t11 = this.transport) == null ? void 0 : t11.signal.setSessionMetadata({ key: "default", data: e16 });
    });
  }
  getSessionMetadata() {
    return c(this, null, function* () {
      var t11;
      return (yield (t11 = this.transport) == null ? void 0 : t11.signal.getSessionMetadata("default")).data;
    });
  }
  getRoles() {
    return Object.values(this.store.getKnownRoles());
  }
  changeTrackState(e16, t11) {
    return c(this, null, function* () {
      var r9;
      if (e16.type === "video" && e16.source !== "regular") {
        d.w(this.TAG, "Muting non-regular video tracks is currently not supported");
        return;
      }
      if (e16.enabled === t11) {
        d.w(this.TAG, `Aborting change track state, track already has enabled - ${t11}`, e16);
        return;
      }
      if (!this.store.getTrackById(e16.trackId)) throw S.GenericErrors.ValidationFailed("No track found for change track state", e16);
      let i9 = this.store.getPeerByTrackId(e16.trackId);
      if (!i9) throw S.GenericErrors.ValidationFailed("No peer found for change track state", e16);
      yield (r9 = this.transport) == null ? void 0 : r9.signal.requestTrackStateChange({ requested_for: i9.peerId, track_id: e16.trackId, stream_id: e16.stream.id, mute: !t11 });
    });
  }
  changeMultiTrackState(e16) {
    return c(this, null, function* () {
      var o14;
      if (typeof e16.enabled != "boolean") throw S.GenericErrors.ValidationFailed("Pass a boolean for enabled");
      let { enabled: t11, roles: i9, type: r9, source: s9 } = e16;
      yield (o14 = this.transport) == null ? void 0 : o14.signal.requestMultiTrackStateChange({ value: !t11, type: r9, source: s9, roles: i9 == null ? void 0 : i9.map((n9) => n9 == null ? void 0 : n9.name) });
    });
  }
  raiseLocalPeerHand() {
    return c(this, null, function* () {
      var e16;
      this.validateJoined("raiseLocalPeerHand"), yield (e16 = this.transport) == null ? void 0 : e16.signal.joinGroup(Se);
    });
  }
  lowerLocalPeerHand() {
    return c(this, null, function* () {
      var e16;
      this.validateJoined("lowerLocalPeerHand"), yield (e16 = this.transport) == null ? void 0 : e16.signal.leaveGroup(Se);
    });
  }
  raiseRemotePeerHand(e16) {
    return c(this, null, function* () {
      var t11;
      yield (t11 = this.transport) == null ? void 0 : t11.signal.addToGroup(e16, Se);
    });
  }
  lowerRemotePeerHand(e16) {
    return c(this, null, function* () {
      var t11;
      yield (t11 = this.transport) == null ? void 0 : t11.signal.removeFromGroup(e16, Se);
    });
  }
  setFrameworkInfo(e16) {
    this.frameworkInfo = m(m({}, this.frameworkInfo), e16);
  }
  attachVideo(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.store.getConfig();
      i9 != null && i9.autoManageVideo ? e16.attach(t11) : yield e16.addSink(t11);
    });
  }
  detachVideo(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.store.getConfig();
      i9 != null && i9.autoManageVideo ? e16.detach(t11) : yield e16.removeSink(t11);
    });
  }
  publish(e16, t11) {
    return c(this, null, function* () {
      var i9, r9, s9;
      if ([this.store.getPublishParams(), !this.sdkState.published, !Ce].every((o14) => !!o14)) {
        let o14 = t11 && t11 !== ((r9 = (i9 = this.localPeer) == null ? void 0 : i9.role) == null ? void 0 : r9.name) ? () => {
          var n9;
          return (n9 = this.roleChangeManager) == null ? void 0 : n9.diffRolesAndPublishTracks({ oldRole: this.store.getPolicyForRole(t11), newRole: this.localPeer.role });
        } : () => this.getAndPublishTracks(e16);
        yield (s9 = o14 == null ? void 0 : o14()) == null ? void 0 : s9.catch((n9) => {
          var l5;
          d.e(this.TAG, "Error in publish", n9), (l5 = this.listener) == null || l5.onError(n9);
        });
      }
    });
  }
  getAndPublishTracks(e16) {
    return c(this, null, function* () {
      var i9, r9;
      let t11 = yield this.localTrackManager.getTracksToPublish(e16);
      yield this.setAndPublishTracks(t11), (r9 = (i9 = this.localPeer) == null ? void 0 : i9.audioTrack) == null || r9.initAudioLevelMonitor(), this.sdkState.published = true;
    });
  }
  setAndPublishTracks(e16) {
    return c(this, null, function* () {
      var t11;
      for (let i9 of e16) yield this.transport.publish([i9]), this.setLocalPeerTrack(i9), (t11 = this.listener) == null || t11.onTrackUpdate(0, i9, this.localPeer);
      yield this.initDeviceManagers();
    });
  }
  setLocalPeerTrack(e16) {
    var t11;
    switch (e16.peerId = (t11 = this.localPeer) == null ? void 0 : t11.peerId, e16.type) {
      case "audio":
        this.localPeer.audioTrack = e16;
        break;
      case "video":
        this.localPeer.videoTrack = e16;
        break;
    }
  }
  initDeviceManagers() {
    return c(this, null, function* () {
      var e16, t11, i9, r9, s9;
      this.sdkState.deviceManagersInitialised || (this.sdkState.deviceManagersInitialised = true, yield this.deviceManager.init(), (yield this.deviceManager.updateOutputDevice((t11 = (e16 = this.store.getConfig()) == null ? void 0 : e16.settings) == null ? void 0 : t11.audioOutputDeviceId)) || (yield this.deviceManager.updateOutputDevice((r9 = (i9 = j.getSelection()) == null ? void 0 : i9.audioOutput) == null ? void 0 : r9.deviceId)), this.audioSinkManager.init((s9 = this.store.getConfig()) == null ? void 0 : s9.audioSinkElementId));
    });
  }
  cleanDeviceManagers() {
    this.eventBus.deviceChange.unsubscribe(this.handleDeviceChange), this.eventBus.audioPluginFailed.unsubscribe(this.handleAudioPluginError), this.eventBus.autoplayError.unsubscribe(this.handleAutoplayError), this.deviceManager.cleanup(), this.audioSinkManager.cleanup();
  }
  initPreviewTrackAudioLevelMonitor() {
    var t11;
    let e16 = (t11 = this.localPeer) == null ? void 0 : t11.audioTrack;
    e16 == null || e16.initAudioLevelMonitor(), this.eventBus.trackAudioLevelUpdate.subscribe((i9) => {
      var s9;
      let r9 = i9 && i9.track.trackId === (e16 == null ? void 0 : e16.trackId) ? [{ audioLevel: i9.audioLevel, peer: this.localPeer, track: e16 }] : [];
      this.store.updateSpeakers(r9), (s9 = this.audioListener) == null || s9.onAudioLevelUpdate(r9);
    }), this.eventBus.localAudioSilence.subscribe(this.sendAudioPresenceFailed);
  }
  notifyJoin() {
    var i9;
    let e16 = this.store.getLocalPeer(), t11 = this.store.getRoom();
    if (!t11) {
      d.w(this.TAG, "notify join - room not present");
      return;
    }
    if (t11.joinedAt = /* @__PURE__ */ new Date(), e16 && (e16.joinedAt = t11.joinedAt), e16 != null && e16.role) {
      this.analyticsTimer.end("join_time"), (i9 = this.listener) == null || i9.onJoin(t11);
      return;
    }
    return new Promise((r9, s9) => {
      this.eventBus.policyChange.subscribeOnce(() => {
        var o14;
        this.analyticsTimer.end("join_time"), (o14 = this.listener) == null || o14.onJoin(t11), r9();
      }), this.eventBus.leave.subscribeOnce((o14) => {
        s9(o14);
      });
    });
  }
  setUpPreview(e16, t11) {
    this.listener = t11, this.sdkState.isPreviewCalled = true, this.sdkState.isPreviewInProgress = true;
    let { roomId: i9, userId: r9, role: s9 } = Yi(e16.authToken);
    this.commonSetup(e16, i9, t11), this.store.setConfig(e16), this.store.createAndSetUserAgent(this.frameworkInfo), this.createAndAddLocalPeerToStore(e16, s9, r9, e16.asRole);
  }
  setPlaylistSettings(r9) {
    return c(this, arguments, function* ({ track: e16, hmsTrack: t11, source: i9 }) {
      var s9, o14;
      if (i9 === "videoplaylist") {
        let n9 = {};
        if (e16.kind === "audio") n9.maxBitrate = ((s9 = this.playlistSettings.audio) == null ? void 0 : s9.bitrate) || Pr;
        else {
          n9.maxBitrate = ((o14 = this.playlistSettings.video) == null ? void 0 : o14.bitrate) || Er;
          let { width: l5, height: u3 } = e16.getSettings();
          n9.width = l5, n9.height = u3;
        }
        yield t11.setSettings(n9);
      } else i9 === "audioplaylist" && (yield t11.setSettings({ maxBitrate: 64 }));
    });
  }
  createAndAddLocalPeerToStore(e16, t11, i9, r9) {
    let s9 = this.store.getPolicyForRole(t11), o14 = r9 ? this.store.getPolicyForRole(r9) : void 0, n9 = new ht({ name: e16.userName || "", customerUserId: i9, metadata: e16.metaData || "", role: s9, asRole: o14 || s9, type: "regular" });
    this.store.addPeer(n9);
  }
  commonSetup(e16, t11, i9) {
    this.stringifyMetadata(e16), e16.initEndpoint || (e16.initEndpoint = "https://prod-init.100ms.live"), this.errorListener = i9, this.deviceChangeListener = i9, this.initStoreAndManagers(), this.store.setErrorListener(this.errorListener), this.store.getRoom() || this.store.setRoom(new yt(t11));
  }
  removeDevicesFromConfig(e16) {
    this.store.getConfig() && e16.settings && (delete e16.settings.audioOutputDeviceId, delete e16.settings.videoDeviceId, delete e16.settings.audioInputDeviceId);
  }
  getScreenshareTracks(e16, t11) {
    return c(this, null, function* () {
      let i9 = this.transport.isFlagEnabled("scaleScreenshareBasedOnPixels"), [r9, s9] = yield this.localTrackManager.getLocalScreen(t11, i9), o14 = () => {
        this.stopEndedScreenshare(e16);
      }, n9 = [];
      if (t11 != null && t11.audioOnly) {
        if (r9.nativeTrack.stop(), !s9) throw S.TracksErrors.NothingToReturn("TRACK", "Select share audio when sharing screen", "No audio found");
        n9.push(s9), s9.nativeTrack.addEventListener("ended", o14);
      } else n9.push(r9), r9.nativeTrack.addEventListener("ended", o14), s9 && n9.push(s9);
      return n9;
    });
  }
  stopPlaylist(e16) {
    e16.source === "audioplaylist" ? this.playlistManager.stop("audio") : e16.source === "videoplaylist" && this.playlistManager.stop("video");
  }
};
var et = class a9 {
  constructor(e16, t11, i9) {
    this.getStats = () => (this.stats || (this.stats = new Vt(this.store, this.sdk)), this.stats);
    e16 ? this.store = e16 : this.store = a9.createNewHMSStore(Ti("HMSStore"), Gt), i9 ? this.notifications = i9 : this.notifications = new ui(this.store), t11 ? this.actions = t11 : (this.sdk = new Xi(), this.actions = new gi(this.store, this.sdk, this.notifications)), this.actions.setFrameworkInfo({ type: "js", sdkVersion: ur().version }), this.initialTriggerOnSubscribe = false, _ && (window.__hms = this);
  }
  triggerOnSubscribe() {
    this.initialTriggerOnSubscribe || (a9.makeStoreTriggerOnSubscribe(this.store), this.initialTriggerOnSubscribe = true);
  }
  getStore() {
    return this.store;
  }
  getHMSActions() {
    return this.actions;
  }
  getActions() {
    return this.actions;
  }
  getNotifications() {
    return { onNotification: this.notifications.onNotification };
  }
  static createNewHMSStore(e16, t11) {
    let i9 = vanilla_default(() => t11()), r9 = i9.setState;
    i9.setState = (n9) => {
      let l5 = typeof n9 == "function" ? fn(n9) : n9;
      r9(l5);
    };
    let s9 = i9.getState;
    i9.getState = (n9) => n9 ? n9(s9()) : s9(), a9.compareWithShallowCheckInSubscribe(i9);
    let o14 = a9.setUpDevtools(i9, e16);
    return v(m({}, i9), { namedSetState: o14 });
  }
  static makeStoreTriggerOnSubscribe(e16) {
    let t11 = e16.subscribe;
    e16.subscribe = (i9, r9, s9) => (i9(e16.getState(r9), void 0), t11(i9, r9, s9));
  }
  static compareWithShallowCheckInSubscribe(e16) {
    let t11 = e16.subscribe;
    e16.subscribe = (i9, r9, s9) => (r9 || (r9 = (o14) => o14), s9 = s9 || shallow_default, t11(i9, r9, s9));
  }
  static setUpDevtools(e16, t11) {
    let i9;
    try {
      i9 = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;
    } catch (o14) {
    }
    if (!i9) return (o14) => {
      e16.setState(o14);
    };
    let r9 = i9.connect(a9.devtoolsOptions(t11));
    r9.prefix = t11 ? `${t11} > ` : "";
    let s9 = e16.setState;
    return e16.setState = (o14) => {
      s9(o14), r9.send(`${r9.prefix}setState`, e16.getState());
    }, r9.subscribe(a9.devtoolsSubscribe(r9, e16, s9)), r9.send("setUpStore", e16.getState()), (o14, n9) => {
      s9(o14);
      let l5 = n9 || `${r9.prefix}action`;
      r9.send(l5, e16.getState());
    };
  }
  static devtoolsOptions(e16) {
    return { name: e16, actionsBlacklist: ["audioLevel", "playlistProgress", "connectionQuality"] };
  }
  static devtoolsSubscribe(e16, t11, i9) {
    return (r9) => {
      var s9, o14, n9, l5;
      if (r9.type === "DISPATCH" && r9.state) ["JUMP_TO_ACTION", "JUMP_TO_STATE"].includes(r9.payload.type) ? i9(JSON.parse(r9.state)) : t11.setState(JSON.parse(r9.state));
      else if (r9.type === "DISPATCH" && ((s9 = r9.payload) == null ? void 0 : s9.type) === "COMMIT") e16.init(t11.getState());
      else if (r9.type === "DISPATCH" && ((o14 = r9.payload) == null ? void 0 : o14.type) === "IMPORT_STATE") {
        let u3 = (n9 = r9.payload.nextLiftedState) == null ? void 0 : n9.actionsById;
        (((l5 = r9.payload.nextLiftedState) == null ? void 0 : l5.computedStates) || []).forEach(({ state: h2 }, g2) => {
          let T = u3[g2] || `${e16.prefix}setState`;
          g2 === 0 ? e16.init(h2) : (i9(h2), e16.send(T, t11.getState()));
        });
      }
    };
  }
};
var Pa = (a12, e16, t11) => {
  let i9;
  t11.getState(Y) === "Connected" && (i9 = Ea(a12, e16, t11)), t11.subscribe((r9) => {
    ["Connected", "Reconnecting"].includes(r9) ? i9 || (i9 = Ea(a12, e16, t11)) : ["Disconnected", "Failed"].includes(r9) && i9 && (Zo(e16, r9), i9(), i9 = void 0);
  }, Y);
};
var Ea = (a12, e16, t11) => {
  var s9, o14;
  let i9 = Yo(t11, e16);
  (s9 = a12.getWebrtcInternals()) == null || s9.start();
  let r9 = (o14 = a12.getWebrtcInternals()) == null ? void 0 : o14.onStatsChange((n9) => Xo(e16, n9, t11, a12));
  return () => {
    i9(), r9 && r9();
  };
};
var Yo = (a12, e16) => {
  let t11, i9, r9;
  return a12.getState(ue) ? e16.namedSetState((s9) => {
    s9.localPeer.id = a12.getState(ue);
  }, "localpeer-id") : t11 = a12.subscribe((s9) => {
    s9 && e16.namedSetState((o14) => {
      o14.localPeer.id = s9;
    }, "localpeer-id");
  }, ue), a12.getState(q) ? e16.namedSetState((s9) => {
    s9.localPeer.videoTrack = a12.getState(q);
  }, "localpeer-videotrack-id") : i9 = a12.subscribe((s9) => {
    s9 && e16.namedSetState((o14) => {
      o14.localPeer.videoTrack = s9;
    }, "localpeer-videotrack-id");
  }, q), a12.getState(Z) ? e16.namedSetState((s9) => {
    s9.localPeer.audioTrack = a12.getState(Z);
  }, "localpeer-audiotrack-id") : r9 = a12.subscribe((s9) => {
    s9 && e16.namedSetState((o14) => {
      o14.localPeer.audioTrack = s9;
    }, "localpeer-audiotrack-id");
  }, Z), () => {
    t11 == null || t11(), i9 == null || i9(), r9 == null || r9();
  };
};
var Xo = (a12, e16, t11, i9) => {
  let r9 = t11.getState(D);
  a12.namedSetState((s9) => {
    let o14 = t11.getState(ue), n9 = {}, l5 = Object.keys(r9).filter((p2) => r9[p2].peerId !== o14);
    for (let p2 of l5) {
      let h2 = e16.getRemoteTrackStats(p2);
      h2 && (n9[p2] = h2);
    }
    Dr(s9.remoteTrackStats, n9);
    let u3 = { [o14]: e16.getLocalPeerStats() };
    Dr(s9.peerStats, u3), ha(s9.localTrackStats, e16.getLocalTrackStats(), i9.store.getLocalPeerTracks());
  }, "webrtc-stats");
};
var Zo = (a12, e16 = "resetState") => {
  a12.namedSetState((t11) => {
    Object.assign(t11, Wt());
  }, e16);
};
var Vt = class {
  constructor(e16, t11) {
    this.hmsStore = e16;
    this.sdk = t11;
    this.store = et.createNewHMSStore(Ti("HMSStatsStore"), Wt), this.getState = this.store.getState, this.subscribe = this.store.subscribe, this.getPublishPeerConnection = () => new Promise((i9) => {
      var r9, s9;
      this.hmsStore.getState(Y) === "Connected" ? i9((s9 = (r9 = this.sdk) == null ? void 0 : r9.getWebrtcInternals()) == null ? void 0 : s9.getPublishPeerConnection()) : this.hmsStore.subscribe((o14) => {
        var n9, l5;
        o14 === "Connected" && i9((l5 = (n9 = this.sdk) == null ? void 0 : n9.getWebrtcInternals()) == null ? void 0 : l5.getPublishPeerConnection());
      }, Y);
    }), this.getSubscribePeerConnection = () => new Promise((i9) => {
      var r9, s9;
      this.hmsStore.getState(Y) === "Connected" ? i9((s9 = (r9 = this.sdk) == null ? void 0 : r9.getWebrtcInternals()) == null ? void 0 : s9.getSubscribePeerConnection()) : this.hmsStore.subscribe((o14) => {
        var n9, l5;
        o14 === "Connected" && i9((l5 = (n9 = this.sdk) == null ? void 0 : n9.getWebrtcInternals()) == null ? void 0 : l5.getSubscribePeerConnection());
      }, Y);
    }), this.sdk && Pa(this.sdk, this.store, this.hmsStore);
  }
};
var en = (a12) => a12.localPeer.id;
var tn = (a12) => a12.localPeer.audioTrack;
var rn = (a12) => a12.localPeer.videoTrack;
var sn = (a12, e16) => e16;
var ba = (a12, e16) => e16;
var an = (a12) => a12.remoteTrackStats;
var Aa = (a12) => a12.peerStats;
var Fr = (a12) => a12.localTrackStats;
var ve = createSelector([Aa, en], (a12, e16) => a12[e16]);
var on = createSelector(ve, (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.subscribe) == null ? void 0 : e16.packetsLost;
});
var nn = createSelector(ve, (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.subscribe) == null ? void 0 : e16.jitter;
});
var cn = createSelector(ve, (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.publish) == null ? void 0 : e16.bitrate;
});
var dn = createSelector(ve, (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.subscribe) == null ? void 0 : e16.bitrate;
});
var ln = createSelector(ve, (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.publish) == null ? void 0 : e16.availableOutgoingBitrate;
});
var un = createSelector(ve, (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.subscribe) == null ? void 0 : e16.availableIncomingBitrate;
});
var pn = createSelector(ve, (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.publish) == null ? void 0 : e16.bytesSent;
});
var hn = createSelector(ve, (a12) => {
  var e16;
  return (e16 = a12 == null ? void 0 : a12.subscribe) == null ? void 0 : e16.bytesReceived;
});
var mn = createSelector([Aa, sn], (a12, e16) => e16 ? a12[e16] : void 0);
var Sn = createSelector([an, ba], (a12, e16) => e16 ? a12[e16] : void 0);
var Gr = createSelector([Fr, ba], (a12, e16) => e16 ? a12[e16] : void 0);
var gn = R(mn);
var Tn = R(Sn);
var fn2 = createSelector([Fr, tn], (a12, e16) => {
  var t11;
  return e16 ? (t11 = a12[e16]) == null ? void 0 : t11[0] : void 0;
});
var vn = R(createSelector(Gr, (a12) => a12 == null ? void 0 : a12[0]));
var Mn = createSelector([Fr, rn], (a12, e16) => {
  var t11;
  return e16 ? (t11 = a12[e16]) == null ? void 0 : t11[0] : void 0;
});
var yn = R(createSelector(Gr, (a12) => a12));
var kn = (a12) => R(createSelector(Gr, (e16) => {
  let t11 = Object.keys(we).find((i9) => we[i9] === a12);
  return a12 && (e16 == null ? void 0 : e16.find((i9) => i9.rid === t11)) || (e16 == null ? void 0 : e16[0]);
}));
var En = { localPeerStats: ve, packetsLost: on, jitter: nn, publishBitrate: cn, subscribeBitrate: dn, availablePublishBitrate: ln, availableSubscribeBitrate: un, totalBytesSent: pn, totalBytesReceived: hn, peerStatsByID: gn, trackStatsByID: Tn, localAudioTrackStatsByID: vn, localVideoTrackStatsByID: yn, localVideoTrackStatsByLayer: kn, localAudioTrackStats: fn2, localVideoTrackStats: Mn };

// node_modules/@100mslive/react-sdk/dist/primitives/store.js
var import_react2 = __toESM(require_react());

// node_modules/@100mslive/react-sdk/dist/packages/react-sdk/node_modules/zustand/esm/shallow.js
function t(t11, e16) {
  if (Object.is(t11, e16)) return true;
  if ("object" != typeof t11 || null === t11 || "object" != typeof e16 || null === e16) return false;
  const r9 = Object.keys(t11);
  if (r9.length !== Object.keys(e16).length) return false;
  for (let n9 = 0; n9 < r9.length; n9++) if (!Object.prototype.hasOwnProperty.call(e16, r9[n9]) || !Object.is(t11[r9[n9]], e16[r9[n9]])) return false;
  return true;
}

// node_modules/@100mslive/react-sdk/dist/utils/logger.js
var s;
var e;
(e = s || (s = {}))[e.VERBOSE = 0] = "VERBOSE", e[e.DEBUG = 1] = "DEBUG", e[e.INFO = 2] = "INFO", e[e.WARN = 3] = "WARN", e[e.ERROR = 4] = "ERROR", e[e.NONE = 5] = "NONE";
var o = class {
  static v(e16, ...o14) {
    this.log(s.VERBOSE, e16, ...o14);
  }
  static d(e16, ...o14) {
    this.log(s.DEBUG, e16, ...o14);
  }
  static i(e16, ...o14) {
    this.log(s.INFO, e16, ...o14);
  }
  static w(e16, ...o14) {
    this.log(s.WARN, e16, ...o14);
  }
  static e(e16, ...o14) {
    this.log(s.ERROR, e16, ...o14);
  }
  static log(e16, o14, ...t11) {
    if (!(this.level.valueOf() > e16.valueOf())) switch (e16) {
      case s.VERBOSE:
        console.log("HMSui-components: ", o14, ...t11);
        break;
      case s.DEBUG:
        console.debug("HMSui-components: ", o14, ...t11);
        break;
      case s.INFO:
        console.info("HMSui-components: ", o14, ...t11);
        break;
      case s.WARN:
        console.warn("HMSui-components: ", o14, ...t11);
        break;
      case s.ERROR:
        console.error("HMSui-components: ", o14, ...t11);
    }
  }
};
o.level = s.VERBOSE;

// node_modules/@100mslive/react-sdk/dist/primitives/store.js
var r = "It seems like you forgot to add your component within a top level HMSRoomProvider, please refer to 100ms react docs(https://www.100ms.live/docs/javascript/v2/how-to-guides/install-the-sdk/integration#react-hooks) to check on the required steps for using this hook. If the provider is present\n  at the top level, check the yarn.lock/package-lock.json, if there are multiple versions of @100mslive/react-sdk. Please ensure the versions of @100mslive/react-sdk and @100mslive/roomkit-react are the same versions from the release notes(https://www.100ms.live/docs/javascript/v2/changelog/release-notes) that you are trying to update to.";
function s2(s9) {
  return (a12, n9 = t) => {
    a12 || o.w("fetching full store without passing any selector may have a heavy performance impact on your website.");
    const i9 = (0, import_react2.useContext)(s9);
    if (!i9) throw new Error(r);
    return (0, i9.store)(a12, n9);
  };
}
function a10(s9) {
  return (a12, n9 = t) => {
    a12 || o.w("fetching full store without passing any selector may have a heavy performance impact on your website.");
    const i9 = (0, import_react2.useContext)(s9);
    if (!i9) throw new Error(r);
    const c5 = i9.statsStore;
    return null == c5 ? void 0 : c5(a12, n9);
  };
}

// node_modules/@100mslive/react-sdk/dist/utils/isBrowser.js
var e3 = "undefined" != typeof window;

// node_modules/@100mslive/react-sdk/dist/primitives/HmsRoomProvider.js
var d2 = (0, import_react3.createContext)(null);
var l = ({ children: e16, actions: s9, store: n9, notifications: c5, stats: f2, isHMSStatsOn: u3 = false, leaveOnUnload: l5 = true }) => {
  const m5 = (0, import_react3.useMemo)(() => {
    let e17;
    const o14 = () => {
      throw new Error("modifying store is not allowed");
    };
    if (s9 && n9) e17 = { actions: s9, store: create(Object.assign(Object.assign({}, n9), { setState: o14, destroy: o14 })) }, c5 && (e17.notifications = c5), f2 && (e17.statsStore = create({ getState: f2.getState, subscribe: f2.subscribe, setState: o14, destroy: o14 }));
    else {
      const t11 = new et();
      if (e17 = { actions: t11.getActions(), store: create(Object.assign(Object.assign({}, t11.getStore()), { setState: o14, destroy: o14 })), notifications: t11.getNotifications() }, u3) {
        const r9 = t11.getStats();
        e17.statsStore = create({ getState: r9.getState, subscribe: r9.subscribe, setState: o14, destroy: o14 });
      }
    }
    return e17.actions.setFrameworkInfo({ type: "react-web", version: import_react3.default.version, sdkVersion: "0.10.7" }), e17;
  }, [s9, n9, c5, f2, u3]);
  return (0, import_react3.useEffect)(() => {
    if (e3 && l5) {
      const t11 = () => m5.actions.leave();
      return window.addEventListener("unload", t11), () => {
        window.removeEventListener("unload", t11);
      };
    }
    return () => {
    };
  }, [l5, m5]), import_react3.default.createElement(d2.Provider, { value: m5 }, e16);
};
var m2 = s2(d2);
var S2 = a10(d2);
var b2 = () => {
  const t11 = (0, import_react3.useContext)(d2);
  if (!t11) throw new Error(r);
  return t11.store;
};
var g = () => {
  const t11 = (0, import_react3.useContext)(d2);
  if (!t11) throw new Error(r);
  return t11.notifications;
};
var v2 = () => {
  const t11 = (0, import_react3.useContext)(d2);
  if (!t11) throw new Error(r);
  return t11.actions;
};
var E = (t11) => {
  const e16 = (0, import_react3.useContext)(d2), [o14, i9] = (0, import_react3.useState)(null);
  if (!e16) throw new Error(r);
  return (0, import_react3.useEffect)(() => {
    if (!e16.notifications) return;
    return e16.notifications.onNotification((t12) => {
      i9(t12);
    }, t11);
  }, [e16.notifications, t11]), o14;
};

// node_modules/@100mslive/react-sdk/dist/node_modules/tslib/tslib.es6.mjs.js
function n2(n9, t11, e16, r9) {
  return new (e16 || (e16 = Promise))(function(o14, c5) {
    function u3(n10) {
      try {
        i9(r9.next(n10));
      } catch (n11) {
        c5(n11);
      }
    }
    function f2(n10) {
      try {
        i9(r9.throw(n10));
      } catch (n11) {
        c5(n11);
      }
    }
    function i9(n10) {
      var t12;
      n10.done ? o14(n10.value) : (t12 = n10.value, t12 instanceof e16 ? t12 : new e16(function(n11) {
        n11(t12);
      })).then(u3, f2);
    }
    i9((r9 = r9.apply(n9, t11 || [])).next());
  });
}

// node_modules/@100mslive/react-sdk/dist/hooks/usePreviewJoin.js
var import_react5 = __toESM(require_react());

// node_modules/@100mslive/react-sdk/dist/utils/commons.js
var import_react4 = __toESM(require_react());
var n3 = (e16, o14) => o.e("react-sdk", o14, e16);
var i = (e16) => {
  throw e16;
};
function s4(r9) {
  const t11 = (0, import_react4.useRef)();
  return (0, import_react4.useEffect)(() => {
    t11.current = r9;
  }), t11.current;
}
var m3 = ["blink"].some((e16) => {
  var o14, t11;
  return (null === (t11 = null === (o14 = pe.getEngine()) || void 0 === o14 ? void 0 : o14.name) || void 0 === t11 ? void 0 : t11.toLowerCase()) === e16;
});
var l2 = "https://pdf-annotation.100ms.live/generic/web/viewer.html";

// node_modules/@100mslive/react-sdk/dist/hooks/usePreviewJoin.js
var c2 = ({ name: c5 = "", token: d4, metadata: v5, handleError: l5 = n3, initEndpoint: u3, initialSettings: p2, captureNetworkQualityInPreview: f2, asRole: k2, autoManageVideo: w, autoManageWakeLock: j2 }) => {
  const y2 = v2(), g2 = m2(Y), h2 = m2(ye) || false, b3 = g2 === er.Preview, M2 = (0, import_react5.useMemo)(() => ({ userName: c5, authToken: d4, metaData: v5, rememberDeviceSelection: true, settings: p2, initEndpoint: u3, asRole: k2, captureNetworkQualityInPreview: f2, autoManageVideo: w, autoManageWakeLock: j2 }), [c5, d4, v5, u3, p2, f2, k2, w, j2]), P = (0, import_react5.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    if (d4) try {
      (h2 || g2 !== er.Disconnected) && (yield y2.leave().catch(() => {
      })), yield y2.preview(M2);
    } catch (e16) {
      l5(e16, "preview");
    }
  }), [d4, h2, g2, y2, M2, l5]);
  return { enableJoin: b3, join: (0, import_react5.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    if (d4) try {
      yield y2.join(M2);
    } catch (e16) {
      l5(e16, "join");
    }
  }), [y2, M2, l5, d4]), isConnected: h2, preview: P };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useAVToggle.js
var import_react6 = __toESM(require_react());
var v3 = (v5 = n3) => {
  const c5 = m2(Gn), a12 = m2(rr), u3 = m2(ts), g2 = m2(u3 ? eS : Zm), f2 = v2(), p2 = (0, import_react6.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    try {
      yield f2.setLocalAudioEnabled(!c5);
    } catch (o14) {
      v5(o14, "toggleAudio");
    }
  }), [f2, c5, v5]), b3 = (0, import_react6.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    try {
      yield f2.setLocalVideoEnabled(!a12);
    } catch (o14) {
      v5(o14, "toggleVideo");
    }
  }), [f2, a12, v5]);
  return { isLocalAudioEnabled: c5, isLocalVideoEnabled: a12, toggleAudio: (null == g2 ? void 0 : g2.audio) ? p2 : void 0, toggleVideo: (null == g2 ? void 0 : g2.video) ? b3 : void 0 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useVideo.js
var import_react7 = __toESM(require_react());
var u = ({ trackId: u3, attach: l5 }) => {
  const v5 = v2(), s9 = (0, import_react7.useRef)(null), a12 = m2(ea(u3)), m5 = (0, import_react7.useRef)(), f2 = (0, import_react7.useCallback)((r9) => {
    r9 && (s9.current = r9);
  }, []);
  return (0, import_react7.useEffect)(() => {
    m5.current ? (null == a12 ? void 0 : a12.id) && m5.current !== (null == a12 ? void 0 : a12.id) && n2(void 0, void 0, void 0, function* () {
      if (s9.current) try {
        o.d("detaching because different track is passed"), yield v5.detachVideo(m5.current, s9.current);
      } catch (r9) {
        o.w("detach video error for track", m5.current, r9);
      }
      m5.current = null == a12 ? void 0 : a12.id;
    }) : m5.current = null == a12 ? void 0 : a12.id;
  }, [null == a12 ? void 0 : a12.id, v5]), (0, import_react7.useEffect)(() => {
    n2(void 0, void 0, void 0, function* () {
      (null == a12 ? void 0 : a12.id) && s9.current && (false !== l5 ? yield v5.attachVideo(a12.id, s9.current) : yield v5.detachVideo(a12.id, s9.current));
    });
  }, [a12, l5, v5]), (0, import_react7.useEffect)(() => () => {
    n2(void 0, void 0, void 0, function* () {
      if (s9.current && a12) try {
        yield v5.detachVideo(a12.id, s9.current);
      } catch (r9) {
        o.w("detach video error for track", a12.id, r9);
      }
    });
  }, []), { videoRef: f2 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useScreenShare.js
var import_react8 = __toESM(require_react());
var s5 = (s9 = n3) => {
  var t11, a12;
  const v5 = v2(), c5 = m2(sr), u3 = m2(Va), S3 = m2(ia(null == u3 ? void 0 : u3.id)), h2 = (0, import_react8.useCallback)((o14) => n2(void 0, void 0, void 0, function* () {
    try {
      yield v5.setScreenShareEnabled(!c5, o14);
    } catch (e16) {
      s9(e16, "toggleScreenShare");
    }
  }), [v5, c5, s9]);
  return { amIScreenSharing: c5, screenSharingPeerId: null == u3 ? void 0 : u3.id, screenSharingPeerName: null == u3 ? void 0 : u3.name, screenShareVideoTrackId: null === (t11 = null == S3 ? void 0 : S3.video) || void 0 === t11 ? void 0 : t11.id, screenShareAudioTrackId: null === (a12 = null == S3 ? void 0 : S3.audio) || void 0 === a12 ? void 0 : a12.id, toggleScreenShare: h2 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useRemoteAVToggle.js
var import_react9 = __toESM(require_react());
var v4 = (i9, e16, d4) => n2(void 0, void 0, void 0, function* () {
  if (e16) try {
    yield i9.setRemoteTrackEnabled(e16.id, !e16.enabled);
  } catch (o14) {
    d4(o14, "remoteToggle");
  }
});
var r3 = (r9, s9, a12 = n3) => {
  const c5 = v2(), b3 = m2(gm(r9)), f2 = m2(ea(s9)), g2 = m2(aa(null == b3 ? void 0 : b3.id)), p2 = m2(rs), j2 = (null == f2 ? void 0 : f2.enabled) ? null == p2 ? void 0 : p2.mute : null == p2 ? void 0 : p2.unmute, y2 = (null == b3 ? void 0 : b3.enabled) ? null == p2 ? void 0 : p2.mute : null == p2 ? void 0 : p2.unmute, V2 = (0, import_react9.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    yield v4(c5, b3, a12);
  }), [c5, b3, a12]), E2 = (0, import_react9.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    yield v4(c5, f2, a12);
  }), [c5, a12, f2]), h2 = (0, import_react9.useCallback)((o14) => {
    b3 && c5.setVolume(o14, b3.id);
  }, [c5, b3]);
  return { isAudioEnabled: !!(null == b3 ? void 0 : b3.enabled), isVideoEnabled: !!(null == f2 ? void 0 : f2.enabled), volume: g2, toggleAudio: b3 && y2 ? V2 : void 0, toggleVideo: "regular" === (null == f2 ? void 0 : f2.source) && j2 ? E2 : void 0, setVolume: b3 ? h2 : void 0 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useVideoList.js
var import_react11 = __toESM(require_react());

// node_modules/react-resize-detector/build/index.esm.js
var React = __toESM(require_react());
var import_react10 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var extendStatics = function(d4, b3) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d5, b4) {
    d5.__proto__ = b4;
  } || function(d5, b4) {
    for (var p2 in b4) if (Object.prototype.hasOwnProperty.call(b4, p2)) d5[p2] = b4[p2];
  };
  return extendStatics(d4, b3);
};
function __extends(d4, b3) {
  if (typeof b3 !== "function" && b3 !== null)
    throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
  extendStatics(d4, b3);
  function __() {
    this.constructor = d4;
  }
  d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t11) {
    for (var s9, i9 = 1, n9 = arguments.length; i9 < n9; i9++) {
      s9 = arguments[i9];
      for (var p2 in s9) if (Object.prototype.hasOwnProperty.call(s9, p2)) t11[p2] = s9[p2];
    }
    return t11;
  };
  return __assign.apply(this, arguments);
};
function __rest(s9, e16) {
  var t11 = {};
  for (var p2 in s9) if (Object.prototype.hasOwnProperty.call(s9, p2) && e16.indexOf(p2) < 0)
    t11[p2] = s9[p2];
  if (s9 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i9 = 0, p2 = Object.getOwnPropertySymbols(s9); i9 < p2.length; i9++) {
      if (e16.indexOf(p2[i9]) < 0 && Object.prototype.propertyIsEnumerable.call(s9, p2[i9]))
        t11[p2[i9]] = s9[p2[i9]];
    }
  return t11;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function isObject$3(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_1 = isObject$3;
var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal$1;
var freeGlobal = _freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root$2 = freeGlobal || freeSelf || Function("return this")();
var _root = root$2;
var root$1 = _root;
var now$1 = function() {
  return root$1.Date.now();
};
var now_1 = now$1;
var reWhitespace = /\s/;
function trimmedEndIndex$1(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var _trimmedEndIndex = trimmedEndIndex$1;
var trimmedEndIndex = _trimmedEndIndex;
var reTrimStart = /^\s+/;
function baseTrim$1(string) {
  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
var _baseTrim = baseTrim$1;
var root = _root;
var Symbol$2 = root.Symbol;
var _Symbol = Symbol$2;
var Symbol$1 = _Symbol;
var objectProto$1 = Object.prototype;
var hasOwnProperty = objectProto$1.hasOwnProperty;
var nativeObjectToString$1 = objectProto$1.toString;
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
function getRawTag$1(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e16) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var _getRawTag = getRawTag$1;
var objectProto = Object.prototype;
var nativeObjectToString = objectProto.toString;
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}
var _objectToString = objectToString$1;
var Symbol2 = _Symbol;
var getRawTag = _getRawTag;
var objectToString = _objectToString;
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
function baseGetTag$1(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
var _baseGetTag = baseGetTag$1;
function isObjectLike$1(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_1 = isObjectLike$1;
var baseGetTag = _baseGetTag;
var isObjectLike = isObjectLike_1;
var symbolTag = "[object Symbol]";
function isSymbol$1(value) {
  return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
var isSymbol_1 = isSymbol$1;
var baseTrim = _baseTrim;
var isObject$2 = isObject_1;
var isSymbol = isSymbol_1;
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber$1(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject$2(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject$2(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_1 = toNumber$1;
var isObject$1 = isObject_1;
var now = now_1;
var toNumber = toNumber_1;
var FUNC_ERROR_TEXT$1 = "Expected a function";
var nativeMax = Math.max;
var nativeMin = Math.min;
function debounce$1(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  wait = toNumber(wait) || 0;
  if (isObject$1(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now());
  }
  function debounced() {
    var time = now(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_1 = debounce$1;
var debounce = debounce_1;
var isObject = isObject_1;
var FUNC_ERROR_TEXT = "Expected a function";
function throttle(func, wait, options) {
  var leading = true, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = "leading" in options ? !!options.leading : leading;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    "leading": leading,
    "maxWait": wait,
    "trailing": trailing
  });
}
var throttle_1 = throttle;
var patchResizeHandler = function(resizeCallback, refreshMode, refreshRate, refreshOptions) {
  switch (refreshMode) {
    case "debounce":
      return debounce_1(resizeCallback, refreshRate, refreshOptions);
    case "throttle":
      return throttle_1(resizeCallback, refreshRate, refreshOptions);
    default:
      return resizeCallback;
  }
};
var isFunction = function(fn3) {
  return typeof fn3 === "function";
};
var isSSR2 = function() {
  return typeof window === "undefined";
};
var isDOMElement = function(element) {
  return element instanceof Element || element instanceof HTMLDocument;
};
var createNotifier = function(onResize, setSize, handleWidth, handleHeight) {
  return function(_a2) {
    var width = _a2.width, height = _a2.height;
    setSize(function(prev) {
      if (prev.width === width && prev.height === height) {
        return prev;
      }
      if (prev.width === width && !handleHeight || prev.height === height && !handleWidth) {
        return prev;
      }
      if (onResize && isFunction(onResize)) {
        onResize(width, height);
      }
      return { width, height };
    });
  };
};
var ResizeDetector = (
  /** @class */
  function(_super) {
    __extends(ResizeDetector2, _super);
    function ResizeDetector2(props) {
      var _this = _super.call(this, props) || this;
      _this.cancelHandler = function() {
        if (_this.resizeHandler && _this.resizeHandler.cancel) {
          _this.resizeHandler.cancel();
          _this.resizeHandler = null;
        }
      };
      _this.attachObserver = function() {
        var _a3 = _this.props, targetRef = _a3.targetRef, observerOptions = _a3.observerOptions;
        if (isSSR2()) {
          return;
        }
        if (targetRef && targetRef.current) {
          _this.targetRef.current = targetRef.current;
        }
        var element = _this.getElement();
        if (!element) {
          return;
        }
        if (_this.observableElement && _this.observableElement === element) {
          return;
        }
        _this.observableElement = element;
        _this.resizeObserver.observe(element, observerOptions);
      };
      _this.getElement = function() {
        var _a3 = _this.props, querySelector = _a3.querySelector, targetDomEl = _a3.targetDomEl;
        if (isSSR2())
          return null;
        if (querySelector)
          return document.querySelector(querySelector);
        if (targetDomEl && isDOMElement(targetDomEl))
          return targetDomEl;
        if (_this.targetRef && isDOMElement(_this.targetRef.current))
          return _this.targetRef.current;
        var currentElement = (0, import_react_dom.findDOMNode)(_this);
        if (!currentElement)
          return null;
        var renderType = _this.getRenderType();
        switch (renderType) {
          case "renderProp":
            return currentElement;
          case "childFunction":
            return currentElement;
          case "child":
            return currentElement;
          case "childArray":
            return currentElement;
          default:
            return currentElement.parentElement;
        }
      };
      _this.createResizeHandler = function(entries) {
        var _a3 = _this.props, _b = _a3.handleWidth, handleWidth = _b === void 0 ? true : _b, _c = _a3.handleHeight, handleHeight = _c === void 0 ? true : _c, onResize = _a3.onResize;
        if (!handleWidth && !handleHeight)
          return;
        var notifyResize = createNotifier(onResize, _this.setState.bind(_this), handleWidth, handleHeight);
        entries.forEach(function(entry) {
          var _a4 = entry && entry.contentRect || {}, width = _a4.width, height = _a4.height;
          var shouldSetSize = !_this.skipOnMount && !isSSR2();
          if (shouldSetSize) {
            notifyResize({ width, height });
          }
          _this.skipOnMount = false;
        });
      };
      _this.getRenderType = function() {
        var _a3 = _this.props, render = _a3.render, children = _a3.children;
        if (isFunction(render)) {
          return "renderProp";
        }
        if (isFunction(children)) {
          return "childFunction";
        }
        if ((0, import_react10.isValidElement)(children)) {
          return "child";
        }
        if (Array.isArray(children)) {
          return "childArray";
        }
        return "parent";
      };
      var skipOnMount = props.skipOnMount, refreshMode = props.refreshMode, _a2 = props.refreshRate, refreshRate = _a2 === void 0 ? 1e3 : _a2, refreshOptions = props.refreshOptions;
      _this.state = {
        width: void 0,
        height: void 0
      };
      _this.skipOnMount = skipOnMount;
      _this.targetRef = (0, import_react10.createRef)();
      _this.observableElement = null;
      if (isSSR2()) {
        return _this;
      }
      _this.resizeHandler = patchResizeHandler(_this.createResizeHandler, refreshMode, refreshRate, refreshOptions);
      _this.resizeObserver = new window.ResizeObserver(_this.resizeHandler);
      return _this;
    }
    ResizeDetector2.prototype.componentDidMount = function() {
      this.attachObserver();
    };
    ResizeDetector2.prototype.componentDidUpdate = function() {
      this.attachObserver();
    };
    ResizeDetector2.prototype.componentWillUnmount = function() {
      if (isSSR2()) {
        return;
      }
      this.observableElement = null;
      this.resizeObserver.disconnect();
      this.cancelHandler();
    };
    ResizeDetector2.prototype.render = function() {
      var _a2 = this.props, render = _a2.render, children = _a2.children, _b = _a2.nodeType, WrapperTag = _b === void 0 ? "div" : _b;
      var _c = this.state, width = _c.width, height = _c.height;
      var childProps = { width, height, targetRef: this.targetRef };
      var renderType = this.getRenderType();
      var typedChildren;
      switch (renderType) {
        case "renderProp":
          return render && render(childProps);
        case "childFunction":
          typedChildren = children;
          return typedChildren(childProps);
        case "child":
          typedChildren = children;
          if (typedChildren.type && typeof typedChildren.type === "string") {
            childProps.targetRef;
            var nativeProps = __rest(childProps, ["targetRef"]);
            return (0, import_react10.cloneElement)(typedChildren, nativeProps);
          }
          return (0, import_react10.cloneElement)(typedChildren, childProps);
        case "childArray":
          typedChildren = children;
          return typedChildren.map(function(el) {
            return !!el && (0, import_react10.cloneElement)(el, childProps);
          });
        default:
          return React.createElement(WrapperTag, null);
      }
    };
    return ResizeDetector2;
  }(import_react10.PureComponent)
);
var useEnhancedEffect = isSSR2() ? import_react10.useEffect : import_react10.useLayoutEffect;
function useResizeDetector(props) {
  if (props === void 0) {
    props = {};
  }
  var _a2 = props.skipOnMount, skipOnMount = _a2 === void 0 ? false : _a2, refreshMode = props.refreshMode, _b = props.refreshRate, refreshRate = _b === void 0 ? 1e3 : _b, refreshOptions = props.refreshOptions, _c = props.handleWidth, handleWidth = _c === void 0 ? true : _c, _d = props.handleHeight, handleHeight = _d === void 0 ? true : _d, targetRef = props.targetRef, observerOptions = props.observerOptions, onResize = props.onResize;
  var skipResize = (0, import_react10.useRef)(skipOnMount);
  var localRef = (0, import_react10.useRef)(null);
  var ref = targetRef !== null && targetRef !== void 0 ? targetRef : localRef;
  var resizeHandler = (0, import_react10.useRef)();
  var _e2 = (0, import_react10.useState)({
    width: void 0,
    height: void 0
  }), size = _e2[0], setSize = _e2[1];
  useEnhancedEffect(function() {
    if (isSSR2()) {
      return;
    }
    var notifyResize = createNotifier(onResize, setSize, handleWidth, handleHeight);
    var resizeCallback = function(entries) {
      if (!handleWidth && !handleHeight)
        return;
      entries.forEach(function(entry) {
        var _a3 = entry && entry.contentRect || {}, width = _a3.width, height = _a3.height;
        var shouldSetSize = !skipResize.current && !isSSR2();
        if (shouldSetSize) {
          notifyResize({ width, height });
        }
        skipResize.current = false;
      });
    };
    resizeHandler.current = patchResizeHandler(resizeCallback, refreshMode, refreshRate, refreshOptions);
    var resizeObserver = new window.ResizeObserver(resizeHandler.current);
    if (ref.current) {
      resizeObserver.observe(ref.current, observerOptions);
    }
    return function() {
      resizeObserver.disconnect();
      var patchedResizeHandler = resizeHandler.current;
      if (patchedResizeHandler && patchedResizeHandler.cancel) {
        patchedResizeHandler.cancel();
      }
    };
  }, [refreshMode, refreshRate, refreshOptions, handleWidth, handleHeight, onResize, observerOptions, ref.current]);
  return __assign({ ref }, size);
}

// node_modules/@100mslive/react-sdk/dist/utils/layout.js
var t4 = (t11, e16, i9) => t11.reduce((t12, a12, r9) => {
  const h2 = Math.floor(r9 / e16);
  return h2 > 0 && i9 || (t12[h2] || (t12[h2] = []), t12[h2].push(a12)), t12;
}, []);
var e7 = ({ elements: e16, tilesInFirstPage: i9, onlyOnePage: a12, isLastPageDifferentFromFirstPage: r9, defaultWidth: h2, defaultHeight: n9, lastPageWidth: s9, lastPageHeight: o14 }) => {
  const l5 = t4(e16, i9, a12);
  return l5.map((t11, e17) => t11.map((t12) => {
    const i10 = e17 === l5.length - 1, a13 = r9 && i10 ? s9 : h2, g2 = r9 && i10 ? o14 : n9;
    return Object.assign(Object.assign({}, t12), { height: g2, width: a13 });
  }));
};
function i6(t11) {
  if (0 === t11.length) return null;
  const e16 = {};
  let i9 = t11[0], a12 = 1;
  for (let r9 = 0; r9 < t11.length; r9++) {
    const h2 = t11[r9];
    null === e16[h2] ? e16[h2] = 1 : e16[h2]++, e16[h2] > a12 && (i9 = h2, a12 = e16[h2]);
  }
  return i9;
}
var a11 = (t11) => i6(t11.filter((t12) => {
  var e16, i9;
  return (null === (e16 = t12.track) || void 0 === e16 ? void 0 : e16.width) && (null === (i9 = t12.track) || void 0 === i9 ? void 0 : i9.height);
}).map((t12) => {
  var e16, i9;
  return ((null === (e16 = t12.track) || void 0 === e16 ? void 0 : e16.width) || 1) / ((null === (i9 = t12.track) || void 0 === i9 ? void 0 : i9.height) || 1);
}));
var r4 = (t11, e16, i9, a12, r9) => {
  if (t11 < 0 || e16 < 0) throw new Error("Container must have a non-negative area");
  if (i9 < 1 || !Number.isInteger(i9)) throw new Error("Number of shapes to place must be a positive integer");
  const h2 = a12 && r9 && a12 / r9;
  if (void 0 !== h2 && isNaN(h2)) throw new Error("Aspect ratio must be a number");
  let n9 = { area: 0, cols: 0, rows: 0, width: 0, height: 0 };
  if (void 0 !== h2) for (let a13 = i9; a13 > 0; a13 += -1) {
    const r10 = Math.ceil(i9 / a13);
    let s9, o14;
    t11 / (a13 * h2) <= e16 / r10 ? (s9 = t11 / a13, o14 = s9 / h2) : (o14 = e16 / r10, s9 = o14 * h2);
    const l5 = s9 * o14;
    l5 > n9.area && (n9 = { area: l5, width: s9, height: o14, rows: r10, cols: a13 });
  }
  return n9;
};
var h = ({ parentWidth: t11, parentHeight: e16, count: i9, maxCount: a12, aspectRatio: r9 }) => {
  let h2 = 0, n9 = 0, s9 = 0, o14 = 0, l5 = false, g2 = 0, d4 = 0;
  const u3 = Math.min(Math.ceil(Math.sqrt(i9 * (t11 / e16) / (r9.width / r9.height))), a12);
  let c5 = t11 / u3, f2 = c5 / (r9.width / r9.height);
  f2 > e16 && (f2 = e16, c5 = f2 / (r9.height / r9.width));
  const P = Math.floor(e16 / f2);
  if (n9 = f2, h2 = c5, g2 = Math.min(i9, P * u3), d4 = i9 % (P * u3), l5 = d4 > 0 && i9 > P * u3, l5) {
    let i10 = t11 / Math.min(Math.ceil(Math.sqrt(d4 * (t11 / e16) / (r9.width / r9.height))), a12), h3 = i10 / (r9.width / r9.height);
    h3 > e16 && (h3 = e16, i10 = h3 / (r9.height / r9.width)), o14 = h3, s9 = i10;
  }
  return { tilesInFirstPage: g2, defaultWidth: h2, defaultHeight: n9, lastPageWidth: s9, lastPageHeight: o14, isLastPageDifferentFromFirstPage: l5 };
};
var n4 = ({ parentWidth: t11, parentHeight: e16, count: i9, maxCount: a12, aspectRatio: h2 }) => {
  let n9 = 0, s9 = 0, o14 = 0, l5 = 0, g2 = false, d4 = 0, u3 = 0;
  const { width: c5, height: f2 } = r4(t11, e16, Math.min(i9, a12), h2.width, h2.height);
  if (n9 = c5, s9 = f2, d4 = Math.min(i9, a12), u3 = i9 % a12, g2 = u3 > 0 && i9 > a12, g2) {
    const { width: i10, height: a13 } = r4(t11, e16, u3, h2.width, h2.height);
    o14 = i10, l5 = a13;
  }
  return { tilesInFirstPage: d4, defaultWidth: n9, defaultHeight: s9, lastPageWidth: o14, lastPageHeight: l5, isLastPageDifferentFromFirstPage: g2 };
};
var s6 = ({ parentWidth: t11, parentHeight: e16, count: i9, maxCount: a12, aspectRatio: r9 }) => {
  let h2 = 0, n9 = 0, s9 = 0, o14 = 0, l5 = false, g2 = 0, d4 = 0;
  const u3 = Math.min(Math.ceil(Math.sqrt(i9 * (r9.width / r9.height) / (t11 / e16))), a12), c5 = e16 / u3, f2 = c5 * (r9.width / r9.height), P = Math.floor(t11 / f2);
  if (h2 = f2, n9 = c5, g2 = Math.min(i9, u3 * P), d4 = i9 % (u3 * P), l5 = d4 > 0 && i9 > u3 * P, l5) {
    const i10 = e16 / Math.min(Math.ceil(Math.sqrt(d4 * (r9.width / r9.height) / (t11 / e16))), a12);
    o14 = i10, s9 = i10 * (r9.width / r9.height);
  }
  return { tilesInFirstPage: g2, defaultWidth: h2, defaultHeight: n9, lastPageWidth: s9, lastPageHeight: o14, isLastPageDifferentFromFirstPage: l5 };
};
function o6({ count: t11, parentWidth: e16, parentHeight: i9, maxTileCount: a12, maxRowCount: o14, maxColCount: l5, aspectRatio: g2 }) {
  let d4 = 0, u3 = 0, c5 = 0, f2 = 0, P = false, p2 = 0;
  if (0 === t11) return { tilesInFirstPage: p2, defaultWidth: d4, defaultHeight: u3, lastPageWidth: c5, lastPageHeight: f2, isLastPageDifferentFromFirstPage: P };
  if (a12) ({ tilesInFirstPage: p2, defaultWidth: d4, defaultHeight: u3, lastPageWidth: c5, lastPageHeight: f2, isLastPageDifferentFromFirstPage: P } = n4({ parentWidth: e16, parentHeight: i9, count: t11, maxCount: a12, aspectRatio: g2 }));
  else if (o14) ({ tilesInFirstPage: p2, defaultWidth: d4, defaultHeight: u3, lastPageWidth: c5, lastPageHeight: f2, isLastPageDifferentFromFirstPage: P } = s6({ parentWidth: e16, parentHeight: i9, count: t11, maxCount: o14, aspectRatio: g2 }));
  else if (l5) ({ tilesInFirstPage: p2, defaultWidth: d4, defaultHeight: u3, lastPageWidth: c5, lastPageHeight: f2, isLastPageDifferentFromFirstPage: P } = h({ parentWidth: e16, parentHeight: i9, count: t11, maxCount: l5, aspectRatio: g2 }));
  else {
    const { width: a13, height: h2 } = r4(e16, i9, t11, g2.width, g2.height);
    d4 = a13, u3 = h2, p2 = t11;
  }
  return { tilesInFirstPage: p2, defaultWidth: d4, defaultHeight: u3, lastPageWidth: c5, lastPageHeight: f2, isLastPageDifferentFromFirstPage: P };
}
var l3 = (t11, e16, i9, a12 = true) => {
  if (!t11 || !e16 || !i9) return [];
  const r9 = [];
  for (const h2 of t11) {
    if (void 0 === h2.videoTrack && h2.audioTrack && e16[h2.audioTrack] ? r9.push({ peer: h2 }) : h2.videoTrack && e16[h2.videoTrack] ? r9.push({ track: e16[h2.videoTrack], peer: h2 }) : a12 || r9.push({ peer: h2 }), h2.auxiliaryTracks.length > 0 && h2.auxiliaryTracks.forEach((t12) => {
      const i10 = e16[t12];
      "video" === (null == i10 ? void 0 : i10.type) && "regular" === (null == i10 ? void 0 : i10.source) && r9.push({ track: i10, peer: h2 });
    }), i9(h2) && h2.auxiliaryTracks.length > 0) {
      const t12 = h2.auxiliaryTracks.find((t13) => {
        const i10 = e16[t13];
        return "video" === (null == i10 ? void 0 : i10.type) && "screen" === (null == i10 ? void 0 : i10.source);
      });
      t12 && r9.push({ track: e16[t12], peer: h2 });
    }
  }
  return r9;
};

// node_modules/@100mslive/react-sdk/dist/hooks/useVideoList.js
var n5 = { width: 1, height: 1 };
var l4 = ({ peers: l5, maxTileCount: m5, maxColCount: g2, maxRowCount: f2, includeScreenShareForPeer: u3 = () => false, aspectRatio: d4 = n5, filterNonPublishingPeers: P = true, offsetY: p2 = 0 }) => {
  const { width: c5 = 0, height: C2 = 0, ref: x2 } = useResizeDetector(), F = b2().getState(D), H = l3(l5, F, u3, P), W2 = (0, import_react11.useMemo)(() => {
    if (d4) return d4;
    return { width: a11(H) || 1, height: 1 };
  }, [d4, H]), w = H.length, { tilesInFirstPage: R2, defaultWidth: v5, defaultHeight: M2, lastPageWidth: S3, lastPageHeight: T, isLastPageDifferentFromFirstPage: j2 } = (0, import_react11.useMemo)(() => o6({ count: w, parentWidth: Math.floor(c5), parentHeight: Math.floor(C2) - Math.min(C2, p2), maxTileCount: m5, maxRowCount: f2, maxColCount: g2, aspectRatio: W2 }), [w, c5, C2, m5, f2, g2, W2, p2]);
  return { pagesWithTiles: (0, import_react11.useMemo)(() => e7({ elements: H, tilesInFirstPage: R2, onlyOnePage: false, isLastPageDifferentFromFirstPage: j2, defaultWidth: v5, defaultHeight: M2, lastPageWidth: S3, lastPageHeight: T }), [H, R2, j2, v5, M2, S3, T]), ref: x2 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useAudioLevelStyles.js
var import_react12 = __toESM(require_react());
function e8({ trackId: e16, getStyle: i9, ref: s9 }) {
  const m5 = b2();
  (0, import_react12.useEffect)(() => m5.subscribe((r9) => {
    if (!s9.current) return;
    const t11 = i9(r9);
    for (const r10 in t11) s9.current.style[r10] = t11[r10];
  }, ym(e16)), [i9, s9, m5, e16]);
}

// node_modules/@100mslive/react-sdk/dist/hooks/useDevices.js
var import_react13 = __toESM(require_react());
var r6 = (r9 = n3) => {
  const m5 = v2(), n9 = m2(Nn), I2 = m2(Xr), l5 = m2(ts), D2 = m2(l5 ? eS : Zm), f2 = { [Ns.audioOutput]: I2.audioOutputDeviceId }, O2 = { [Ns.audioOutput]: n9.audioOutput };
  D2.video && (O2[Ns.videoInput] = n9.videoInput, f2[Ns.videoInput] = I2.videoInputDeviceId), D2.audio && (O2[Ns.audioInput] = n9.audioInput, f2[Ns.audioInput] = I2.audioInputDeviceId);
  return { allDevices: O2, selectedDeviceIDs: f2, updateDevice: (0, import_react13.useCallback)(({ deviceType: i9, deviceId: t11 }) => n2(void 0, void 0, void 0, function* () {
    try {
      switch (i9) {
        case Ns.audioInput:
          yield m5.setAudioSettings({ deviceId: t11 });
          break;
        case Ns.videoInput:
          yield m5.setVideoSettings({ deviceId: t11 });
          break;
        case Ns.audioOutput:
          yield m5.setAudioOutputDevice(t11);
      }
    } catch (e16) {
      r9(e16, "updateDevices");
    }
  }), [r9, m5]) };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useParticipantList.js
var import_react14 = __toESM(require_react());

// node_modules/@100mslive/react-sdk/dist/utils/groupBy.js
var e9 = (e16) => e16 && Array.isArray(e16) && 0 !== e16.length ? e16.reduce((e17, r9) => r9.roleName ? (e17[r9.roleName] || (e17[r9.roleName] = []), e17[r9.roleName].push(r9), e17) : e17, {}) : {};

// node_modules/@100mslive/react-sdk/dist/hooks/useParticipantList.js
var p = () => {
  const p2 = m2(ye), n9 = m2(p2 ? oe : Vn), c5 = m2(xn), f2 = (0, import_react14.useMemo)(() => e9(n9), [n9]);
  return { roles: Object.keys(f2), participantsByRoles: f2, peerCount: c5, isConnected: p2 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useRecordingStreaming.js
var e10 = () => {
  const e16 = m2(tc), o14 = m2(ic), g2 = m2(rc), m5 = e16.server.running, u3 = e16.browser.running, t11 = e16.hls.running, R2 = m5 || u3 || t11;
  return { isServerRecordingOn: m5, isBrowserRecordingOn: u3, isHLSRecordingOn: t11, isStreamingOn: g2.running || o14.running, isHLSRunning: g2.running, isRTMPRunning: o14.running, isRecordingOn: R2 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useAutoplayError.js
var import_react15 = __toESM(require_react());
var d3 = () => {
  const d4 = E(tr.ERROR), [l5, n9] = (0, import_react15.useState)(""), u3 = v2(), v5 = (0, import_react15.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    yield u3.unblockAudio();
  }), [u3]);
  return (0, import_react15.useEffect)(() => {
    3008 === (null == d4 ? void 0 : d4.data.code) && n9(null == d4 ? void 0 : d4.data.message);
  }, [d4]), { error: l5, unblockAudio: v5, resetError: () => n9("") };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useCustomEvent.js
var import_react16 = __toESM(require_react());
var m4 = ({ type: m5, json: d4 = true, onEvent: a12, handleError: l5 = n3 }) => {
  const c5 = v2(), p2 = g();
  (0, import_react16.useEffect)(() => {
    c5.ignoreMessageTypes([m5]);
  }, [c5, m5]), (0, import_react16.useEffect)(() => {
    if (!p2) return;
    return p2.onNotification((e16) => {
      const s9 = e16.data;
      if (s9 && s9.type === m5) try {
        const e17 = d4 ? JSON.parse(s9.message) : s9.message;
        null == a12 || a12(e17);
      } catch (e17) {
        l5(e17, "handleCustomEvent");
      }
    }, tr.NEW_MESSAGE);
  }, [p2, m5, d4, a12, l5]);
  return { sendEvent: (0, import_react16.useCallback)((s9, o14) => n2(void 0, void 0, void 0, function* () {
    try {
      const e16 = ((e17, s10) => s10 ? JSON.stringify(e17 || "") : e17)(s9, d4);
      o14 && Array.isArray(null == o14 ? void 0 : o14.roleNames) ? yield c5.sendGroupMessage(e16, o14.roleNames, m5) : "string" == typeof (null == o14 ? void 0 : o14.peerId) ? yield c5.sendDirectMessage(e16, o14.peerId, m5) : yield c5.sendBroadcastMessage(e16, m5), null == a12 || a12(s9);
    } catch (e16) {
      l5(e16, "sendCustomEvent");
    }
  }), [c5, l5, a12, m5, d4]) };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useParticipants.js
var n6 = (n9) => {
  var d4;
  const m5 = m2(ye), v5 = m2(xn), c5 = m2(Zn);
  let u3 = m2(m5 ? oe : Vn);
  const p2 = Array.from(new Set(u3.map((e16) => e16.roleName))), f2 = b2();
  if ((null === (d4 = null == n9 ? void 0 : n9.metadata) || void 0 === d4 ? void 0 : d4.isHandRaised) && (u3 = u3.filter((e16) => f2.getState(Wm(e16.id)).isHandRaised)), (null == n9 ? void 0 : n9.role) && c5.includes(n9.role) && (u3 = u3.filter((e16) => e16.roleName === n9.role)), null == n9 ? void 0 : n9.search) {
    const e16 = n9.search.toLowerCase();
    u3 = u3.filter((o14) => {
      var r9;
      return (null === (r9 = o14.roleName) || void 0 === r9 ? void 0 : r9.toLowerCase().includes(e16)) || o14.name.toLowerCase().includes(e16);
    });
  }
  return { participants: u3, isConnected: m5, peerCount: v5, rolesWithParticipants: p2 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useEmbedShare.js
var import_react17 = __toESM(require_react());
var u2 = (u3) => {
  const a12 = (0, import_react17.useRef)(null), [f2, l5] = (0, import_react17.useState)(false), m5 = (0, import_react17.useCallback)(() => {
    throw new Error("unable to start screen share");
  }, []), d4 = (0, import_react17.useRef)(false), { amIScreenSharing: h2, toggleScreenShare: S3 } = s5(m5), b3 = s4(h2), p2 = (0, import_react17.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    h2 && (yield null == S3 ? void 0 : S3(), a12.current = null);
  }), [h2, S3]), v5 = (0, import_react17.useCallback)((e16) => n2(void 0, void 0, void 0, function* () {
    if (!d4.current) {
      if (!e16) throw new Error("URL not found");
      if (h2) throw new Error("You are already sharing");
      if (!a12.current) throw new Error("Attach a reference `iframeRef` to iframe for sharing");
      a12.current.src = e16, d4.current = true, l5(true), yield null == S3 ? void 0 : S3({ forceCurrentTab: m3, cropElement: a12.current, preferCurrentTab: m3 });
    }
  }), [h2, S3]);
  return (0, import_react17.useEffect)(() => {
    b3 && !h2 && (null == u3 || u3(), a12.current && (a12.current.src = ""), d4.current = false, l5(false));
  }, [h2, b3, u3]), { startEmbedShare: v5, stopEmbedShare: p2, iframeRef: a12, isEmbedShareInProgress: f2 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/usePDFShare.js
var import_react18 = __toESM(require_react());
var c3 = (c5) => {
  const l5 = (0, import_react18.useRef)(null), [f2, m5] = (0, import_react18.useState)(false), d4 = (0, import_react18.useCallback)(() => {
    throw new Error("unable to start screen share");
  }, []), h2 = (0, import_react18.useRef)(false), { amIScreenSharing: w, toggleScreenShare: p2 } = s5(d4), v5 = s4(w), S3 = (0, import_react18.useCallback)((r9) => {
    var e16;
    l5.current && (null === (e16 = l5.current.contentWindow) || void 0 === e16 || e16.postMessage({ theme: 2, file: r9 }, "*"));
  }, []), g2 = (0, import_react18.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    w && (yield null == p2 ? void 0 : p2());
  }), [w, p2]), b3 = (0, import_react18.useCallback)((e16) => n2(void 0, void 0, void 0, function* () {
    if (h2.current) return;
    if (!e16) throw new Error("File or url not found");
    if (w) throw new Error("You are already sharing");
    if (!l5.current) throw new Error("Attach a reference `iframeRef` to iframe for sharing");
    l5.current.src = `${l2}${"string" == typeof e16 ? `?file=${e16}` : ""}`, l5.current.onload = () => {
      requestAnimationFrame(() => {
        e16 instanceof File && S3(e16);
      });
    }, h2.current = true, m5(true);
    const r9 = window.self !== window.top;
    yield null == p2 ? void 0 : p2({ forceCurrentTab: m3 && !r9, cropElement: l5.current, preferCurrentTab: m3 && !r9 });
  }), [w, S3, p2]);
  return (0, import_react18.useEffect)(() => {
    v5 && !w && (null == c5 || c5(), l5.current && l5.current.removeAttribute("src"), h2.current = false, m5(false));
  }, [w, v5, c5]), { startPDFShare: b3, stopPDFShare: g2, iframeRef: l5, isPDFShareInProgress: f2 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/usePaginatedParticipants.js
var import_react19 = __toESM(require_react());
var o11 = (e16) => e16.reduce((e17, t11) => (e17[t11.id] = t11, e17), {});
var s8 = (s9) => {
  const n9 = v2(), a12 = (0, import_react19.useRef)(n9.getPeerListIterator(s9)), [c5, i9] = (0, import_react19.useState)({}), [u3, m5] = (0, import_react19.useState)(0);
  return { loadPeers: () => a12.current.findPeers().then((e16) => {
    i9(o11(e16)), m5(a12.current.getTotal());
  }), loadMorePeers: () => a12.current.next().then((e16) => {
    i9((t11) => Object.assign(Object.assign({}, t11), o11(e16))), m5(a12.current.getTotal());
  }), hasNext: () => a12.current.hasNext(), total: u3, peers: Object.values(c5) };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useWhiteboard.js
var import_react20 = __toESM(require_react());
var c4 = (c5 = false) => {
  var a12, f2;
  const p2 = m2(ye), b3 = null === (a12 = m2(z)) || void 0 === a12 ? void 0 : a12.customerUserId, w = m2(hc), h2 = m2(um("disableNotifications")), y2 = !!(null == w ? void 0 : w.open), g2 = (null == w ? void 0 : w.owner) === b3, j2 = v2(), [C2, R2] = (0, import_react20.useState)(false), _2 = null === (f2 = m2(rs)) || void 0 === f2 ? void 0 : f2.whiteboard, P = !!(null == _2 ? void 0 : _2.includes("admin")), U2 = (0, import_react20.useRef)(null);
  (0, import_react20.useEffect)(() => {
    if (!(null == w ? void 0 : w.url) || !U2.current) return;
    const i9 = new URL(w.url);
    (h2 || c5) && i9.searchParams.set("zoom_to_content", "true"), U2.current.src = i9.toString();
  }, [null == w ? void 0 : w.url, h2, c5]), (0, import_react20.useEffect)(() => {
    p2 && R2(j2.interactivityCenter.whiteboard.isEnabled);
  }, [p2, j2]);
  const x2 = (0, import_react20.useCallback)(() => n2(void 0, void 0, void 0, function* () {
    p2 && P && (y2 ? g2 && (yield j2.interactivityCenter.whiteboard.close()) : yield j2.interactivityCenter.whiteboard.open());
  }), [j2, g2, P, y2, p2]);
  return { open: y2, isOwner: g2, isAdmin: P, iframeRef: U2, toggle: C2 && P ? x2 : void 0 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useAwayNotifications.js
var import_react21 = __toESM(require_react());
var t10 = () => ({ requestPermission: (0, import_react21.useCallback)(() => n2(void 0, void 0, void 0, function* () {
  Notification && "granted" !== (null === Notification || void 0 === Notification ? void 0 : Notification.permission) && (yield Notification.requestPermission());
}), []), showNotification: (0, import_react21.useCallback)((i9, o14) => {
  if (!Notification || "denied" === (null === Notification || void 0 === Notification ? void 0 : Notification.permission) || "visible" === document.visibilityState && document.hasFocus()) return;
  const t11 = new Notification(i9, o14), e16 = () => {
    "visible" === document.visibilityState && document.hasFocus() && (null == t11 || t11.close(), document.removeEventListener("visibilitychange", e16));
  };
  document.addEventListener("visibilitychange", e16);
}, []) });
export {
  Ns as DeviceType,
  ys as DomainCategory,
  At as EventBus,
  Ds as HLSPlaylistType,
  _s as HLSStreamType,
  mr as HMSAudioPluginType,
  Ss as HMSLogLevel,
  Da as HMSMessageType,
  jr as HMSNotificationSeverity,
  tr as HMSNotificationTypes,
  gr as HMSPeerType,
  Jr as HMSPlaylistType,
  Sr as HMSPluginUnsupportedTypes,
  et as HMSReactiveStore,
  ws as HMSRecordingState,
  l as HMSRoomProvider,
  er as HMSRoomState,
  Vt as HMSStats,
  Mr as HMSVideoPluginCanvasContextType,
  vr as HMSVideoPluginType,
  Wt as createDefaultStatsStore,
  Gt as createDefaultStoreState,
  l3 as getPeersWithTiles,
  pe as parsedUserAgent,
  um as selectAppData,
  hm as selectAppDataByPath,
  hs as selectAudioPlaylist,
  Rm as selectAudioPlaylistTrackByPeerID,
  gm as selectAudioTrackByID,
  Ao as selectAudioTrackByPeerID,
  aa as selectAudioTrackVolume,
  Dm as selectAudioVolumeByPeerID,
  Pm as selectAuxiliaryAudioByPeerID,
  Mm as selectAuxiliaryTracksByPeerID,
  Zn as selectAvailableRoleNames,
  Io as selectBroadcastMessages,
  Om as selectBroadcastMessagesUnreadCount,
  vm as selectCameraStreamByPeerID,
  On as selectConnectionQualities,
  Em as selectConnectionQualityByPeerID,
  Jn as selectDegradedTracks,
  Nn as selectDevices,
  lS as selectDidIJoinWithin,
  Fn as selectDominantSpeaker,
  cc as selectEffectsKey,
  Na as selectErrors,
  ir as selectFullAppData,
  rc as selectHLSState,
  Fa as selectHMSBroadcastMessages,
  at as selectHMSMessages,
  Qn as selectHMSMessagesCount,
  En as selectHMSStats,
  pc as selectHandRaisedPeers,
  $m as selectHasPeerHandRaised,
  eS as selectIsAllowedToPreviewMedia,
  Zm as selectIsAllowedToPublish,
  ec as selectIsAllowedToSubscribe,
  sa as selectIsAudioLocallyMuted,
  ye as selectIsConnectedToRoom,
  nc as selectIsEffectsEnabled,
  ts as selectIsInPreview,
  oc as selectIsLargeRoom,
  Gn as selectIsLocalAudioEnabled,
  nS as selectIsLocalAudioPluginPresent,
  sr as selectIsLocalScreenShared,
  es as selectIsLocalVideoDisplayEnabled,
  rr as selectIsLocalVideoEnabled,
  oS as selectIsLocalVideoPluginPresent,
  Lm as selectIsLocallyMutedByPeerID,
  Hm as selectIsPeerAudioEnabled,
  Cm as selectIsPeerVideoEnabled,
  aS as selectIsRoleAllowedToPublish,
  wm as selectIsScreenShareLocallyMutedByPeerID,
  Wn as selectIsSomeoneScreenSharing,
  Z as selectLocalAudioTrackID,
  Xr as selectLocalMediaSettings,
  z as selectLocalPeer,
  ue as selectLocalPeerID,
  Un as selectLocalPeerName,
  qt as selectLocalPeerRole,
  Bn as selectLocalPeerRoleName,
  Zr as selectLocalTrackIDs,
  q as selectLocalVideoTrackID,
  qm as selectMessageByMessageID,
  Yr as selectMessageIDsInOrder,
  xm as selectMessagesByPeerID,
  Um as selectMessagesByRole,
  Kt as selectMessagesMap,
  Vm as selectMessagesUnreadCountByPeerID,
  Bm as selectMessagesUnreadCountByRole,
  km as selectPeerAudioByID,
  cS as selectPeerByCondition,
  Q as selectPeerByID,
  xn as selectPeerCount,
  Wm as selectPeerMetadata,
  Km as selectPeerName,
  mm as selectPeerNameByID,
  Va as selectPeerScreenSharing,
  $n as selectPeerSharingAudio,
  jn as selectPeerSharingAudioPlaylist,
  qn as selectPeerSharingVideoPlaylist,
  Sm as selectPeerTypeByID,
  oe as selectPeers,
  dS as selectPeersByCondition,
  Fm as selectPeersByRole,
  Gm as selectPeersByRoles,
  G as selectPeersMap,
  Kn as selectPeersScreenSharing,
  Ym as selectPeersWithAudioStatus,
  rs as selectPermissions,
  ca as selectPollByID,
  uc as selectPolls,
  ss as selectPollsMap,
  is as selectPreviewRole,
  Ga as selectPreviewRoleName,
  ic as selectRTMPState,
  Dn as selectRecentError,
  tc as selectRecordingState,
  Vn as selectRemotePeers,
  wo as selectRoleByRoleName,
  Xm as selectRoleChangeRequest,
  ne as selectRolesMap,
  B as selectRoom,
  _n as selectRoomID,
  ac as selectRoomStartTime,
  Xn as selectRoomStarted,
  Y as selectRoomState,
  Tm as selectScreenAudioTrackByID,
  ra as selectScreenShareAudioByPeerID,
  Im as selectScreenShareByPeerID,
  ia as selectScreenSharesByPeerId,
  fm as selectScreenVideoTrackByID,
  _m as selectScreenshareAudioVolumeByPeerID,
  sc as selectSessionId,
  lc as selectSessionMetadata,
  pm as selectSessionStore,
  Nm as selectSimulcastLayerByTrack,
  Oa as selectSpeakers,
  dc as selectTemplateAppData,
  ym as selectTrackAudioByID,
  ni as selectTrackByID,
  D as selectTracksMap,
  Yn as selectUnreadHMSBroadcastMessagesCount,
  zn as selectUnreadHMSMessagesCount,
  ms as selectVideoPlaylist,
  Am as selectVideoPlaylistAudioTrackByPeerID,
  bm as selectVideoPlaylistVideoTrackByPeerID,
  ea as selectVideoTrackByID,
  bo as selectVideoTrackByPeerID,
  hc as selectWhiteboard,
  Wa as selectWhiteboards,
  we as simulcastMapping,
  i as throwErrorHandler,
  v3 as useAVToggle,
  e8 as useAudioLevelStyles,
  d3 as useAutoplayError,
  t10 as useAwayNotifications,
  m4 as useCustomEvent,
  r6 as useDevices,
  u2 as useEmbedShare,
  v2 as useHMSActions,
  E as useHMSNotifications,
  S2 as useHMSStatsStore,
  m2 as useHMSStore,
  g as useHMSVanillaNotifications,
  b2 as useHMSVanillaStore,
  c3 as usePDFShare,
  s8 as usePaginatedParticipants,
  p as useParticipantList,
  n6 as useParticipants,
  c2 as usePreviewJoin,
  e10 as useRecordingStreaming,
  r3 as useRemoteAVToggle,
  s5 as useScreenShare,
  u as useVideo,
  l4 as useVideoList,
  c4 as useWhiteboard
};
//# sourceMappingURL=@100mslive_react-sdk.js.map
